type AggregateCAccount {
  count: Int!
}

type AggregateCAircraft {
  count: Int!
}

type AggregateCAircraftType {
  count: Int!
}

type AggregateCAirport {
  count: Int!
}

type AggregateCAlert {
  count: Int!
}

type AggregateCateringCategory {
  count: Int!
}

type AggregateCateringCompanyEmail {
  count: Int!
}

type AggregateCateringCompanyEmailType {
  count: Int!
}

type AggregateCateringCompanyPhoneNumber {
  count: Int!
}

type AggregateCateringCompanyPhoneNumberType {
  count: Int!
}

type AggregateCateringCosts {
  count: Int!
}

type AggregateCateringCountry {
  count: Int!
}

type AggregateCateringCuisine {
  count: Int!
}

type AggregateCateringDietaryPreference {
  count: Int!
}

type AggregateCateringIngredient {
  count: Int!
}

type AggregateCateringNotification {
  count: Int!
}

type AggregateCateringPersonEmail {
  count: Int!
}

type AggregateCateringPersonEmailType {
  count: Int!
}

type AggregateCateringPersonNationality {
  count: Int!
}

type AggregateCateringPersonPhoneNumber {
  count: Int!
}

type AggregateCateringPersonPhoneNumberType {
  count: Int!
}

type AggregateCateringPreference {
  count: Int!
}

type AggregateCateringPreferenceCategory {
  count: Int!
}

type AggregateCateringProposalSubscriber {
  count: Int!
}

type AggregateCateringPurchaseOrder {
  count: Int!
}

type AggregateCateringTask {
  count: Int!
}

type AggregateCateringTaskNote {
  count: Int!
}

type AggregateCateringUnit {
  count: Int!
}

type AggregateCateringWFTransition {
  count: Int!
}

type AggregateCCompany {
  count: Int!
}

type AggregateCContract {
  count: Int!
}

type AggregateCCrew {
  count: Int!
}

type AggregateCCrewRole {
  count: Int!
}

type AggregateCFboServiceProvider {
  count: Int!
}

type AggregateCFlightLeg {
  count: Int!
}

type AggregateCFxRate {
  count: Int!
}

type AggregateCPerson {
  count: Int!
}

type AggregateCPlace {
  count: Int!
}

type AggregateCPriceItem {
  count: Int!
}

type AggregateCPriceList {
  count: Int!
}

type AggregateCServiceProvider {
  count: Int!
}

type AggregateCServiceType {
  count: Int!
}

type AggregateCTimezone {
  count: Int!
}

type AggregateCurrency {
  count: Int!
}

type AggregateDayOfWeekValue {
  count: Int!
}

type AggregateDefaultProposal {
  count: Int!
}

type AggregateDelivery {
  count: Int!
}

type AggregateEmailAddress {
  count: Int!
}

type AggregateFlightFileProposal {
  count: Int!
}

type AggregateLegBusinessType {
  count: Int!
}

type AggregateLegOperationalStatus {
  count: Int!
}

type AggregateLegOperationalType {
  count: Int!
}

type AggregateMsTask {
  count: Int!
}

type AggregateOpeningHour {
  count: Int!
}

type AggregateOrderBusinessType {
  count: Int!
}

type AggregateOverBudget {
  count: Int!
}

type AggregateOverBudgetNote {
  count: Int!
}

type AggregatePassenger {
  count: Int!
}

type AggregateProposal {
  count: Int!
}

type AggregateProposalDocument {
  count: Int!
}

type AggregateProposalItem {
  count: Int!
}

type AggregatePurchaseOrderDocument {
  count: Int!
}

type AggregatePurchaseOrderItem {
  count: Int!
}

type AggregateQualityControl {
  count: Int!
}

type AggregateQualityNote {
  count: Int!
}

type AggregateServiceProviderEmail {
  count: Int!
}

type AggregateServiceProviderPhoneNumber {
  count: Int!
}

type AggregateUserPreferences {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type CAccount {
  id: ID!
  coreId: String!
  company: CCompany
  baseCompany: CCompany
  isActive: Boolean
}

type CAccountConnection {
  pageInfo: PageInfo!
  edges: [CAccountEdge]!
  aggregate: AggregateCAccount!
}

input CAccountCreateInput {
  coreId: String!
  company: CCompanyCreateOneInput
  baseCompany: CCompanyCreateOneInput
  isActive: Boolean
}

input CAccountCreateOneInput {
  create: CAccountCreateInput
  connect: CAccountWhereUniqueInput
}

type CAccountEdge {
  node: CAccount!
  cursor: String!
}

enum CAccountOrderByInput {
  id_ASC
  id_DESC
  coreId_ASC
  coreId_DESC
  isActive_ASC
  isActive_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type CAccountPreviousValues {
  id: ID!
  coreId: String!
  isActive: Boolean
}

type CAccountSubscriptionPayload {
  mutation: MutationType!
  node: CAccount
  updatedFields: [String!]
  previousValues: CAccountPreviousValues
}

input CAccountSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CAccountWhereInput
  AND: [CAccountSubscriptionWhereInput!]
  OR: [CAccountSubscriptionWhereInput!]
  NOT: [CAccountSubscriptionWhereInput!]
}

input CAccountUpdateDataInput {
  coreId: String
  company: CCompanyUpdateOneInput
  baseCompany: CCompanyUpdateOneInput
  isActive: Boolean
}

input CAccountUpdateInput {
  coreId: String
  company: CCompanyUpdateOneInput
  baseCompany: CCompanyUpdateOneInput
  isActive: Boolean
}

input CAccountUpdateManyMutationInput {
  coreId: String
  isActive: Boolean
}

input CAccountUpdateOneInput {
  create: CAccountCreateInput
  update: CAccountUpdateDataInput
  upsert: CAccountUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: CAccountWhereUniqueInput
}

input CAccountUpsertNestedInput {
  update: CAccountUpdateDataInput!
  create: CAccountCreateInput!
}

input CAccountWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  coreId: String
  coreId_not: String
  coreId_in: [String!]
  coreId_not_in: [String!]
  coreId_lt: String
  coreId_lte: String
  coreId_gt: String
  coreId_gte: String
  coreId_contains: String
  coreId_not_contains: String
  coreId_starts_with: String
  coreId_not_starts_with: String
  coreId_ends_with: String
  coreId_not_ends_with: String
  company: CCompanyWhereInput
  baseCompany: CCompanyWhereInput
  isActive: Boolean
  isActive_not: Boolean
  AND: [CAccountWhereInput!]
  OR: [CAccountWhereInput!]
  NOT: [CAccountWhereInput!]
}

input CAccountWhereUniqueInput {
  id: ID
  coreId: String
}

type CAircraft {
  id: ID!
  coreId: String!
  tailNumber: String
  aircraftType: CAircraftType
  operatingCompany: CCompany
  owningCompany: CCompany
  isActive: Boolean
}

type CAircraftConnection {
  pageInfo: PageInfo!
  edges: [CAircraftEdge]!
  aggregate: AggregateCAircraft!
}

input CAircraftCreateInput {
  coreId: String!
  tailNumber: String
  aircraftType: CAircraftTypeCreateOneInput
  operatingCompany: CCompanyCreateOneInput
  owningCompany: CCompanyCreateOneInput
  isActive: Boolean
}

input CAircraftCreateOneInput {
  create: CAircraftCreateInput
  connect: CAircraftWhereUniqueInput
}

type CAircraftEdge {
  node: CAircraft!
  cursor: String!
}

enum CAircraftOrderByInput {
  id_ASC
  id_DESC
  coreId_ASC
  coreId_DESC
  tailNumber_ASC
  tailNumber_DESC
  isActive_ASC
  isActive_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type CAircraftPreviousValues {
  id: ID!
  coreId: String!
  tailNumber: String
  isActive: Boolean
}

type CAircraftSubscriptionPayload {
  mutation: MutationType!
  node: CAircraft
  updatedFields: [String!]
  previousValues: CAircraftPreviousValues
}

input CAircraftSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CAircraftWhereInput
  AND: [CAircraftSubscriptionWhereInput!]
  OR: [CAircraftSubscriptionWhereInput!]
  NOT: [CAircraftSubscriptionWhereInput!]
}

type CAircraftType {
  id: ID!
  coreId: String!
  displayName: String
  name: String
  code: String
  isActive: Boolean
}

type CAircraftTypeConnection {
  pageInfo: PageInfo!
  edges: [CAircraftTypeEdge]!
  aggregate: AggregateCAircraftType!
}

input CAircraftTypeCreateInput {
  coreId: String!
  displayName: String
  name: String
  code: String
  isActive: Boolean
}

input CAircraftTypeCreateOneInput {
  create: CAircraftTypeCreateInput
  connect: CAircraftTypeWhereUniqueInput
}

type CAircraftTypeEdge {
  node: CAircraftType!
  cursor: String!
}

enum CAircraftTypeOrderByInput {
  id_ASC
  id_DESC
  coreId_ASC
  coreId_DESC
  displayName_ASC
  displayName_DESC
  name_ASC
  name_DESC
  code_ASC
  code_DESC
  isActive_ASC
  isActive_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type CAircraftTypePreviousValues {
  id: ID!
  coreId: String!
  displayName: String
  name: String
  code: String
  isActive: Boolean
}

type CAircraftTypeSubscriptionPayload {
  mutation: MutationType!
  node: CAircraftType
  updatedFields: [String!]
  previousValues: CAircraftTypePreviousValues
}

input CAircraftTypeSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CAircraftTypeWhereInput
  AND: [CAircraftTypeSubscriptionWhereInput!]
  OR: [CAircraftTypeSubscriptionWhereInput!]
  NOT: [CAircraftTypeSubscriptionWhereInput!]
}

input CAircraftTypeUpdateDataInput {
  coreId: String
  displayName: String
  name: String
  code: String
  isActive: Boolean
}

input CAircraftTypeUpdateInput {
  coreId: String
  displayName: String
  name: String
  code: String
  isActive: Boolean
}

input CAircraftTypeUpdateManyMutationInput {
  coreId: String
  displayName: String
  name: String
  code: String
  isActive: Boolean
}

input CAircraftTypeUpdateOneInput {
  create: CAircraftTypeCreateInput
  update: CAircraftTypeUpdateDataInput
  upsert: CAircraftTypeUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: CAircraftTypeWhereUniqueInput
}

input CAircraftTypeUpsertNestedInput {
  update: CAircraftTypeUpdateDataInput!
  create: CAircraftTypeCreateInput!
}

input CAircraftTypeWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  coreId: String
  coreId_not: String
  coreId_in: [String!]
  coreId_not_in: [String!]
  coreId_lt: String
  coreId_lte: String
  coreId_gt: String
  coreId_gte: String
  coreId_contains: String
  coreId_not_contains: String
  coreId_starts_with: String
  coreId_not_starts_with: String
  coreId_ends_with: String
  coreId_not_ends_with: String
  displayName: String
  displayName_not: String
  displayName_in: [String!]
  displayName_not_in: [String!]
  displayName_lt: String
  displayName_lte: String
  displayName_gt: String
  displayName_gte: String
  displayName_contains: String
  displayName_not_contains: String
  displayName_starts_with: String
  displayName_not_starts_with: String
  displayName_ends_with: String
  displayName_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  code: String
  code_not: String
  code_in: [String!]
  code_not_in: [String!]
  code_lt: String
  code_lte: String
  code_gt: String
  code_gte: String
  code_contains: String
  code_not_contains: String
  code_starts_with: String
  code_not_starts_with: String
  code_ends_with: String
  code_not_ends_with: String
  isActive: Boolean
  isActive_not: Boolean
  AND: [CAircraftTypeWhereInput!]
  OR: [CAircraftTypeWhereInput!]
  NOT: [CAircraftTypeWhereInput!]
}

input CAircraftTypeWhereUniqueInput {
  id: ID
  coreId: String
}

input CAircraftUpdateDataInput {
  coreId: String
  tailNumber: String
  aircraftType: CAircraftTypeUpdateOneInput
  operatingCompany: CCompanyUpdateOneInput
  owningCompany: CCompanyUpdateOneInput
  isActive: Boolean
}

input CAircraftUpdateInput {
  coreId: String
  tailNumber: String
  aircraftType: CAircraftTypeUpdateOneInput
  operatingCompany: CCompanyUpdateOneInput
  owningCompany: CCompanyUpdateOneInput
  isActive: Boolean
}

input CAircraftUpdateManyMutationInput {
  coreId: String
  tailNumber: String
  isActive: Boolean
}

input CAircraftUpdateOneInput {
  create: CAircraftCreateInput
  update: CAircraftUpdateDataInput
  upsert: CAircraftUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: CAircraftWhereUniqueInput
}

input CAircraftUpsertNestedInput {
  update: CAircraftUpdateDataInput!
  create: CAircraftCreateInput!
}

input CAircraftWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  coreId: String
  coreId_not: String
  coreId_in: [String!]
  coreId_not_in: [String!]
  coreId_lt: String
  coreId_lte: String
  coreId_gt: String
  coreId_gte: String
  coreId_contains: String
  coreId_not_contains: String
  coreId_starts_with: String
  coreId_not_starts_with: String
  coreId_ends_with: String
  coreId_not_ends_with: String
  tailNumber: String
  tailNumber_not: String
  tailNumber_in: [String!]
  tailNumber_not_in: [String!]
  tailNumber_lt: String
  tailNumber_lte: String
  tailNumber_gt: String
  tailNumber_gte: String
  tailNumber_contains: String
  tailNumber_not_contains: String
  tailNumber_starts_with: String
  tailNumber_not_starts_with: String
  tailNumber_ends_with: String
  tailNumber_not_ends_with: String
  aircraftType: CAircraftTypeWhereInput
  operatingCompany: CCompanyWhereInput
  owningCompany: CCompanyWhereInput
  isActive: Boolean
  isActive_not: Boolean
  AND: [CAircraftWhereInput!]
  OR: [CAircraftWhereInput!]
  NOT: [CAircraftWhereInput!]
}

input CAircraftWhereUniqueInput {
  id: ID
  coreId: String
}

type CAirport {
  id: ID!
  coreId: String!
  icao: String
  iata: String
  name: String
  place: CPlace
  isActive: Boolean
  cateringAirportName: String
  timezones(where: CTimezoneWhereInput, orderBy: CTimezoneOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CTimezone!]
}

type CAirportConnection {
  pageInfo: PageInfo!
  edges: [CAirportEdge]!
  aggregate: AggregateCAirport!
}

input CAirportCreateInput {
  coreId: String!
  icao: String
  iata: String
  name: String
  place: CPlaceCreateOneInput
  isActive: Boolean
  cateringAirportName: String
  timezones: CTimezoneCreateManyInput
}

input CAirportCreateManyInput {
  create: [CAirportCreateInput!]
  connect: [CAirportWhereUniqueInput!]
}

input CAirportCreateOneInput {
  create: CAirportCreateInput
  connect: CAirportWhereUniqueInput
}

type CAirportEdge {
  node: CAirport!
  cursor: String!
}

enum CAirportOrderByInput {
  id_ASC
  id_DESC
  coreId_ASC
  coreId_DESC
  icao_ASC
  icao_DESC
  iata_ASC
  iata_DESC
  name_ASC
  name_DESC
  isActive_ASC
  isActive_DESC
  cateringAirportName_ASC
  cateringAirportName_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type CAirportPreviousValues {
  id: ID!
  coreId: String!
  icao: String
  iata: String
  name: String
  isActive: Boolean
  cateringAirportName: String
}

input CAirportScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  coreId: String
  coreId_not: String
  coreId_in: [String!]
  coreId_not_in: [String!]
  coreId_lt: String
  coreId_lte: String
  coreId_gt: String
  coreId_gte: String
  coreId_contains: String
  coreId_not_contains: String
  coreId_starts_with: String
  coreId_not_starts_with: String
  coreId_ends_with: String
  coreId_not_ends_with: String
  icao: String
  icao_not: String
  icao_in: [String!]
  icao_not_in: [String!]
  icao_lt: String
  icao_lte: String
  icao_gt: String
  icao_gte: String
  icao_contains: String
  icao_not_contains: String
  icao_starts_with: String
  icao_not_starts_with: String
  icao_ends_with: String
  icao_not_ends_with: String
  iata: String
  iata_not: String
  iata_in: [String!]
  iata_not_in: [String!]
  iata_lt: String
  iata_lte: String
  iata_gt: String
  iata_gte: String
  iata_contains: String
  iata_not_contains: String
  iata_starts_with: String
  iata_not_starts_with: String
  iata_ends_with: String
  iata_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  isActive: Boolean
  isActive_not: Boolean
  cateringAirportName: String
  cateringAirportName_not: String
  cateringAirportName_in: [String!]
  cateringAirportName_not_in: [String!]
  cateringAirportName_lt: String
  cateringAirportName_lte: String
  cateringAirportName_gt: String
  cateringAirportName_gte: String
  cateringAirportName_contains: String
  cateringAirportName_not_contains: String
  cateringAirportName_starts_with: String
  cateringAirportName_not_starts_with: String
  cateringAirportName_ends_with: String
  cateringAirportName_not_ends_with: String
  AND: [CAirportScalarWhereInput!]
  OR: [CAirportScalarWhereInput!]
  NOT: [CAirportScalarWhereInput!]
}

type CAirportSubscriptionPayload {
  mutation: MutationType!
  node: CAirport
  updatedFields: [String!]
  previousValues: CAirportPreviousValues
}

input CAirportSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CAirportWhereInput
  AND: [CAirportSubscriptionWhereInput!]
  OR: [CAirportSubscriptionWhereInput!]
  NOT: [CAirportSubscriptionWhereInput!]
}

input CAirportUpdateDataInput {
  coreId: String
  icao: String
  iata: String
  name: String
  place: CPlaceUpdateOneInput
  isActive: Boolean
  cateringAirportName: String
  timezones: CTimezoneUpdateManyInput
}

input CAirportUpdateInput {
  coreId: String
  icao: String
  iata: String
  name: String
  place: CPlaceUpdateOneInput
  isActive: Boolean
  cateringAirportName: String
  timezones: CTimezoneUpdateManyInput
}

input CAirportUpdateManyDataInput {
  coreId: String
  icao: String
  iata: String
  name: String
  isActive: Boolean
  cateringAirportName: String
}

input CAirportUpdateManyInput {
  create: [CAirportCreateInput!]
  update: [CAirportUpdateWithWhereUniqueNestedInput!]
  upsert: [CAirportUpsertWithWhereUniqueNestedInput!]
  delete: [CAirportWhereUniqueInput!]
  connect: [CAirportWhereUniqueInput!]
  set: [CAirportWhereUniqueInput!]
  disconnect: [CAirportWhereUniqueInput!]
  deleteMany: [CAirportScalarWhereInput!]
  updateMany: [CAirportUpdateManyWithWhereNestedInput!]
}

input CAirportUpdateManyMutationInput {
  coreId: String
  icao: String
  iata: String
  name: String
  isActive: Boolean
  cateringAirportName: String
}

input CAirportUpdateManyWithWhereNestedInput {
  where: CAirportScalarWhereInput!
  data: CAirportUpdateManyDataInput!
}

input CAirportUpdateOneInput {
  create: CAirportCreateInput
  update: CAirportUpdateDataInput
  upsert: CAirportUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: CAirportWhereUniqueInput
}

input CAirportUpdateWithWhereUniqueNestedInput {
  where: CAirportWhereUniqueInput!
  data: CAirportUpdateDataInput!
}

input CAirportUpsertNestedInput {
  update: CAirportUpdateDataInput!
  create: CAirportCreateInput!
}

input CAirportUpsertWithWhereUniqueNestedInput {
  where: CAirportWhereUniqueInput!
  update: CAirportUpdateDataInput!
  create: CAirportCreateInput!
}

input CAirportWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  coreId: String
  coreId_not: String
  coreId_in: [String!]
  coreId_not_in: [String!]
  coreId_lt: String
  coreId_lte: String
  coreId_gt: String
  coreId_gte: String
  coreId_contains: String
  coreId_not_contains: String
  coreId_starts_with: String
  coreId_not_starts_with: String
  coreId_ends_with: String
  coreId_not_ends_with: String
  icao: String
  icao_not: String
  icao_in: [String!]
  icao_not_in: [String!]
  icao_lt: String
  icao_lte: String
  icao_gt: String
  icao_gte: String
  icao_contains: String
  icao_not_contains: String
  icao_starts_with: String
  icao_not_starts_with: String
  icao_ends_with: String
  icao_not_ends_with: String
  iata: String
  iata_not: String
  iata_in: [String!]
  iata_not_in: [String!]
  iata_lt: String
  iata_lte: String
  iata_gt: String
  iata_gte: String
  iata_contains: String
  iata_not_contains: String
  iata_starts_with: String
  iata_not_starts_with: String
  iata_ends_with: String
  iata_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  place: CPlaceWhereInput
  isActive: Boolean
  isActive_not: Boolean
  cateringAirportName: String
  cateringAirportName_not: String
  cateringAirportName_in: [String!]
  cateringAirportName_not_in: [String!]
  cateringAirportName_lt: String
  cateringAirportName_lte: String
  cateringAirportName_gt: String
  cateringAirportName_gte: String
  cateringAirportName_contains: String
  cateringAirportName_not_contains: String
  cateringAirportName_starts_with: String
  cateringAirportName_not_starts_with: String
  cateringAirportName_ends_with: String
  cateringAirportName_not_ends_with: String
  timezones_every: CTimezoneWhereInput
  timezones_some: CTimezoneWhereInput
  timezones_none: CTimezoneWhereInput
  AND: [CAirportWhereInput!]
  OR: [CAirportWhereInput!]
  NOT: [CAirportWhereInput!]
}

input CAirportWhereUniqueInput {
  id: ID
  coreId: String
}

type CAlert {
  id: ID!
  coreId: String!
  task: CateringTask
  type: String
  status: String
  newValue: String
  oldValue: String
  createdBy: CPerson
  _createdAt: DateTime
  modifiedBy: CPerson
  modifiedAt: DateTime
  hidden: Boolean
  removed: Boolean
}

type CAlertConnection {
  pageInfo: PageInfo!
  edges: [CAlertEdge]!
  aggregate: AggregateCAlert!
}

input CAlertCreateInput {
  coreId: String!
  task: CateringTaskCreateOneWithoutAlertsInput
  type: String
  status: String
  newValue: String
  oldValue: String
  createdBy: CPersonCreateOneInput
  _createdAt: DateTime
  modifiedBy: CPersonCreateOneInput
  modifiedAt: DateTime
  hidden: Boolean
  removed: Boolean
}

input CAlertCreateManyWithoutTaskInput {
  create: [CAlertCreateWithoutTaskInput!]
  connect: [CAlertWhereUniqueInput!]
}

input CAlertCreateWithoutTaskInput {
  coreId: String!
  type: String
  status: String
  newValue: String
  oldValue: String
  createdBy: CPersonCreateOneInput
  _createdAt: DateTime
  modifiedBy: CPersonCreateOneInput
  modifiedAt: DateTime
  hidden: Boolean
  removed: Boolean
}

type CAlertEdge {
  node: CAlert!
  cursor: String!
}

enum CAlertOrderByInput {
  id_ASC
  id_DESC
  coreId_ASC
  coreId_DESC
  type_ASC
  type_DESC
  status_ASC
  status_DESC
  newValue_ASC
  newValue_DESC
  oldValue_ASC
  oldValue_DESC
  _createdAt_ASC
  _createdAt_DESC
  modifiedAt_ASC
  modifiedAt_DESC
  hidden_ASC
  hidden_DESC
  removed_ASC
  removed_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type CAlertPreviousValues {
  id: ID!
  coreId: String!
  type: String
  status: String
  newValue: String
  oldValue: String
  _createdAt: DateTime
  modifiedAt: DateTime
  hidden: Boolean
  removed: Boolean
}

input CAlertScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  coreId: String
  coreId_not: String
  coreId_in: [String!]
  coreId_not_in: [String!]
  coreId_lt: String
  coreId_lte: String
  coreId_gt: String
  coreId_gte: String
  coreId_contains: String
  coreId_not_contains: String
  coreId_starts_with: String
  coreId_not_starts_with: String
  coreId_ends_with: String
  coreId_not_ends_with: String
  type: String
  type_not: String
  type_in: [String!]
  type_not_in: [String!]
  type_lt: String
  type_lte: String
  type_gt: String
  type_gte: String
  type_contains: String
  type_not_contains: String
  type_starts_with: String
  type_not_starts_with: String
  type_ends_with: String
  type_not_ends_with: String
  status: String
  status_not: String
  status_in: [String!]
  status_not_in: [String!]
  status_lt: String
  status_lte: String
  status_gt: String
  status_gte: String
  status_contains: String
  status_not_contains: String
  status_starts_with: String
  status_not_starts_with: String
  status_ends_with: String
  status_not_ends_with: String
  newValue: String
  newValue_not: String
  newValue_in: [String!]
  newValue_not_in: [String!]
  newValue_lt: String
  newValue_lte: String
  newValue_gt: String
  newValue_gte: String
  newValue_contains: String
  newValue_not_contains: String
  newValue_starts_with: String
  newValue_not_starts_with: String
  newValue_ends_with: String
  newValue_not_ends_with: String
  oldValue: String
  oldValue_not: String
  oldValue_in: [String!]
  oldValue_not_in: [String!]
  oldValue_lt: String
  oldValue_lte: String
  oldValue_gt: String
  oldValue_gte: String
  oldValue_contains: String
  oldValue_not_contains: String
  oldValue_starts_with: String
  oldValue_not_starts_with: String
  oldValue_ends_with: String
  oldValue_not_ends_with: String
  _createdAt: DateTime
  _createdAt_not: DateTime
  _createdAt_in: [DateTime!]
  _createdAt_not_in: [DateTime!]
  _createdAt_lt: DateTime
  _createdAt_lte: DateTime
  _createdAt_gt: DateTime
  _createdAt_gte: DateTime
  modifiedAt: DateTime
  modifiedAt_not: DateTime
  modifiedAt_in: [DateTime!]
  modifiedAt_not_in: [DateTime!]
  modifiedAt_lt: DateTime
  modifiedAt_lte: DateTime
  modifiedAt_gt: DateTime
  modifiedAt_gte: DateTime
  hidden: Boolean
  hidden_not: Boolean
  removed: Boolean
  removed_not: Boolean
  AND: [CAlertScalarWhereInput!]
  OR: [CAlertScalarWhereInput!]
  NOT: [CAlertScalarWhereInput!]
}

type CAlertSubscriptionPayload {
  mutation: MutationType!
  node: CAlert
  updatedFields: [String!]
  previousValues: CAlertPreviousValues
}

input CAlertSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CAlertWhereInput
  AND: [CAlertSubscriptionWhereInput!]
  OR: [CAlertSubscriptionWhereInput!]
  NOT: [CAlertSubscriptionWhereInput!]
}

input CAlertUpdateInput {
  coreId: String
  task: CateringTaskUpdateOneWithoutAlertsInput
  type: String
  status: String
  newValue: String
  oldValue: String
  createdBy: CPersonUpdateOneInput
  _createdAt: DateTime
  modifiedBy: CPersonUpdateOneInput
  modifiedAt: DateTime
  hidden: Boolean
  removed: Boolean
}

input CAlertUpdateManyDataInput {
  coreId: String
  type: String
  status: String
  newValue: String
  oldValue: String
  _createdAt: DateTime
  modifiedAt: DateTime
  hidden: Boolean
  removed: Boolean
}

input CAlertUpdateManyMutationInput {
  coreId: String
  type: String
  status: String
  newValue: String
  oldValue: String
  _createdAt: DateTime
  modifiedAt: DateTime
  hidden: Boolean
  removed: Boolean
}

input CAlertUpdateManyWithoutTaskInput {
  create: [CAlertCreateWithoutTaskInput!]
  delete: [CAlertWhereUniqueInput!]
  connect: [CAlertWhereUniqueInput!]
  set: [CAlertWhereUniqueInput!]
  disconnect: [CAlertWhereUniqueInput!]
  update: [CAlertUpdateWithWhereUniqueWithoutTaskInput!]
  upsert: [CAlertUpsertWithWhereUniqueWithoutTaskInput!]
  deleteMany: [CAlertScalarWhereInput!]
  updateMany: [CAlertUpdateManyWithWhereNestedInput!]
}

input CAlertUpdateManyWithWhereNestedInput {
  where: CAlertScalarWhereInput!
  data: CAlertUpdateManyDataInput!
}

input CAlertUpdateWithoutTaskDataInput {
  coreId: String
  type: String
  status: String
  newValue: String
  oldValue: String
  createdBy: CPersonUpdateOneInput
  _createdAt: DateTime
  modifiedBy: CPersonUpdateOneInput
  modifiedAt: DateTime
  hidden: Boolean
  removed: Boolean
}

input CAlertUpdateWithWhereUniqueWithoutTaskInput {
  where: CAlertWhereUniqueInput!
  data: CAlertUpdateWithoutTaskDataInput!
}

input CAlertUpsertWithWhereUniqueWithoutTaskInput {
  where: CAlertWhereUniqueInput!
  update: CAlertUpdateWithoutTaskDataInput!
  create: CAlertCreateWithoutTaskInput!
}

input CAlertWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  coreId: String
  coreId_not: String
  coreId_in: [String!]
  coreId_not_in: [String!]
  coreId_lt: String
  coreId_lte: String
  coreId_gt: String
  coreId_gte: String
  coreId_contains: String
  coreId_not_contains: String
  coreId_starts_with: String
  coreId_not_starts_with: String
  coreId_ends_with: String
  coreId_not_ends_with: String
  task: CateringTaskWhereInput
  type: String
  type_not: String
  type_in: [String!]
  type_not_in: [String!]
  type_lt: String
  type_lte: String
  type_gt: String
  type_gte: String
  type_contains: String
  type_not_contains: String
  type_starts_with: String
  type_not_starts_with: String
  type_ends_with: String
  type_not_ends_with: String
  status: String
  status_not: String
  status_in: [String!]
  status_not_in: [String!]
  status_lt: String
  status_lte: String
  status_gt: String
  status_gte: String
  status_contains: String
  status_not_contains: String
  status_starts_with: String
  status_not_starts_with: String
  status_ends_with: String
  status_not_ends_with: String
  newValue: String
  newValue_not: String
  newValue_in: [String!]
  newValue_not_in: [String!]
  newValue_lt: String
  newValue_lte: String
  newValue_gt: String
  newValue_gte: String
  newValue_contains: String
  newValue_not_contains: String
  newValue_starts_with: String
  newValue_not_starts_with: String
  newValue_ends_with: String
  newValue_not_ends_with: String
  oldValue: String
  oldValue_not: String
  oldValue_in: [String!]
  oldValue_not_in: [String!]
  oldValue_lt: String
  oldValue_lte: String
  oldValue_gt: String
  oldValue_gte: String
  oldValue_contains: String
  oldValue_not_contains: String
  oldValue_starts_with: String
  oldValue_not_starts_with: String
  oldValue_ends_with: String
  oldValue_not_ends_with: String
  createdBy: CPersonWhereInput
  _createdAt: DateTime
  _createdAt_not: DateTime
  _createdAt_in: [DateTime!]
  _createdAt_not_in: [DateTime!]
  _createdAt_lt: DateTime
  _createdAt_lte: DateTime
  _createdAt_gt: DateTime
  _createdAt_gte: DateTime
  modifiedBy: CPersonWhereInput
  modifiedAt: DateTime
  modifiedAt_not: DateTime
  modifiedAt_in: [DateTime!]
  modifiedAt_not_in: [DateTime!]
  modifiedAt_lt: DateTime
  modifiedAt_lte: DateTime
  modifiedAt_gt: DateTime
  modifiedAt_gte: DateTime
  hidden: Boolean
  hidden_not: Boolean
  removed: Boolean
  removed_not: Boolean
  AND: [CAlertWhereInput!]
  OR: [CAlertWhereInput!]
  NOT: [CAlertWhereInput!]
}

input CAlertWhereUniqueInput {
  id: ID
  coreId: String
}

type CateringCategory {
  id: ID!
  coreId: String!
  visibleName: String
  name: String
  description: String
  rank: Int
}

type CateringCategoryConnection {
  pageInfo: PageInfo!
  edges: [CateringCategoryEdge]!
  aggregate: AggregateCateringCategory!
}

input CateringCategoryCreateInput {
  coreId: String!
  visibleName: String
  name: String
  description: String
  rank: Int
}

input CateringCategoryCreateOneInput {
  create: CateringCategoryCreateInput
  connect: CateringCategoryWhereUniqueInput
}

type CateringCategoryEdge {
  node: CateringCategory!
  cursor: String!
}

enum CateringCategoryOrderByInput {
  id_ASC
  id_DESC
  coreId_ASC
  coreId_DESC
  visibleName_ASC
  visibleName_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  rank_ASC
  rank_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type CateringCategoryPreviousValues {
  id: ID!
  coreId: String!
  visibleName: String
  name: String
  description: String
  rank: Int
}

type CateringCategorySubscriptionPayload {
  mutation: MutationType!
  node: CateringCategory
  updatedFields: [String!]
  previousValues: CateringCategoryPreviousValues
}

input CateringCategorySubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CateringCategoryWhereInput
  AND: [CateringCategorySubscriptionWhereInput!]
  OR: [CateringCategorySubscriptionWhereInput!]
  NOT: [CateringCategorySubscriptionWhereInput!]
}

input CateringCategoryUpdateDataInput {
  coreId: String
  visibleName: String
  name: String
  description: String
  rank: Int
}

input CateringCategoryUpdateInput {
  coreId: String
  visibleName: String
  name: String
  description: String
  rank: Int
}

input CateringCategoryUpdateManyMutationInput {
  coreId: String
  visibleName: String
  name: String
  description: String
  rank: Int
}

input CateringCategoryUpdateOneInput {
  create: CateringCategoryCreateInput
  update: CateringCategoryUpdateDataInput
  upsert: CateringCategoryUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: CateringCategoryWhereUniqueInput
}

input CateringCategoryUpsertNestedInput {
  update: CateringCategoryUpdateDataInput!
  create: CateringCategoryCreateInput!
}

input CateringCategoryWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  coreId: String
  coreId_not: String
  coreId_in: [String!]
  coreId_not_in: [String!]
  coreId_lt: String
  coreId_lte: String
  coreId_gt: String
  coreId_gte: String
  coreId_contains: String
  coreId_not_contains: String
  coreId_starts_with: String
  coreId_not_starts_with: String
  coreId_ends_with: String
  coreId_not_ends_with: String
  visibleName: String
  visibleName_not: String
  visibleName_in: [String!]
  visibleName_not_in: [String!]
  visibleName_lt: String
  visibleName_lte: String
  visibleName_gt: String
  visibleName_gte: String
  visibleName_contains: String
  visibleName_not_contains: String
  visibleName_starts_with: String
  visibleName_not_starts_with: String
  visibleName_ends_with: String
  visibleName_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  rank: Int
  rank_not: Int
  rank_in: [Int!]
  rank_not_in: [Int!]
  rank_lt: Int
  rank_lte: Int
  rank_gt: Int
  rank_gte: Int
  AND: [CateringCategoryWhereInput!]
  OR: [CateringCategoryWhereInput!]
  NOT: [CateringCategoryWhereInput!]
}

input CateringCategoryWhereUniqueInput {
  id: ID
  coreId: String
}

type CateringCompanyEmail {
  id: ID!
  coreId: String!
  companyEmailType: CateringCompanyEmailType
  value: String
  isActive: Boolean
}

type CateringCompanyEmailConnection {
  pageInfo: PageInfo!
  edges: [CateringCompanyEmailEdge]!
  aggregate: AggregateCateringCompanyEmail!
}

input CateringCompanyEmailCreateInput {
  coreId: String!
  companyEmailType: CateringCompanyEmailTypeCreateOneInput
  value: String
  isActive: Boolean
}

input CateringCompanyEmailCreateManyInput {
  create: [CateringCompanyEmailCreateInput!]
  connect: [CateringCompanyEmailWhereUniqueInput!]
}

type CateringCompanyEmailEdge {
  node: CateringCompanyEmail!
  cursor: String!
}

enum CateringCompanyEmailOrderByInput {
  id_ASC
  id_DESC
  coreId_ASC
  coreId_DESC
  value_ASC
  value_DESC
  isActive_ASC
  isActive_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type CateringCompanyEmailPreviousValues {
  id: ID!
  coreId: String!
  value: String
  isActive: Boolean
}

input CateringCompanyEmailScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  coreId: String
  coreId_not: String
  coreId_in: [String!]
  coreId_not_in: [String!]
  coreId_lt: String
  coreId_lte: String
  coreId_gt: String
  coreId_gte: String
  coreId_contains: String
  coreId_not_contains: String
  coreId_starts_with: String
  coreId_not_starts_with: String
  coreId_ends_with: String
  coreId_not_ends_with: String
  value: String
  value_not: String
  value_in: [String!]
  value_not_in: [String!]
  value_lt: String
  value_lte: String
  value_gt: String
  value_gte: String
  value_contains: String
  value_not_contains: String
  value_starts_with: String
  value_not_starts_with: String
  value_ends_with: String
  value_not_ends_with: String
  isActive: Boolean
  isActive_not: Boolean
  AND: [CateringCompanyEmailScalarWhereInput!]
  OR: [CateringCompanyEmailScalarWhereInput!]
  NOT: [CateringCompanyEmailScalarWhereInput!]
}

type CateringCompanyEmailSubscriptionPayload {
  mutation: MutationType!
  node: CateringCompanyEmail
  updatedFields: [String!]
  previousValues: CateringCompanyEmailPreviousValues
}

input CateringCompanyEmailSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CateringCompanyEmailWhereInput
  AND: [CateringCompanyEmailSubscriptionWhereInput!]
  OR: [CateringCompanyEmailSubscriptionWhereInput!]
  NOT: [CateringCompanyEmailSubscriptionWhereInput!]
}

type CateringCompanyEmailType {
  id: ID!
  coreId: String!
}

type CateringCompanyEmailTypeConnection {
  pageInfo: PageInfo!
  edges: [CateringCompanyEmailTypeEdge]!
  aggregate: AggregateCateringCompanyEmailType!
}

input CateringCompanyEmailTypeCreateInput {
  coreId: String!
}

input CateringCompanyEmailTypeCreateOneInput {
  create: CateringCompanyEmailTypeCreateInput
  connect: CateringCompanyEmailTypeWhereUniqueInput
}

type CateringCompanyEmailTypeEdge {
  node: CateringCompanyEmailType!
  cursor: String!
}

enum CateringCompanyEmailTypeOrderByInput {
  id_ASC
  id_DESC
  coreId_ASC
  coreId_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type CateringCompanyEmailTypePreviousValues {
  id: ID!
  coreId: String!
}

type CateringCompanyEmailTypeSubscriptionPayload {
  mutation: MutationType!
  node: CateringCompanyEmailType
  updatedFields: [String!]
  previousValues: CateringCompanyEmailTypePreviousValues
}

input CateringCompanyEmailTypeSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CateringCompanyEmailTypeWhereInput
  AND: [CateringCompanyEmailTypeSubscriptionWhereInput!]
  OR: [CateringCompanyEmailTypeSubscriptionWhereInput!]
  NOT: [CateringCompanyEmailTypeSubscriptionWhereInput!]
}

input CateringCompanyEmailTypeUpdateDataInput {
  coreId: String
}

input CateringCompanyEmailTypeUpdateInput {
  coreId: String
}

input CateringCompanyEmailTypeUpdateManyMutationInput {
  coreId: String
}

input CateringCompanyEmailTypeUpdateOneInput {
  create: CateringCompanyEmailTypeCreateInput
  update: CateringCompanyEmailTypeUpdateDataInput
  upsert: CateringCompanyEmailTypeUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: CateringCompanyEmailTypeWhereUniqueInput
}

input CateringCompanyEmailTypeUpsertNestedInput {
  update: CateringCompanyEmailTypeUpdateDataInput!
  create: CateringCompanyEmailTypeCreateInput!
}

input CateringCompanyEmailTypeWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  coreId: String
  coreId_not: String
  coreId_in: [String!]
  coreId_not_in: [String!]
  coreId_lt: String
  coreId_lte: String
  coreId_gt: String
  coreId_gte: String
  coreId_contains: String
  coreId_not_contains: String
  coreId_starts_with: String
  coreId_not_starts_with: String
  coreId_ends_with: String
  coreId_not_ends_with: String
  AND: [CateringCompanyEmailTypeWhereInput!]
  OR: [CateringCompanyEmailTypeWhereInput!]
  NOT: [CateringCompanyEmailTypeWhereInput!]
}

input CateringCompanyEmailTypeWhereUniqueInput {
  id: ID
  coreId: String
}

input CateringCompanyEmailUpdateDataInput {
  coreId: String
  companyEmailType: CateringCompanyEmailTypeUpdateOneInput
  value: String
  isActive: Boolean
}

input CateringCompanyEmailUpdateInput {
  coreId: String
  companyEmailType: CateringCompanyEmailTypeUpdateOneInput
  value: String
  isActive: Boolean
}

input CateringCompanyEmailUpdateManyDataInput {
  coreId: String
  value: String
  isActive: Boolean
}

input CateringCompanyEmailUpdateManyInput {
  create: [CateringCompanyEmailCreateInput!]
  update: [CateringCompanyEmailUpdateWithWhereUniqueNestedInput!]
  upsert: [CateringCompanyEmailUpsertWithWhereUniqueNestedInput!]
  delete: [CateringCompanyEmailWhereUniqueInput!]
  connect: [CateringCompanyEmailWhereUniqueInput!]
  set: [CateringCompanyEmailWhereUniqueInput!]
  disconnect: [CateringCompanyEmailWhereUniqueInput!]
  deleteMany: [CateringCompanyEmailScalarWhereInput!]
  updateMany: [CateringCompanyEmailUpdateManyWithWhereNestedInput!]
}

input CateringCompanyEmailUpdateManyMutationInput {
  coreId: String
  value: String
  isActive: Boolean
}

input CateringCompanyEmailUpdateManyWithWhereNestedInput {
  where: CateringCompanyEmailScalarWhereInput!
  data: CateringCompanyEmailUpdateManyDataInput!
}

input CateringCompanyEmailUpdateWithWhereUniqueNestedInput {
  where: CateringCompanyEmailWhereUniqueInput!
  data: CateringCompanyEmailUpdateDataInput!
}

input CateringCompanyEmailUpsertWithWhereUniqueNestedInput {
  where: CateringCompanyEmailWhereUniqueInput!
  update: CateringCompanyEmailUpdateDataInput!
  create: CateringCompanyEmailCreateInput!
}

input CateringCompanyEmailWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  coreId: String
  coreId_not: String
  coreId_in: [String!]
  coreId_not_in: [String!]
  coreId_lt: String
  coreId_lte: String
  coreId_gt: String
  coreId_gte: String
  coreId_contains: String
  coreId_not_contains: String
  coreId_starts_with: String
  coreId_not_starts_with: String
  coreId_ends_with: String
  coreId_not_ends_with: String
  companyEmailType: CateringCompanyEmailTypeWhereInput
  value: String
  value_not: String
  value_in: [String!]
  value_not_in: [String!]
  value_lt: String
  value_lte: String
  value_gt: String
  value_gte: String
  value_contains: String
  value_not_contains: String
  value_starts_with: String
  value_not_starts_with: String
  value_ends_with: String
  value_not_ends_with: String
  isActive: Boolean
  isActive_not: Boolean
  AND: [CateringCompanyEmailWhereInput!]
  OR: [CateringCompanyEmailWhereInput!]
  NOT: [CateringCompanyEmailWhereInput!]
}

input CateringCompanyEmailWhereUniqueInput {
  id: ID
  coreId: String
}

type CateringCompanyPhoneNumber {
  id: ID!
  coreId: String!
  companyPhoneNumberType: CateringCompanyPhoneNumberType
  value: String
  isActive: Boolean
}

type CateringCompanyPhoneNumberConnection {
  pageInfo: PageInfo!
  edges: [CateringCompanyPhoneNumberEdge]!
  aggregate: AggregateCateringCompanyPhoneNumber!
}

input CateringCompanyPhoneNumberCreateInput {
  coreId: String!
  companyPhoneNumberType: CateringCompanyPhoneNumberTypeCreateOneInput
  value: String
  isActive: Boolean
}

input CateringCompanyPhoneNumberCreateManyInput {
  create: [CateringCompanyPhoneNumberCreateInput!]
  connect: [CateringCompanyPhoneNumberWhereUniqueInput!]
}

type CateringCompanyPhoneNumberEdge {
  node: CateringCompanyPhoneNumber!
  cursor: String!
}

enum CateringCompanyPhoneNumberOrderByInput {
  id_ASC
  id_DESC
  coreId_ASC
  coreId_DESC
  value_ASC
  value_DESC
  isActive_ASC
  isActive_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type CateringCompanyPhoneNumberPreviousValues {
  id: ID!
  coreId: String!
  value: String
  isActive: Boolean
}

input CateringCompanyPhoneNumberScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  coreId: String
  coreId_not: String
  coreId_in: [String!]
  coreId_not_in: [String!]
  coreId_lt: String
  coreId_lte: String
  coreId_gt: String
  coreId_gte: String
  coreId_contains: String
  coreId_not_contains: String
  coreId_starts_with: String
  coreId_not_starts_with: String
  coreId_ends_with: String
  coreId_not_ends_with: String
  value: String
  value_not: String
  value_in: [String!]
  value_not_in: [String!]
  value_lt: String
  value_lte: String
  value_gt: String
  value_gte: String
  value_contains: String
  value_not_contains: String
  value_starts_with: String
  value_not_starts_with: String
  value_ends_with: String
  value_not_ends_with: String
  isActive: Boolean
  isActive_not: Boolean
  AND: [CateringCompanyPhoneNumberScalarWhereInput!]
  OR: [CateringCompanyPhoneNumberScalarWhereInput!]
  NOT: [CateringCompanyPhoneNumberScalarWhereInput!]
}

type CateringCompanyPhoneNumberSubscriptionPayload {
  mutation: MutationType!
  node: CateringCompanyPhoneNumber
  updatedFields: [String!]
  previousValues: CateringCompanyPhoneNumberPreviousValues
}

input CateringCompanyPhoneNumberSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CateringCompanyPhoneNumberWhereInput
  AND: [CateringCompanyPhoneNumberSubscriptionWhereInput!]
  OR: [CateringCompanyPhoneNumberSubscriptionWhereInput!]
  NOT: [CateringCompanyPhoneNumberSubscriptionWhereInput!]
}

type CateringCompanyPhoneNumberType {
  id: ID!
  coreId: String!
}

type CateringCompanyPhoneNumberTypeConnection {
  pageInfo: PageInfo!
  edges: [CateringCompanyPhoneNumberTypeEdge]!
  aggregate: AggregateCateringCompanyPhoneNumberType!
}

input CateringCompanyPhoneNumberTypeCreateInput {
  coreId: String!
}

input CateringCompanyPhoneNumberTypeCreateOneInput {
  create: CateringCompanyPhoneNumberTypeCreateInput
  connect: CateringCompanyPhoneNumberTypeWhereUniqueInput
}

type CateringCompanyPhoneNumberTypeEdge {
  node: CateringCompanyPhoneNumberType!
  cursor: String!
}

enum CateringCompanyPhoneNumberTypeOrderByInput {
  id_ASC
  id_DESC
  coreId_ASC
  coreId_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type CateringCompanyPhoneNumberTypePreviousValues {
  id: ID!
  coreId: String!
}

type CateringCompanyPhoneNumberTypeSubscriptionPayload {
  mutation: MutationType!
  node: CateringCompanyPhoneNumberType
  updatedFields: [String!]
  previousValues: CateringCompanyPhoneNumberTypePreviousValues
}

input CateringCompanyPhoneNumberTypeSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CateringCompanyPhoneNumberTypeWhereInput
  AND: [CateringCompanyPhoneNumberTypeSubscriptionWhereInput!]
  OR: [CateringCompanyPhoneNumberTypeSubscriptionWhereInput!]
  NOT: [CateringCompanyPhoneNumberTypeSubscriptionWhereInput!]
}

input CateringCompanyPhoneNumberTypeUpdateDataInput {
  coreId: String
}

input CateringCompanyPhoneNumberTypeUpdateInput {
  coreId: String
}

input CateringCompanyPhoneNumberTypeUpdateManyMutationInput {
  coreId: String
}

input CateringCompanyPhoneNumberTypeUpdateOneInput {
  create: CateringCompanyPhoneNumberTypeCreateInput
  update: CateringCompanyPhoneNumberTypeUpdateDataInput
  upsert: CateringCompanyPhoneNumberTypeUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: CateringCompanyPhoneNumberTypeWhereUniqueInput
}

input CateringCompanyPhoneNumberTypeUpsertNestedInput {
  update: CateringCompanyPhoneNumberTypeUpdateDataInput!
  create: CateringCompanyPhoneNumberTypeCreateInput!
}

input CateringCompanyPhoneNumberTypeWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  coreId: String
  coreId_not: String
  coreId_in: [String!]
  coreId_not_in: [String!]
  coreId_lt: String
  coreId_lte: String
  coreId_gt: String
  coreId_gte: String
  coreId_contains: String
  coreId_not_contains: String
  coreId_starts_with: String
  coreId_not_starts_with: String
  coreId_ends_with: String
  coreId_not_ends_with: String
  AND: [CateringCompanyPhoneNumberTypeWhereInput!]
  OR: [CateringCompanyPhoneNumberTypeWhereInput!]
  NOT: [CateringCompanyPhoneNumberTypeWhereInput!]
}

input CateringCompanyPhoneNumberTypeWhereUniqueInput {
  id: ID
  coreId: String
}

input CateringCompanyPhoneNumberUpdateDataInput {
  coreId: String
  companyPhoneNumberType: CateringCompanyPhoneNumberTypeUpdateOneInput
  value: String
  isActive: Boolean
}

input CateringCompanyPhoneNumberUpdateInput {
  coreId: String
  companyPhoneNumberType: CateringCompanyPhoneNumberTypeUpdateOneInput
  value: String
  isActive: Boolean
}

input CateringCompanyPhoneNumberUpdateManyDataInput {
  coreId: String
  value: String
  isActive: Boolean
}

input CateringCompanyPhoneNumberUpdateManyInput {
  create: [CateringCompanyPhoneNumberCreateInput!]
  update: [CateringCompanyPhoneNumberUpdateWithWhereUniqueNestedInput!]
  upsert: [CateringCompanyPhoneNumberUpsertWithWhereUniqueNestedInput!]
  delete: [CateringCompanyPhoneNumberWhereUniqueInput!]
  connect: [CateringCompanyPhoneNumberWhereUniqueInput!]
  set: [CateringCompanyPhoneNumberWhereUniqueInput!]
  disconnect: [CateringCompanyPhoneNumberWhereUniqueInput!]
  deleteMany: [CateringCompanyPhoneNumberScalarWhereInput!]
  updateMany: [CateringCompanyPhoneNumberUpdateManyWithWhereNestedInput!]
}

input CateringCompanyPhoneNumberUpdateManyMutationInput {
  coreId: String
  value: String
  isActive: Boolean
}

input CateringCompanyPhoneNumberUpdateManyWithWhereNestedInput {
  where: CateringCompanyPhoneNumberScalarWhereInput!
  data: CateringCompanyPhoneNumberUpdateManyDataInput!
}

input CateringCompanyPhoneNumberUpdateWithWhereUniqueNestedInput {
  where: CateringCompanyPhoneNumberWhereUniqueInput!
  data: CateringCompanyPhoneNumberUpdateDataInput!
}

input CateringCompanyPhoneNumberUpsertWithWhereUniqueNestedInput {
  where: CateringCompanyPhoneNumberWhereUniqueInput!
  update: CateringCompanyPhoneNumberUpdateDataInput!
  create: CateringCompanyPhoneNumberCreateInput!
}

input CateringCompanyPhoneNumberWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  coreId: String
  coreId_not: String
  coreId_in: [String!]
  coreId_not_in: [String!]
  coreId_lt: String
  coreId_lte: String
  coreId_gt: String
  coreId_gte: String
  coreId_contains: String
  coreId_not_contains: String
  coreId_starts_with: String
  coreId_not_starts_with: String
  coreId_ends_with: String
  coreId_not_ends_with: String
  companyPhoneNumberType: CateringCompanyPhoneNumberTypeWhereInput
  value: String
  value_not: String
  value_in: [String!]
  value_not_in: [String!]
  value_lt: String
  value_lte: String
  value_gt: String
  value_gte: String
  value_contains: String
  value_not_contains: String
  value_starts_with: String
  value_not_starts_with: String
  value_ends_with: String
  value_not_ends_with: String
  isActive: Boolean
  isActive_not: Boolean
  AND: [CateringCompanyPhoneNumberWhereInput!]
  OR: [CateringCompanyPhoneNumberWhereInput!]
  NOT: [CateringCompanyPhoneNumberWhereInput!]
}

input CateringCompanyPhoneNumberWhereUniqueInput {
  id: ID
  coreId: String
}

type CateringCosts {
  id: ID!
  coreId: String
  notes: String
  file: String
  type: String
  chargeableCancellation: Boolean
}

type CateringCostsConnection {
  pageInfo: PageInfo!
  edges: [CateringCostsEdge]!
  aggregate: AggregateCateringCosts!
}

input CateringCostsCreateInput {
  coreId: String
  notes: String
  file: String
  type: String
  chargeableCancellation: Boolean
}

input CateringCostsCreateOneInput {
  create: CateringCostsCreateInput
  connect: CateringCostsWhereUniqueInput
}

type CateringCostsEdge {
  node: CateringCosts!
  cursor: String!
}

enum CateringCostsOrderByInput {
  id_ASC
  id_DESC
  coreId_ASC
  coreId_DESC
  notes_ASC
  notes_DESC
  file_ASC
  file_DESC
  type_ASC
  type_DESC
  chargeableCancellation_ASC
  chargeableCancellation_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type CateringCostsPreviousValues {
  id: ID!
  coreId: String
  notes: String
  file: String
  type: String
  chargeableCancellation: Boolean
}

type CateringCostsSubscriptionPayload {
  mutation: MutationType!
  node: CateringCosts
  updatedFields: [String!]
  previousValues: CateringCostsPreviousValues
}

input CateringCostsSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CateringCostsWhereInput
  AND: [CateringCostsSubscriptionWhereInput!]
  OR: [CateringCostsSubscriptionWhereInput!]
  NOT: [CateringCostsSubscriptionWhereInput!]
}

input CateringCostsUpdateDataInput {
  coreId: String
  notes: String
  file: String
  type: String
  chargeableCancellation: Boolean
}

input CateringCostsUpdateInput {
  coreId: String
  notes: String
  file: String
  type: String
  chargeableCancellation: Boolean
}

input CateringCostsUpdateManyMutationInput {
  coreId: String
  notes: String
  file: String
  type: String
  chargeableCancellation: Boolean
}

input CateringCostsUpdateOneInput {
  create: CateringCostsCreateInput
  update: CateringCostsUpdateDataInput
  upsert: CateringCostsUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: CateringCostsWhereUniqueInput
}

input CateringCostsUpsertNestedInput {
  update: CateringCostsUpdateDataInput!
  create: CateringCostsCreateInput!
}

input CateringCostsWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  coreId: String
  coreId_not: String
  coreId_in: [String!]
  coreId_not_in: [String!]
  coreId_lt: String
  coreId_lte: String
  coreId_gt: String
  coreId_gte: String
  coreId_contains: String
  coreId_not_contains: String
  coreId_starts_with: String
  coreId_not_starts_with: String
  coreId_ends_with: String
  coreId_not_ends_with: String
  notes: String
  notes_not: String
  notes_in: [String!]
  notes_not_in: [String!]
  notes_lt: String
  notes_lte: String
  notes_gt: String
  notes_gte: String
  notes_contains: String
  notes_not_contains: String
  notes_starts_with: String
  notes_not_starts_with: String
  notes_ends_with: String
  notes_not_ends_with: String
  file: String
  file_not: String
  file_in: [String!]
  file_not_in: [String!]
  file_lt: String
  file_lte: String
  file_gt: String
  file_gte: String
  file_contains: String
  file_not_contains: String
  file_starts_with: String
  file_not_starts_with: String
  file_ends_with: String
  file_not_ends_with: String
  type: String
  type_not: String
  type_in: [String!]
  type_not_in: [String!]
  type_lt: String
  type_lte: String
  type_gt: String
  type_gte: String
  type_contains: String
  type_not_contains: String
  type_starts_with: String
  type_not_starts_with: String
  type_ends_with: String
  type_not_ends_with: String
  chargeableCancellation: Boolean
  chargeableCancellation_not: Boolean
  AND: [CateringCostsWhereInput!]
  OR: [CateringCostsWhereInput!]
  NOT: [CateringCostsWhereInput!]
}

input CateringCostsWhereUniqueInput {
  id: ID
  coreId: String
}

type CateringCountry {
  id: ID!
  coreId: String!
  name: String
}

type CateringCountryConnection {
  pageInfo: PageInfo!
  edges: [CateringCountryEdge]!
  aggregate: AggregateCateringCountry!
}

input CateringCountryCreateInput {
  coreId: String!
  name: String
}

input CateringCountryCreateOneInput {
  create: CateringCountryCreateInput
  connect: CateringCountryWhereUniqueInput
}

type CateringCountryEdge {
  node: CateringCountry!
  cursor: String!
}

enum CateringCountryOrderByInput {
  id_ASC
  id_DESC
  coreId_ASC
  coreId_DESC
  name_ASC
  name_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type CateringCountryPreviousValues {
  id: ID!
  coreId: String!
  name: String
}

type CateringCountrySubscriptionPayload {
  mutation: MutationType!
  node: CateringCountry
  updatedFields: [String!]
  previousValues: CateringCountryPreviousValues
}

input CateringCountrySubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CateringCountryWhereInput
  AND: [CateringCountrySubscriptionWhereInput!]
  OR: [CateringCountrySubscriptionWhereInput!]
  NOT: [CateringCountrySubscriptionWhereInput!]
}

input CateringCountryUpdateDataInput {
  coreId: String
  name: String
}

input CateringCountryUpdateInput {
  coreId: String
  name: String
}

input CateringCountryUpdateManyMutationInput {
  coreId: String
  name: String
}

input CateringCountryUpdateOneInput {
  create: CateringCountryCreateInput
  update: CateringCountryUpdateDataInput
  upsert: CateringCountryUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: CateringCountryWhereUniqueInput
}

input CateringCountryUpsertNestedInput {
  update: CateringCountryUpdateDataInput!
  create: CateringCountryCreateInput!
}

input CateringCountryWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  coreId: String
  coreId_not: String
  coreId_in: [String!]
  coreId_not_in: [String!]
  coreId_lt: String
  coreId_lte: String
  coreId_gt: String
  coreId_gte: String
  coreId_contains: String
  coreId_not_contains: String
  coreId_starts_with: String
  coreId_not_starts_with: String
  coreId_ends_with: String
  coreId_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  AND: [CateringCountryWhereInput!]
  OR: [CateringCountryWhereInput!]
  NOT: [CateringCountryWhereInput!]
}

input CateringCountryWhereUniqueInput {
  id: ID
  coreId: String
}

type CateringCuisine {
  id: ID!
  coreId: String!
  name: String
}

type CateringCuisineConnection {
  pageInfo: PageInfo!
  edges: [CateringCuisineEdge]!
  aggregate: AggregateCateringCuisine!
}

input CateringCuisineCreateInput {
  coreId: String!
  name: String
}

input CateringCuisineCreateOneInput {
  create: CateringCuisineCreateInput
  connect: CateringCuisineWhereUniqueInput
}

type CateringCuisineEdge {
  node: CateringCuisine!
  cursor: String!
}

enum CateringCuisineOrderByInput {
  id_ASC
  id_DESC
  coreId_ASC
  coreId_DESC
  name_ASC
  name_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type CateringCuisinePreviousValues {
  id: ID!
  coreId: String!
  name: String
}

type CateringCuisineSubscriptionPayload {
  mutation: MutationType!
  node: CateringCuisine
  updatedFields: [String!]
  previousValues: CateringCuisinePreviousValues
}

input CateringCuisineSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CateringCuisineWhereInput
  AND: [CateringCuisineSubscriptionWhereInput!]
  OR: [CateringCuisineSubscriptionWhereInput!]
  NOT: [CateringCuisineSubscriptionWhereInput!]
}

input CateringCuisineUpdateDataInput {
  coreId: String
  name: String
}

input CateringCuisineUpdateInput {
  coreId: String
  name: String
}

input CateringCuisineUpdateManyMutationInput {
  coreId: String
  name: String
}

input CateringCuisineUpdateOneInput {
  create: CateringCuisineCreateInput
  update: CateringCuisineUpdateDataInput
  upsert: CateringCuisineUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: CateringCuisineWhereUniqueInput
}

input CateringCuisineUpsertNestedInput {
  update: CateringCuisineUpdateDataInput!
  create: CateringCuisineCreateInput!
}

input CateringCuisineWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  coreId: String
  coreId_not: String
  coreId_in: [String!]
  coreId_not_in: [String!]
  coreId_lt: String
  coreId_lte: String
  coreId_gt: String
  coreId_gte: String
  coreId_contains: String
  coreId_not_contains: String
  coreId_starts_with: String
  coreId_not_starts_with: String
  coreId_ends_with: String
  coreId_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  AND: [CateringCuisineWhereInput!]
  OR: [CateringCuisineWhereInput!]
  NOT: [CateringCuisineWhereInput!]
}

input CateringCuisineWhereUniqueInput {
  id: ID
  coreId: String
}

type CateringDietaryPreference {
  id: ID!
  coreId: String!
  name: String
}

type CateringDietaryPreferenceConnection {
  pageInfo: PageInfo!
  edges: [CateringDietaryPreferenceEdge]!
  aggregate: AggregateCateringDietaryPreference!
}

input CateringDietaryPreferenceCreateInput {
  coreId: String!
  name: String
}

input CateringDietaryPreferenceCreateManyInput {
  create: [CateringDietaryPreferenceCreateInput!]
  connect: [CateringDietaryPreferenceWhereUniqueInput!]
}

type CateringDietaryPreferenceEdge {
  node: CateringDietaryPreference!
  cursor: String!
}

enum CateringDietaryPreferenceOrderByInput {
  id_ASC
  id_DESC
  coreId_ASC
  coreId_DESC
  name_ASC
  name_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type CateringDietaryPreferencePreviousValues {
  id: ID!
  coreId: String!
  name: String
}

input CateringDietaryPreferenceScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  coreId: String
  coreId_not: String
  coreId_in: [String!]
  coreId_not_in: [String!]
  coreId_lt: String
  coreId_lte: String
  coreId_gt: String
  coreId_gte: String
  coreId_contains: String
  coreId_not_contains: String
  coreId_starts_with: String
  coreId_not_starts_with: String
  coreId_ends_with: String
  coreId_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  AND: [CateringDietaryPreferenceScalarWhereInput!]
  OR: [CateringDietaryPreferenceScalarWhereInput!]
  NOT: [CateringDietaryPreferenceScalarWhereInput!]
}

type CateringDietaryPreferenceSubscriptionPayload {
  mutation: MutationType!
  node: CateringDietaryPreference
  updatedFields: [String!]
  previousValues: CateringDietaryPreferencePreviousValues
}

input CateringDietaryPreferenceSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CateringDietaryPreferenceWhereInput
  AND: [CateringDietaryPreferenceSubscriptionWhereInput!]
  OR: [CateringDietaryPreferenceSubscriptionWhereInput!]
  NOT: [CateringDietaryPreferenceSubscriptionWhereInput!]
}

input CateringDietaryPreferenceUpdateDataInput {
  coreId: String
  name: String
}

input CateringDietaryPreferenceUpdateInput {
  coreId: String
  name: String
}

input CateringDietaryPreferenceUpdateManyDataInput {
  coreId: String
  name: String
}

input CateringDietaryPreferenceUpdateManyInput {
  create: [CateringDietaryPreferenceCreateInput!]
  update: [CateringDietaryPreferenceUpdateWithWhereUniqueNestedInput!]
  upsert: [CateringDietaryPreferenceUpsertWithWhereUniqueNestedInput!]
  delete: [CateringDietaryPreferenceWhereUniqueInput!]
  connect: [CateringDietaryPreferenceWhereUniqueInput!]
  set: [CateringDietaryPreferenceWhereUniqueInput!]
  disconnect: [CateringDietaryPreferenceWhereUniqueInput!]
  deleteMany: [CateringDietaryPreferenceScalarWhereInput!]
  updateMany: [CateringDietaryPreferenceUpdateManyWithWhereNestedInput!]
}

input CateringDietaryPreferenceUpdateManyMutationInput {
  coreId: String
  name: String
}

input CateringDietaryPreferenceUpdateManyWithWhereNestedInput {
  where: CateringDietaryPreferenceScalarWhereInput!
  data: CateringDietaryPreferenceUpdateManyDataInput!
}

input CateringDietaryPreferenceUpdateWithWhereUniqueNestedInput {
  where: CateringDietaryPreferenceWhereUniqueInput!
  data: CateringDietaryPreferenceUpdateDataInput!
}

input CateringDietaryPreferenceUpsertWithWhereUniqueNestedInput {
  where: CateringDietaryPreferenceWhereUniqueInput!
  update: CateringDietaryPreferenceUpdateDataInput!
  create: CateringDietaryPreferenceCreateInput!
}

input CateringDietaryPreferenceWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  coreId: String
  coreId_not: String
  coreId_in: [String!]
  coreId_not_in: [String!]
  coreId_lt: String
  coreId_lte: String
  coreId_gt: String
  coreId_gte: String
  coreId_contains: String
  coreId_not_contains: String
  coreId_starts_with: String
  coreId_not_starts_with: String
  coreId_ends_with: String
  coreId_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  AND: [CateringDietaryPreferenceWhereInput!]
  OR: [CateringDietaryPreferenceWhereInput!]
  NOT: [CateringDietaryPreferenceWhereInput!]
}

input CateringDietaryPreferenceWhereUniqueInput {
  id: ID
  coreId: String
}

type CateringIngredient {
  id: ID!
  coreId: String!
  name: String
  isAllergen: Boolean
}

type CateringIngredientConnection {
  pageInfo: PageInfo!
  edges: [CateringIngredientEdge]!
  aggregate: AggregateCateringIngredient!
}

input CateringIngredientCreateInput {
  coreId: String!
  name: String
  isAllergen: Boolean
}

input CateringIngredientCreateManyInput {
  create: [CateringIngredientCreateInput!]
  connect: [CateringIngredientWhereUniqueInput!]
}

type CateringIngredientEdge {
  node: CateringIngredient!
  cursor: String!
}

enum CateringIngredientOrderByInput {
  id_ASC
  id_DESC
  coreId_ASC
  coreId_DESC
  name_ASC
  name_DESC
  isAllergen_ASC
  isAllergen_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type CateringIngredientPreviousValues {
  id: ID!
  coreId: String!
  name: String
  isAllergen: Boolean
}

input CateringIngredientScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  coreId: String
  coreId_not: String
  coreId_in: [String!]
  coreId_not_in: [String!]
  coreId_lt: String
  coreId_lte: String
  coreId_gt: String
  coreId_gte: String
  coreId_contains: String
  coreId_not_contains: String
  coreId_starts_with: String
  coreId_not_starts_with: String
  coreId_ends_with: String
  coreId_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  isAllergen: Boolean
  isAllergen_not: Boolean
  AND: [CateringIngredientScalarWhereInput!]
  OR: [CateringIngredientScalarWhereInput!]
  NOT: [CateringIngredientScalarWhereInput!]
}

type CateringIngredientSubscriptionPayload {
  mutation: MutationType!
  node: CateringIngredient
  updatedFields: [String!]
  previousValues: CateringIngredientPreviousValues
}

input CateringIngredientSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CateringIngredientWhereInput
  AND: [CateringIngredientSubscriptionWhereInput!]
  OR: [CateringIngredientSubscriptionWhereInput!]
  NOT: [CateringIngredientSubscriptionWhereInput!]
}

input CateringIngredientUpdateDataInput {
  coreId: String
  name: String
  isAllergen: Boolean
}

input CateringIngredientUpdateInput {
  coreId: String
  name: String
  isAllergen: Boolean
}

input CateringIngredientUpdateManyDataInput {
  coreId: String
  name: String
  isAllergen: Boolean
}

input CateringIngredientUpdateManyInput {
  create: [CateringIngredientCreateInput!]
  update: [CateringIngredientUpdateWithWhereUniqueNestedInput!]
  upsert: [CateringIngredientUpsertWithWhereUniqueNestedInput!]
  delete: [CateringIngredientWhereUniqueInput!]
  connect: [CateringIngredientWhereUniqueInput!]
  set: [CateringIngredientWhereUniqueInput!]
  disconnect: [CateringIngredientWhereUniqueInput!]
  deleteMany: [CateringIngredientScalarWhereInput!]
  updateMany: [CateringIngredientUpdateManyWithWhereNestedInput!]
}

input CateringIngredientUpdateManyMutationInput {
  coreId: String
  name: String
  isAllergen: Boolean
}

input CateringIngredientUpdateManyWithWhereNestedInput {
  where: CateringIngredientScalarWhereInput!
  data: CateringIngredientUpdateManyDataInput!
}

input CateringIngredientUpdateWithWhereUniqueNestedInput {
  where: CateringIngredientWhereUniqueInput!
  data: CateringIngredientUpdateDataInput!
}

input CateringIngredientUpsertWithWhereUniqueNestedInput {
  where: CateringIngredientWhereUniqueInput!
  update: CateringIngredientUpdateDataInput!
  create: CateringIngredientCreateInput!
}

input CateringIngredientWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  coreId: String
  coreId_not: String
  coreId_in: [String!]
  coreId_not_in: [String!]
  coreId_lt: String
  coreId_lte: String
  coreId_gt: String
  coreId_gte: String
  coreId_contains: String
  coreId_not_contains: String
  coreId_starts_with: String
  coreId_not_starts_with: String
  coreId_ends_with: String
  coreId_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  isAllergen: Boolean
  isAllergen_not: Boolean
  AND: [CateringIngredientWhereInput!]
  OR: [CateringIngredientWhereInput!]
  NOT: [CateringIngredientWhereInput!]
}

input CateringIngredientWhereUniqueInput {
  id: ID
  coreId: String
}

type CateringNotification {
  id: ID!
  coreId: String!
  eventType: String
  message: String
  modifiedBy: CPerson
  modifiedAt: DateTime
  correlationId: String
}

type CateringNotificationConnection {
  pageInfo: PageInfo!
  edges: [CateringNotificationEdge]!
  aggregate: AggregateCateringNotification!
}

input CateringNotificationCreateInput {
  coreId: String!
  eventType: String
  message: String
  modifiedBy: CPersonCreateOneInput
  modifiedAt: DateTime
  correlationId: String
}

type CateringNotificationEdge {
  node: CateringNotification!
  cursor: String!
}

enum CateringNotificationOrderByInput {
  id_ASC
  id_DESC
  coreId_ASC
  coreId_DESC
  eventType_ASC
  eventType_DESC
  message_ASC
  message_DESC
  modifiedAt_ASC
  modifiedAt_DESC
  correlationId_ASC
  correlationId_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type CateringNotificationPreviousValues {
  id: ID!
  coreId: String!
  eventType: String
  message: String
  modifiedAt: DateTime
  correlationId: String
}

type CateringNotificationSubscriptionPayload {
  mutation: MutationType!
  node: CateringNotification
  updatedFields: [String!]
  previousValues: CateringNotificationPreviousValues
}

input CateringNotificationSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CateringNotificationWhereInput
  AND: [CateringNotificationSubscriptionWhereInput!]
  OR: [CateringNotificationSubscriptionWhereInput!]
  NOT: [CateringNotificationSubscriptionWhereInput!]
}

input CateringNotificationUpdateInput {
  coreId: String
  eventType: String
  message: String
  modifiedBy: CPersonUpdateOneInput
  modifiedAt: DateTime
  correlationId: String
}

input CateringNotificationUpdateManyMutationInput {
  coreId: String
  eventType: String
  message: String
  modifiedAt: DateTime
  correlationId: String
}

input CateringNotificationWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  coreId: String
  coreId_not: String
  coreId_in: [String!]
  coreId_not_in: [String!]
  coreId_lt: String
  coreId_lte: String
  coreId_gt: String
  coreId_gte: String
  coreId_contains: String
  coreId_not_contains: String
  coreId_starts_with: String
  coreId_not_starts_with: String
  coreId_ends_with: String
  coreId_not_ends_with: String
  eventType: String
  eventType_not: String
  eventType_in: [String!]
  eventType_not_in: [String!]
  eventType_lt: String
  eventType_lte: String
  eventType_gt: String
  eventType_gte: String
  eventType_contains: String
  eventType_not_contains: String
  eventType_starts_with: String
  eventType_not_starts_with: String
  eventType_ends_with: String
  eventType_not_ends_with: String
  message: String
  message_not: String
  message_in: [String!]
  message_not_in: [String!]
  message_lt: String
  message_lte: String
  message_gt: String
  message_gte: String
  message_contains: String
  message_not_contains: String
  message_starts_with: String
  message_not_starts_with: String
  message_ends_with: String
  message_not_ends_with: String
  modifiedBy: CPersonWhereInput
  modifiedAt: DateTime
  modifiedAt_not: DateTime
  modifiedAt_in: [DateTime!]
  modifiedAt_not_in: [DateTime!]
  modifiedAt_lt: DateTime
  modifiedAt_lte: DateTime
  modifiedAt_gt: DateTime
  modifiedAt_gte: DateTime
  correlationId: String
  correlationId_not: String
  correlationId_in: [String!]
  correlationId_not_in: [String!]
  correlationId_lt: String
  correlationId_lte: String
  correlationId_gt: String
  correlationId_gte: String
  correlationId_contains: String
  correlationId_not_contains: String
  correlationId_starts_with: String
  correlationId_not_starts_with: String
  correlationId_ends_with: String
  correlationId_not_ends_with: String
  AND: [CateringNotificationWhereInput!]
  OR: [CateringNotificationWhereInput!]
  NOT: [CateringNotificationWhereInput!]
}

input CateringNotificationWhereUniqueInput {
  id: ID
  coreId: String
}

type CateringPersonEmail {
  id: ID!
  coreId: String!
  personEmailType: CateringPersonEmailType
  value: String
  isActive: Boolean
}

type CateringPersonEmailConnection {
  pageInfo: PageInfo!
  edges: [CateringPersonEmailEdge]!
  aggregate: AggregateCateringPersonEmail!
}

input CateringPersonEmailCreateInput {
  coreId: String!
  personEmailType: CateringPersonEmailTypeCreateOneInput
  value: String
  isActive: Boolean
}

input CateringPersonEmailCreateManyInput {
  create: [CateringPersonEmailCreateInput!]
  connect: [CateringPersonEmailWhereUniqueInput!]
}

type CateringPersonEmailEdge {
  node: CateringPersonEmail!
  cursor: String!
}

enum CateringPersonEmailOrderByInput {
  id_ASC
  id_DESC
  coreId_ASC
  coreId_DESC
  value_ASC
  value_DESC
  isActive_ASC
  isActive_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type CateringPersonEmailPreviousValues {
  id: ID!
  coreId: String!
  value: String
  isActive: Boolean
}

input CateringPersonEmailScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  coreId: String
  coreId_not: String
  coreId_in: [String!]
  coreId_not_in: [String!]
  coreId_lt: String
  coreId_lte: String
  coreId_gt: String
  coreId_gte: String
  coreId_contains: String
  coreId_not_contains: String
  coreId_starts_with: String
  coreId_not_starts_with: String
  coreId_ends_with: String
  coreId_not_ends_with: String
  value: String
  value_not: String
  value_in: [String!]
  value_not_in: [String!]
  value_lt: String
  value_lte: String
  value_gt: String
  value_gte: String
  value_contains: String
  value_not_contains: String
  value_starts_with: String
  value_not_starts_with: String
  value_ends_with: String
  value_not_ends_with: String
  isActive: Boolean
  isActive_not: Boolean
  AND: [CateringPersonEmailScalarWhereInput!]
  OR: [CateringPersonEmailScalarWhereInput!]
  NOT: [CateringPersonEmailScalarWhereInput!]
}

type CateringPersonEmailSubscriptionPayload {
  mutation: MutationType!
  node: CateringPersonEmail
  updatedFields: [String!]
  previousValues: CateringPersonEmailPreviousValues
}

input CateringPersonEmailSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CateringPersonEmailWhereInput
  AND: [CateringPersonEmailSubscriptionWhereInput!]
  OR: [CateringPersonEmailSubscriptionWhereInput!]
  NOT: [CateringPersonEmailSubscriptionWhereInput!]
}

type CateringPersonEmailType {
  id: ID!
  coreId: String!
}

type CateringPersonEmailTypeConnection {
  pageInfo: PageInfo!
  edges: [CateringPersonEmailTypeEdge]!
  aggregate: AggregateCateringPersonEmailType!
}

input CateringPersonEmailTypeCreateInput {
  coreId: String!
}

input CateringPersonEmailTypeCreateOneInput {
  create: CateringPersonEmailTypeCreateInput
  connect: CateringPersonEmailTypeWhereUniqueInput
}

type CateringPersonEmailTypeEdge {
  node: CateringPersonEmailType!
  cursor: String!
}

enum CateringPersonEmailTypeOrderByInput {
  id_ASC
  id_DESC
  coreId_ASC
  coreId_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type CateringPersonEmailTypePreviousValues {
  id: ID!
  coreId: String!
}

type CateringPersonEmailTypeSubscriptionPayload {
  mutation: MutationType!
  node: CateringPersonEmailType
  updatedFields: [String!]
  previousValues: CateringPersonEmailTypePreviousValues
}

input CateringPersonEmailTypeSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CateringPersonEmailTypeWhereInput
  AND: [CateringPersonEmailTypeSubscriptionWhereInput!]
  OR: [CateringPersonEmailTypeSubscriptionWhereInput!]
  NOT: [CateringPersonEmailTypeSubscriptionWhereInput!]
}

input CateringPersonEmailTypeUpdateDataInput {
  coreId: String
}

input CateringPersonEmailTypeUpdateInput {
  coreId: String
}

input CateringPersonEmailTypeUpdateManyMutationInput {
  coreId: String
}

input CateringPersonEmailTypeUpdateOneInput {
  create: CateringPersonEmailTypeCreateInput
  update: CateringPersonEmailTypeUpdateDataInput
  upsert: CateringPersonEmailTypeUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: CateringPersonEmailTypeWhereUniqueInput
}

input CateringPersonEmailTypeUpsertNestedInput {
  update: CateringPersonEmailTypeUpdateDataInput!
  create: CateringPersonEmailTypeCreateInput!
}

input CateringPersonEmailTypeWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  coreId: String
  coreId_not: String
  coreId_in: [String!]
  coreId_not_in: [String!]
  coreId_lt: String
  coreId_lte: String
  coreId_gt: String
  coreId_gte: String
  coreId_contains: String
  coreId_not_contains: String
  coreId_starts_with: String
  coreId_not_starts_with: String
  coreId_ends_with: String
  coreId_not_ends_with: String
  AND: [CateringPersonEmailTypeWhereInput!]
  OR: [CateringPersonEmailTypeWhereInput!]
  NOT: [CateringPersonEmailTypeWhereInput!]
}

input CateringPersonEmailTypeWhereUniqueInput {
  id: ID
  coreId: String
}

input CateringPersonEmailUpdateDataInput {
  coreId: String
  personEmailType: CateringPersonEmailTypeUpdateOneInput
  value: String
  isActive: Boolean
}

input CateringPersonEmailUpdateInput {
  coreId: String
  personEmailType: CateringPersonEmailTypeUpdateOneInput
  value: String
  isActive: Boolean
}

input CateringPersonEmailUpdateManyDataInput {
  coreId: String
  value: String
  isActive: Boolean
}

input CateringPersonEmailUpdateManyInput {
  create: [CateringPersonEmailCreateInput!]
  update: [CateringPersonEmailUpdateWithWhereUniqueNestedInput!]
  upsert: [CateringPersonEmailUpsertWithWhereUniqueNestedInput!]
  delete: [CateringPersonEmailWhereUniqueInput!]
  connect: [CateringPersonEmailWhereUniqueInput!]
  set: [CateringPersonEmailWhereUniqueInput!]
  disconnect: [CateringPersonEmailWhereUniqueInput!]
  deleteMany: [CateringPersonEmailScalarWhereInput!]
  updateMany: [CateringPersonEmailUpdateManyWithWhereNestedInput!]
}

input CateringPersonEmailUpdateManyMutationInput {
  coreId: String
  value: String
  isActive: Boolean
}

input CateringPersonEmailUpdateManyWithWhereNestedInput {
  where: CateringPersonEmailScalarWhereInput!
  data: CateringPersonEmailUpdateManyDataInput!
}

input CateringPersonEmailUpdateWithWhereUniqueNestedInput {
  where: CateringPersonEmailWhereUniqueInput!
  data: CateringPersonEmailUpdateDataInput!
}

input CateringPersonEmailUpsertWithWhereUniqueNestedInput {
  where: CateringPersonEmailWhereUniqueInput!
  update: CateringPersonEmailUpdateDataInput!
  create: CateringPersonEmailCreateInput!
}

input CateringPersonEmailWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  coreId: String
  coreId_not: String
  coreId_in: [String!]
  coreId_not_in: [String!]
  coreId_lt: String
  coreId_lte: String
  coreId_gt: String
  coreId_gte: String
  coreId_contains: String
  coreId_not_contains: String
  coreId_starts_with: String
  coreId_not_starts_with: String
  coreId_ends_with: String
  coreId_not_ends_with: String
  personEmailType: CateringPersonEmailTypeWhereInput
  value: String
  value_not: String
  value_in: [String!]
  value_not_in: [String!]
  value_lt: String
  value_lte: String
  value_gt: String
  value_gte: String
  value_contains: String
  value_not_contains: String
  value_starts_with: String
  value_not_starts_with: String
  value_ends_with: String
  value_not_ends_with: String
  isActive: Boolean
  isActive_not: Boolean
  AND: [CateringPersonEmailWhereInput!]
  OR: [CateringPersonEmailWhereInput!]
  NOT: [CateringPersonEmailWhereInput!]
}

input CateringPersonEmailWhereUniqueInput {
  id: ID
  coreId: String
}

type CateringPersonNationality {
  id: ID!
  coreId: String!
  value: String
  isActive: Boolean
}

type CateringPersonNationalityConnection {
  pageInfo: PageInfo!
  edges: [CateringPersonNationalityEdge]!
  aggregate: AggregateCateringPersonNationality!
}

input CateringPersonNationalityCreateInput {
  coreId: String!
  value: String
  isActive: Boolean
}

input CateringPersonNationalityCreateManyInput {
  create: [CateringPersonNationalityCreateInput!]
  connect: [CateringPersonNationalityWhereUniqueInput!]
}

type CateringPersonNationalityEdge {
  node: CateringPersonNationality!
  cursor: String!
}

enum CateringPersonNationalityOrderByInput {
  id_ASC
  id_DESC
  coreId_ASC
  coreId_DESC
  value_ASC
  value_DESC
  isActive_ASC
  isActive_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type CateringPersonNationalityPreviousValues {
  id: ID!
  coreId: String!
  value: String
  isActive: Boolean
}

input CateringPersonNationalityScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  coreId: String
  coreId_not: String
  coreId_in: [String!]
  coreId_not_in: [String!]
  coreId_lt: String
  coreId_lte: String
  coreId_gt: String
  coreId_gte: String
  coreId_contains: String
  coreId_not_contains: String
  coreId_starts_with: String
  coreId_not_starts_with: String
  coreId_ends_with: String
  coreId_not_ends_with: String
  value: String
  value_not: String
  value_in: [String!]
  value_not_in: [String!]
  value_lt: String
  value_lte: String
  value_gt: String
  value_gte: String
  value_contains: String
  value_not_contains: String
  value_starts_with: String
  value_not_starts_with: String
  value_ends_with: String
  value_not_ends_with: String
  isActive: Boolean
  isActive_not: Boolean
  AND: [CateringPersonNationalityScalarWhereInput!]
  OR: [CateringPersonNationalityScalarWhereInput!]
  NOT: [CateringPersonNationalityScalarWhereInput!]
}

type CateringPersonNationalitySubscriptionPayload {
  mutation: MutationType!
  node: CateringPersonNationality
  updatedFields: [String!]
  previousValues: CateringPersonNationalityPreviousValues
}

input CateringPersonNationalitySubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CateringPersonNationalityWhereInput
  AND: [CateringPersonNationalitySubscriptionWhereInput!]
  OR: [CateringPersonNationalitySubscriptionWhereInput!]
  NOT: [CateringPersonNationalitySubscriptionWhereInput!]
}

input CateringPersonNationalityUpdateDataInput {
  coreId: String
  value: String
  isActive: Boolean
}

input CateringPersonNationalityUpdateInput {
  coreId: String
  value: String
  isActive: Boolean
}

input CateringPersonNationalityUpdateManyDataInput {
  coreId: String
  value: String
  isActive: Boolean
}

input CateringPersonNationalityUpdateManyInput {
  create: [CateringPersonNationalityCreateInput!]
  update: [CateringPersonNationalityUpdateWithWhereUniqueNestedInput!]
  upsert: [CateringPersonNationalityUpsertWithWhereUniqueNestedInput!]
  delete: [CateringPersonNationalityWhereUniqueInput!]
  connect: [CateringPersonNationalityWhereUniqueInput!]
  set: [CateringPersonNationalityWhereUniqueInput!]
  disconnect: [CateringPersonNationalityWhereUniqueInput!]
  deleteMany: [CateringPersonNationalityScalarWhereInput!]
  updateMany: [CateringPersonNationalityUpdateManyWithWhereNestedInput!]
}

input CateringPersonNationalityUpdateManyMutationInput {
  coreId: String
  value: String
  isActive: Boolean
}

input CateringPersonNationalityUpdateManyWithWhereNestedInput {
  where: CateringPersonNationalityScalarWhereInput!
  data: CateringPersonNationalityUpdateManyDataInput!
}

input CateringPersonNationalityUpdateWithWhereUniqueNestedInput {
  where: CateringPersonNationalityWhereUniqueInput!
  data: CateringPersonNationalityUpdateDataInput!
}

input CateringPersonNationalityUpsertWithWhereUniqueNestedInput {
  where: CateringPersonNationalityWhereUniqueInput!
  update: CateringPersonNationalityUpdateDataInput!
  create: CateringPersonNationalityCreateInput!
}

input CateringPersonNationalityWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  coreId: String
  coreId_not: String
  coreId_in: [String!]
  coreId_not_in: [String!]
  coreId_lt: String
  coreId_lte: String
  coreId_gt: String
  coreId_gte: String
  coreId_contains: String
  coreId_not_contains: String
  coreId_starts_with: String
  coreId_not_starts_with: String
  coreId_ends_with: String
  coreId_not_ends_with: String
  value: String
  value_not: String
  value_in: [String!]
  value_not_in: [String!]
  value_lt: String
  value_lte: String
  value_gt: String
  value_gte: String
  value_contains: String
  value_not_contains: String
  value_starts_with: String
  value_not_starts_with: String
  value_ends_with: String
  value_not_ends_with: String
  isActive: Boolean
  isActive_not: Boolean
  AND: [CateringPersonNationalityWhereInput!]
  OR: [CateringPersonNationalityWhereInput!]
  NOT: [CateringPersonNationalityWhereInput!]
}

input CateringPersonNationalityWhereUniqueInput {
  id: ID
  coreId: String
}

type CateringPersonPhoneNumber {
  id: ID!
  coreId: String!
  personPhoneNumberType: CateringPersonPhoneNumberType
  value: String
  isActive: Boolean
}

type CateringPersonPhoneNumberConnection {
  pageInfo: PageInfo!
  edges: [CateringPersonPhoneNumberEdge]!
  aggregate: AggregateCateringPersonPhoneNumber!
}

input CateringPersonPhoneNumberCreateInput {
  coreId: String!
  personPhoneNumberType: CateringPersonPhoneNumberTypeCreateOneInput
  value: String
  isActive: Boolean
}

input CateringPersonPhoneNumberCreateManyInput {
  create: [CateringPersonPhoneNumberCreateInput!]
  connect: [CateringPersonPhoneNumberWhereUniqueInput!]
}

type CateringPersonPhoneNumberEdge {
  node: CateringPersonPhoneNumber!
  cursor: String!
}

enum CateringPersonPhoneNumberOrderByInput {
  id_ASC
  id_DESC
  coreId_ASC
  coreId_DESC
  value_ASC
  value_DESC
  isActive_ASC
  isActive_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type CateringPersonPhoneNumberPreviousValues {
  id: ID!
  coreId: String!
  value: String
  isActive: Boolean
}

input CateringPersonPhoneNumberScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  coreId: String
  coreId_not: String
  coreId_in: [String!]
  coreId_not_in: [String!]
  coreId_lt: String
  coreId_lte: String
  coreId_gt: String
  coreId_gte: String
  coreId_contains: String
  coreId_not_contains: String
  coreId_starts_with: String
  coreId_not_starts_with: String
  coreId_ends_with: String
  coreId_not_ends_with: String
  value: String
  value_not: String
  value_in: [String!]
  value_not_in: [String!]
  value_lt: String
  value_lte: String
  value_gt: String
  value_gte: String
  value_contains: String
  value_not_contains: String
  value_starts_with: String
  value_not_starts_with: String
  value_ends_with: String
  value_not_ends_with: String
  isActive: Boolean
  isActive_not: Boolean
  AND: [CateringPersonPhoneNumberScalarWhereInput!]
  OR: [CateringPersonPhoneNumberScalarWhereInput!]
  NOT: [CateringPersonPhoneNumberScalarWhereInput!]
}

type CateringPersonPhoneNumberSubscriptionPayload {
  mutation: MutationType!
  node: CateringPersonPhoneNumber
  updatedFields: [String!]
  previousValues: CateringPersonPhoneNumberPreviousValues
}

input CateringPersonPhoneNumberSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CateringPersonPhoneNumberWhereInput
  AND: [CateringPersonPhoneNumberSubscriptionWhereInput!]
  OR: [CateringPersonPhoneNumberSubscriptionWhereInput!]
  NOT: [CateringPersonPhoneNumberSubscriptionWhereInput!]
}

type CateringPersonPhoneNumberType {
  id: ID!
  coreId: String!
}

type CateringPersonPhoneNumberTypeConnection {
  pageInfo: PageInfo!
  edges: [CateringPersonPhoneNumberTypeEdge]!
  aggregate: AggregateCateringPersonPhoneNumberType!
}

input CateringPersonPhoneNumberTypeCreateInput {
  coreId: String!
}

input CateringPersonPhoneNumberTypeCreateOneInput {
  create: CateringPersonPhoneNumberTypeCreateInput
  connect: CateringPersonPhoneNumberTypeWhereUniqueInput
}

type CateringPersonPhoneNumberTypeEdge {
  node: CateringPersonPhoneNumberType!
  cursor: String!
}

enum CateringPersonPhoneNumberTypeOrderByInput {
  id_ASC
  id_DESC
  coreId_ASC
  coreId_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type CateringPersonPhoneNumberTypePreviousValues {
  id: ID!
  coreId: String!
}

type CateringPersonPhoneNumberTypeSubscriptionPayload {
  mutation: MutationType!
  node: CateringPersonPhoneNumberType
  updatedFields: [String!]
  previousValues: CateringPersonPhoneNumberTypePreviousValues
}

input CateringPersonPhoneNumberTypeSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CateringPersonPhoneNumberTypeWhereInput
  AND: [CateringPersonPhoneNumberTypeSubscriptionWhereInput!]
  OR: [CateringPersonPhoneNumberTypeSubscriptionWhereInput!]
  NOT: [CateringPersonPhoneNumberTypeSubscriptionWhereInput!]
}

input CateringPersonPhoneNumberTypeUpdateDataInput {
  coreId: String
}

input CateringPersonPhoneNumberTypeUpdateInput {
  coreId: String
}

input CateringPersonPhoneNumberTypeUpdateManyMutationInput {
  coreId: String
}

input CateringPersonPhoneNumberTypeUpdateOneInput {
  create: CateringPersonPhoneNumberTypeCreateInput
  update: CateringPersonPhoneNumberTypeUpdateDataInput
  upsert: CateringPersonPhoneNumberTypeUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: CateringPersonPhoneNumberTypeWhereUniqueInput
}

input CateringPersonPhoneNumberTypeUpsertNestedInput {
  update: CateringPersonPhoneNumberTypeUpdateDataInput!
  create: CateringPersonPhoneNumberTypeCreateInput!
}

input CateringPersonPhoneNumberTypeWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  coreId: String
  coreId_not: String
  coreId_in: [String!]
  coreId_not_in: [String!]
  coreId_lt: String
  coreId_lte: String
  coreId_gt: String
  coreId_gte: String
  coreId_contains: String
  coreId_not_contains: String
  coreId_starts_with: String
  coreId_not_starts_with: String
  coreId_ends_with: String
  coreId_not_ends_with: String
  AND: [CateringPersonPhoneNumberTypeWhereInput!]
  OR: [CateringPersonPhoneNumberTypeWhereInput!]
  NOT: [CateringPersonPhoneNumberTypeWhereInput!]
}

input CateringPersonPhoneNumberTypeWhereUniqueInput {
  id: ID
  coreId: String
}

input CateringPersonPhoneNumberUpdateDataInput {
  coreId: String
  personPhoneNumberType: CateringPersonPhoneNumberTypeUpdateOneInput
  value: String
  isActive: Boolean
}

input CateringPersonPhoneNumberUpdateInput {
  coreId: String
  personPhoneNumberType: CateringPersonPhoneNumberTypeUpdateOneInput
  value: String
  isActive: Boolean
}

input CateringPersonPhoneNumberUpdateManyDataInput {
  coreId: String
  value: String
  isActive: Boolean
}

input CateringPersonPhoneNumberUpdateManyInput {
  create: [CateringPersonPhoneNumberCreateInput!]
  update: [CateringPersonPhoneNumberUpdateWithWhereUniqueNestedInput!]
  upsert: [CateringPersonPhoneNumberUpsertWithWhereUniqueNestedInput!]
  delete: [CateringPersonPhoneNumberWhereUniqueInput!]
  connect: [CateringPersonPhoneNumberWhereUniqueInput!]
  set: [CateringPersonPhoneNumberWhereUniqueInput!]
  disconnect: [CateringPersonPhoneNumberWhereUniqueInput!]
  deleteMany: [CateringPersonPhoneNumberScalarWhereInput!]
  updateMany: [CateringPersonPhoneNumberUpdateManyWithWhereNestedInput!]
}

input CateringPersonPhoneNumberUpdateManyMutationInput {
  coreId: String
  value: String
  isActive: Boolean
}

input CateringPersonPhoneNumberUpdateManyWithWhereNestedInput {
  where: CateringPersonPhoneNumberScalarWhereInput!
  data: CateringPersonPhoneNumberUpdateManyDataInput!
}

input CateringPersonPhoneNumberUpdateWithWhereUniqueNestedInput {
  where: CateringPersonPhoneNumberWhereUniqueInput!
  data: CateringPersonPhoneNumberUpdateDataInput!
}

input CateringPersonPhoneNumberUpsertWithWhereUniqueNestedInput {
  where: CateringPersonPhoneNumberWhereUniqueInput!
  update: CateringPersonPhoneNumberUpdateDataInput!
  create: CateringPersonPhoneNumberCreateInput!
}

input CateringPersonPhoneNumberWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  coreId: String
  coreId_not: String
  coreId_in: [String!]
  coreId_not_in: [String!]
  coreId_lt: String
  coreId_lte: String
  coreId_gt: String
  coreId_gte: String
  coreId_contains: String
  coreId_not_contains: String
  coreId_starts_with: String
  coreId_not_starts_with: String
  coreId_ends_with: String
  coreId_not_ends_with: String
  personPhoneNumberType: CateringPersonPhoneNumberTypeWhereInput
  value: String
  value_not: String
  value_in: [String!]
  value_not_in: [String!]
  value_lt: String
  value_lte: String
  value_gt: String
  value_gte: String
  value_contains: String
  value_not_contains: String
  value_starts_with: String
  value_not_starts_with: String
  value_ends_with: String
  value_not_ends_with: String
  isActive: Boolean
  isActive_not: Boolean
  AND: [CateringPersonPhoneNumberWhereInput!]
  OR: [CateringPersonPhoneNumberWhereInput!]
  NOT: [CateringPersonPhoneNumberWhereInput!]
}

input CateringPersonPhoneNumberWhereUniqueInput {
  id: ID
  coreId: String
}

type CateringPreference {
  id: ID!
  coreId: String!
  category: CateringPreferenceCategory
  name: String
  person: CPerson
}

type CateringPreferenceCategory {
  id: ID!
  coreId: String!
  name: String
  isActive: Boolean
}

type CateringPreferenceCategoryConnection {
  pageInfo: PageInfo!
  edges: [CateringPreferenceCategoryEdge]!
  aggregate: AggregateCateringPreferenceCategory!
}

input CateringPreferenceCategoryCreateInput {
  coreId: String!
  name: String
  isActive: Boolean
}

input CateringPreferenceCategoryCreateOneInput {
  create: CateringPreferenceCategoryCreateInput
  connect: CateringPreferenceCategoryWhereUniqueInput
}

type CateringPreferenceCategoryEdge {
  node: CateringPreferenceCategory!
  cursor: String!
}

enum CateringPreferenceCategoryOrderByInput {
  id_ASC
  id_DESC
  coreId_ASC
  coreId_DESC
  name_ASC
  name_DESC
  isActive_ASC
  isActive_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type CateringPreferenceCategoryPreviousValues {
  id: ID!
  coreId: String!
  name: String
  isActive: Boolean
}

type CateringPreferenceCategorySubscriptionPayload {
  mutation: MutationType!
  node: CateringPreferenceCategory
  updatedFields: [String!]
  previousValues: CateringPreferenceCategoryPreviousValues
}

input CateringPreferenceCategorySubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CateringPreferenceCategoryWhereInput
  AND: [CateringPreferenceCategorySubscriptionWhereInput!]
  OR: [CateringPreferenceCategorySubscriptionWhereInput!]
  NOT: [CateringPreferenceCategorySubscriptionWhereInput!]
}

input CateringPreferenceCategoryUpdateDataInput {
  coreId: String
  name: String
  isActive: Boolean
}

input CateringPreferenceCategoryUpdateInput {
  coreId: String
  name: String
  isActive: Boolean
}

input CateringPreferenceCategoryUpdateManyMutationInput {
  coreId: String
  name: String
  isActive: Boolean
}

input CateringPreferenceCategoryUpdateOneInput {
  create: CateringPreferenceCategoryCreateInput
  update: CateringPreferenceCategoryUpdateDataInput
  upsert: CateringPreferenceCategoryUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: CateringPreferenceCategoryWhereUniqueInput
}

input CateringPreferenceCategoryUpsertNestedInput {
  update: CateringPreferenceCategoryUpdateDataInput!
  create: CateringPreferenceCategoryCreateInput!
}

input CateringPreferenceCategoryWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  coreId: String
  coreId_not: String
  coreId_in: [String!]
  coreId_not_in: [String!]
  coreId_lt: String
  coreId_lte: String
  coreId_gt: String
  coreId_gte: String
  coreId_contains: String
  coreId_not_contains: String
  coreId_starts_with: String
  coreId_not_starts_with: String
  coreId_ends_with: String
  coreId_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  isActive: Boolean
  isActive_not: Boolean
  AND: [CateringPreferenceCategoryWhereInput!]
  OR: [CateringPreferenceCategoryWhereInput!]
  NOT: [CateringPreferenceCategoryWhereInput!]
}

input CateringPreferenceCategoryWhereUniqueInput {
  id: ID
  coreId: String
}

type CateringPreferenceConnection {
  pageInfo: PageInfo!
  edges: [CateringPreferenceEdge]!
  aggregate: AggregateCateringPreference!
}

input CateringPreferenceCreateInput {
  coreId: String!
  category: CateringPreferenceCategoryCreateOneInput
  name: String
  person: CPersonCreateOneWithoutPreferencesInput
}

input CateringPreferenceCreateManyWithoutPersonInput {
  create: [CateringPreferenceCreateWithoutPersonInput!]
  connect: [CateringPreferenceWhereUniqueInput!]
}

input CateringPreferenceCreateWithoutPersonInput {
  coreId: String!
  category: CateringPreferenceCategoryCreateOneInput
  name: String
}

type CateringPreferenceEdge {
  node: CateringPreference!
  cursor: String!
}

enum CateringPreferenceOrderByInput {
  id_ASC
  id_DESC
  coreId_ASC
  coreId_DESC
  name_ASC
  name_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type CateringPreferencePreviousValues {
  id: ID!
  coreId: String!
  name: String
}

input CateringPreferenceScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  coreId: String
  coreId_not: String
  coreId_in: [String!]
  coreId_not_in: [String!]
  coreId_lt: String
  coreId_lte: String
  coreId_gt: String
  coreId_gte: String
  coreId_contains: String
  coreId_not_contains: String
  coreId_starts_with: String
  coreId_not_starts_with: String
  coreId_ends_with: String
  coreId_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  AND: [CateringPreferenceScalarWhereInput!]
  OR: [CateringPreferenceScalarWhereInput!]
  NOT: [CateringPreferenceScalarWhereInput!]
}

type CateringPreferenceSubscriptionPayload {
  mutation: MutationType!
  node: CateringPreference
  updatedFields: [String!]
  previousValues: CateringPreferencePreviousValues
}

input CateringPreferenceSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CateringPreferenceWhereInput
  AND: [CateringPreferenceSubscriptionWhereInput!]
  OR: [CateringPreferenceSubscriptionWhereInput!]
  NOT: [CateringPreferenceSubscriptionWhereInput!]
}

input CateringPreferenceUpdateInput {
  coreId: String
  category: CateringPreferenceCategoryUpdateOneInput
  name: String
  person: CPersonUpdateOneWithoutPreferencesInput
}

input CateringPreferenceUpdateManyDataInput {
  coreId: String
  name: String
}

input CateringPreferenceUpdateManyMutationInput {
  coreId: String
  name: String
}

input CateringPreferenceUpdateManyWithoutPersonInput {
  create: [CateringPreferenceCreateWithoutPersonInput!]
  delete: [CateringPreferenceWhereUniqueInput!]
  connect: [CateringPreferenceWhereUniqueInput!]
  set: [CateringPreferenceWhereUniqueInput!]
  disconnect: [CateringPreferenceWhereUniqueInput!]
  update: [CateringPreferenceUpdateWithWhereUniqueWithoutPersonInput!]
  upsert: [CateringPreferenceUpsertWithWhereUniqueWithoutPersonInput!]
  deleteMany: [CateringPreferenceScalarWhereInput!]
  updateMany: [CateringPreferenceUpdateManyWithWhereNestedInput!]
}

input CateringPreferenceUpdateManyWithWhereNestedInput {
  where: CateringPreferenceScalarWhereInput!
  data: CateringPreferenceUpdateManyDataInput!
}

input CateringPreferenceUpdateWithoutPersonDataInput {
  coreId: String
  category: CateringPreferenceCategoryUpdateOneInput
  name: String
}

input CateringPreferenceUpdateWithWhereUniqueWithoutPersonInput {
  where: CateringPreferenceWhereUniqueInput!
  data: CateringPreferenceUpdateWithoutPersonDataInput!
}

input CateringPreferenceUpsertWithWhereUniqueWithoutPersonInput {
  where: CateringPreferenceWhereUniqueInput!
  update: CateringPreferenceUpdateWithoutPersonDataInput!
  create: CateringPreferenceCreateWithoutPersonInput!
}

input CateringPreferenceWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  coreId: String
  coreId_not: String
  coreId_in: [String!]
  coreId_not_in: [String!]
  coreId_lt: String
  coreId_lte: String
  coreId_gt: String
  coreId_gte: String
  coreId_contains: String
  coreId_not_contains: String
  coreId_starts_with: String
  coreId_not_starts_with: String
  coreId_ends_with: String
  coreId_not_ends_with: String
  category: CateringPreferenceCategoryWhereInput
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  person: CPersonWhereInput
  AND: [CateringPreferenceWhereInput!]
  OR: [CateringPreferenceWhereInput!]
  NOT: [CateringPreferenceWhereInput!]
}

input CateringPreferenceWhereUniqueInput {
  id: ID
  coreId: String
}

type CateringProposalSubscriber {
  id: ID!
  coreId: String!
  flightLeg: CFlightLeg
  to: String
  cc: String
  bcc: String
  greeting: String
}

type CateringProposalSubscriberConnection {
  pageInfo: PageInfo!
  edges: [CateringProposalSubscriberEdge]!
  aggregate: AggregateCateringProposalSubscriber!
}

input CateringProposalSubscriberCreateInput {
  coreId: String!
  flightLeg: CFlightLegCreateOneWithoutSubscriberInput
  to: String
  cc: String
  bcc: String
  greeting: String
}

input CateringProposalSubscriberCreateOneWithoutFlightLegInput {
  create: CateringProposalSubscriberCreateWithoutFlightLegInput
  connect: CateringProposalSubscriberWhereUniqueInput
}

input CateringProposalSubscriberCreateWithoutFlightLegInput {
  coreId: String!
  to: String
  cc: String
  bcc: String
  greeting: String
}

type CateringProposalSubscriberEdge {
  node: CateringProposalSubscriber!
  cursor: String!
}

enum CateringProposalSubscriberOrderByInput {
  id_ASC
  id_DESC
  coreId_ASC
  coreId_DESC
  to_ASC
  to_DESC
  cc_ASC
  cc_DESC
  bcc_ASC
  bcc_DESC
  greeting_ASC
  greeting_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type CateringProposalSubscriberPreviousValues {
  id: ID!
  coreId: String!
  to: String
  cc: String
  bcc: String
  greeting: String
}

type CateringProposalSubscriberSubscriptionPayload {
  mutation: MutationType!
  node: CateringProposalSubscriber
  updatedFields: [String!]
  previousValues: CateringProposalSubscriberPreviousValues
}

input CateringProposalSubscriberSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CateringProposalSubscriberWhereInput
  AND: [CateringProposalSubscriberSubscriptionWhereInput!]
  OR: [CateringProposalSubscriberSubscriptionWhereInput!]
  NOT: [CateringProposalSubscriberSubscriptionWhereInput!]
}

input CateringProposalSubscriberUpdateInput {
  coreId: String
  flightLeg: CFlightLegUpdateOneWithoutSubscriberInput
  to: String
  cc: String
  bcc: String
  greeting: String
}

input CateringProposalSubscriberUpdateManyMutationInput {
  coreId: String
  to: String
  cc: String
  bcc: String
  greeting: String
}

input CateringProposalSubscriberUpdateOneWithoutFlightLegInput {
  create: CateringProposalSubscriberCreateWithoutFlightLegInput
  update: CateringProposalSubscriberUpdateWithoutFlightLegDataInput
  upsert: CateringProposalSubscriberUpsertWithoutFlightLegInput
  delete: Boolean
  disconnect: Boolean
  connect: CateringProposalSubscriberWhereUniqueInput
}

input CateringProposalSubscriberUpdateWithoutFlightLegDataInput {
  coreId: String
  to: String
  cc: String
  bcc: String
  greeting: String
}

input CateringProposalSubscriberUpsertWithoutFlightLegInput {
  update: CateringProposalSubscriberUpdateWithoutFlightLegDataInput!
  create: CateringProposalSubscriberCreateWithoutFlightLegInput!
}

input CateringProposalSubscriberWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  coreId: String
  coreId_not: String
  coreId_in: [String!]
  coreId_not_in: [String!]
  coreId_lt: String
  coreId_lte: String
  coreId_gt: String
  coreId_gte: String
  coreId_contains: String
  coreId_not_contains: String
  coreId_starts_with: String
  coreId_not_starts_with: String
  coreId_ends_with: String
  coreId_not_ends_with: String
  flightLeg: CFlightLegWhereInput
  to: String
  to_not: String
  to_in: [String!]
  to_not_in: [String!]
  to_lt: String
  to_lte: String
  to_gt: String
  to_gte: String
  to_contains: String
  to_not_contains: String
  to_starts_with: String
  to_not_starts_with: String
  to_ends_with: String
  to_not_ends_with: String
  cc: String
  cc_not: String
  cc_in: [String!]
  cc_not_in: [String!]
  cc_lt: String
  cc_lte: String
  cc_gt: String
  cc_gte: String
  cc_contains: String
  cc_not_contains: String
  cc_starts_with: String
  cc_not_starts_with: String
  cc_ends_with: String
  cc_not_ends_with: String
  bcc: String
  bcc_not: String
  bcc_in: [String!]
  bcc_not_in: [String!]
  bcc_lt: String
  bcc_lte: String
  bcc_gt: String
  bcc_gte: String
  bcc_contains: String
  bcc_not_contains: String
  bcc_starts_with: String
  bcc_not_starts_with: String
  bcc_ends_with: String
  bcc_not_ends_with: String
  greeting: String
  greeting_not: String
  greeting_in: [String!]
  greeting_not_in: [String!]
  greeting_lt: String
  greeting_lte: String
  greeting_gt: String
  greeting_gte: String
  greeting_contains: String
  greeting_not_contains: String
  greeting_starts_with: String
  greeting_not_starts_with: String
  greeting_ends_with: String
  greeting_not_ends_with: String
  AND: [CateringProposalSubscriberWhereInput!]
  OR: [CateringProposalSubscriberWhereInput!]
  NOT: [CateringProposalSubscriberWhereInput!]
}

input CateringProposalSubscriberWhereUniqueInput {
  id: ID
  coreId: String
}

type CateringPurchaseOrder {
  id: ID!
  coreId: String!
  status: String
  documents(where: PurchaseOrderDocumentWhereInput, orderBy: PurchaseOrderDocumentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PurchaseOrderDocument!]
  delivery: Delivery
  serviceProvider: CServiceProvider
  proposal: Proposal
  costs: CateringCosts
  flightLeg: CFlightLeg
  createdBy: CPerson
  _createdAt: DateTime
  modifiedBy: CPerson
  modifiedAt: DateTime
  removed: Boolean
  invoiced: Boolean
}

type CateringPurchaseOrderConnection {
  pageInfo: PageInfo!
  edges: [CateringPurchaseOrderEdge]!
  aggregate: AggregateCateringPurchaseOrder!
}

input CateringPurchaseOrderCreateInput {
  coreId: String!
  status: String
  documents: PurchaseOrderDocumentCreateManyInput
  delivery: DeliveryCreateOneInput
  serviceProvider: CServiceProviderCreateOneInput
  proposal: ProposalCreateOneWithoutPurchaseOrdersInput
  costs: CateringCostsCreateOneInput
  flightLeg: CFlightLegCreateOneInput
  createdBy: CPersonCreateOneInput
  _createdAt: DateTime
  modifiedBy: CPersonCreateOneInput
  modifiedAt: DateTime
  removed: Boolean
  invoiced: Boolean
}

input CateringPurchaseOrderCreateManyWithoutProposalInput {
  create: [CateringPurchaseOrderCreateWithoutProposalInput!]
  connect: [CateringPurchaseOrderWhereUniqueInput!]
}

input CateringPurchaseOrderCreateWithoutProposalInput {
  coreId: String!
  status: String
  documents: PurchaseOrderDocumentCreateManyInput
  delivery: DeliveryCreateOneInput
  serviceProvider: CServiceProviderCreateOneInput
  costs: CateringCostsCreateOneInput
  flightLeg: CFlightLegCreateOneInput
  createdBy: CPersonCreateOneInput
  _createdAt: DateTime
  modifiedBy: CPersonCreateOneInput
  modifiedAt: DateTime
  removed: Boolean
  invoiced: Boolean
}

type CateringPurchaseOrderEdge {
  node: CateringPurchaseOrder!
  cursor: String!
}

enum CateringPurchaseOrderOrderByInput {
  id_ASC
  id_DESC
  coreId_ASC
  coreId_DESC
  status_ASC
  status_DESC
  _createdAt_ASC
  _createdAt_DESC
  modifiedAt_ASC
  modifiedAt_DESC
  removed_ASC
  removed_DESC
  invoiced_ASC
  invoiced_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type CateringPurchaseOrderPreviousValues {
  id: ID!
  coreId: String!
  status: String
  _createdAt: DateTime
  modifiedAt: DateTime
  removed: Boolean
  invoiced: Boolean
}

input CateringPurchaseOrderScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  coreId: String
  coreId_not: String
  coreId_in: [String!]
  coreId_not_in: [String!]
  coreId_lt: String
  coreId_lte: String
  coreId_gt: String
  coreId_gte: String
  coreId_contains: String
  coreId_not_contains: String
  coreId_starts_with: String
  coreId_not_starts_with: String
  coreId_ends_with: String
  coreId_not_ends_with: String
  status: String
  status_not: String
  status_in: [String!]
  status_not_in: [String!]
  status_lt: String
  status_lte: String
  status_gt: String
  status_gte: String
  status_contains: String
  status_not_contains: String
  status_starts_with: String
  status_not_starts_with: String
  status_ends_with: String
  status_not_ends_with: String
  _createdAt: DateTime
  _createdAt_not: DateTime
  _createdAt_in: [DateTime!]
  _createdAt_not_in: [DateTime!]
  _createdAt_lt: DateTime
  _createdAt_lte: DateTime
  _createdAt_gt: DateTime
  _createdAt_gte: DateTime
  modifiedAt: DateTime
  modifiedAt_not: DateTime
  modifiedAt_in: [DateTime!]
  modifiedAt_not_in: [DateTime!]
  modifiedAt_lt: DateTime
  modifiedAt_lte: DateTime
  modifiedAt_gt: DateTime
  modifiedAt_gte: DateTime
  removed: Boolean
  removed_not: Boolean
  invoiced: Boolean
  invoiced_not: Boolean
  AND: [CateringPurchaseOrderScalarWhereInput!]
  OR: [CateringPurchaseOrderScalarWhereInput!]
  NOT: [CateringPurchaseOrderScalarWhereInput!]
}

type CateringPurchaseOrderSubscriptionPayload {
  mutation: MutationType!
  node: CateringPurchaseOrder
  updatedFields: [String!]
  previousValues: CateringPurchaseOrderPreviousValues
}

input CateringPurchaseOrderSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CateringPurchaseOrderWhereInput
  AND: [CateringPurchaseOrderSubscriptionWhereInput!]
  OR: [CateringPurchaseOrderSubscriptionWhereInput!]
  NOT: [CateringPurchaseOrderSubscriptionWhereInput!]
}

input CateringPurchaseOrderUpdateInput {
  coreId: String
  status: String
  documents: PurchaseOrderDocumentUpdateManyInput
  delivery: DeliveryUpdateOneInput
  serviceProvider: CServiceProviderUpdateOneInput
  proposal: ProposalUpdateOneWithoutPurchaseOrdersInput
  costs: CateringCostsUpdateOneInput
  flightLeg: CFlightLegUpdateOneInput
  createdBy: CPersonUpdateOneInput
  _createdAt: DateTime
  modifiedBy: CPersonUpdateOneInput
  modifiedAt: DateTime
  removed: Boolean
  invoiced: Boolean
}

input CateringPurchaseOrderUpdateManyDataInput {
  coreId: String
  status: String
  _createdAt: DateTime
  modifiedAt: DateTime
  removed: Boolean
  invoiced: Boolean
}

input CateringPurchaseOrderUpdateManyMutationInput {
  coreId: String
  status: String
  _createdAt: DateTime
  modifiedAt: DateTime
  removed: Boolean
  invoiced: Boolean
}

input CateringPurchaseOrderUpdateManyWithoutProposalInput {
  create: [CateringPurchaseOrderCreateWithoutProposalInput!]
  delete: [CateringPurchaseOrderWhereUniqueInput!]
  connect: [CateringPurchaseOrderWhereUniqueInput!]
  set: [CateringPurchaseOrderWhereUniqueInput!]
  disconnect: [CateringPurchaseOrderWhereUniqueInput!]
  update: [CateringPurchaseOrderUpdateWithWhereUniqueWithoutProposalInput!]
  upsert: [CateringPurchaseOrderUpsertWithWhereUniqueWithoutProposalInput!]
  deleteMany: [CateringPurchaseOrderScalarWhereInput!]
  updateMany: [CateringPurchaseOrderUpdateManyWithWhereNestedInput!]
}

input CateringPurchaseOrderUpdateManyWithWhereNestedInput {
  where: CateringPurchaseOrderScalarWhereInput!
  data: CateringPurchaseOrderUpdateManyDataInput!
}

input CateringPurchaseOrderUpdateWithoutProposalDataInput {
  coreId: String
  status: String
  documents: PurchaseOrderDocumentUpdateManyInput
  delivery: DeliveryUpdateOneInput
  serviceProvider: CServiceProviderUpdateOneInput
  costs: CateringCostsUpdateOneInput
  flightLeg: CFlightLegUpdateOneInput
  createdBy: CPersonUpdateOneInput
  _createdAt: DateTime
  modifiedBy: CPersonUpdateOneInput
  modifiedAt: DateTime
  removed: Boolean
  invoiced: Boolean
}

input CateringPurchaseOrderUpdateWithWhereUniqueWithoutProposalInput {
  where: CateringPurchaseOrderWhereUniqueInput!
  data: CateringPurchaseOrderUpdateWithoutProposalDataInput!
}

input CateringPurchaseOrderUpsertWithWhereUniqueWithoutProposalInput {
  where: CateringPurchaseOrderWhereUniqueInput!
  update: CateringPurchaseOrderUpdateWithoutProposalDataInput!
  create: CateringPurchaseOrderCreateWithoutProposalInput!
}

input CateringPurchaseOrderWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  coreId: String
  coreId_not: String
  coreId_in: [String!]
  coreId_not_in: [String!]
  coreId_lt: String
  coreId_lte: String
  coreId_gt: String
  coreId_gte: String
  coreId_contains: String
  coreId_not_contains: String
  coreId_starts_with: String
  coreId_not_starts_with: String
  coreId_ends_with: String
  coreId_not_ends_with: String
  status: String
  status_not: String
  status_in: [String!]
  status_not_in: [String!]
  status_lt: String
  status_lte: String
  status_gt: String
  status_gte: String
  status_contains: String
  status_not_contains: String
  status_starts_with: String
  status_not_starts_with: String
  status_ends_with: String
  status_not_ends_with: String
  documents_every: PurchaseOrderDocumentWhereInput
  documents_some: PurchaseOrderDocumentWhereInput
  documents_none: PurchaseOrderDocumentWhereInput
  delivery: DeliveryWhereInput
  serviceProvider: CServiceProviderWhereInput
  proposal: ProposalWhereInput
  costs: CateringCostsWhereInput
  flightLeg: CFlightLegWhereInput
  createdBy: CPersonWhereInput
  _createdAt: DateTime
  _createdAt_not: DateTime
  _createdAt_in: [DateTime!]
  _createdAt_not_in: [DateTime!]
  _createdAt_lt: DateTime
  _createdAt_lte: DateTime
  _createdAt_gt: DateTime
  _createdAt_gte: DateTime
  modifiedBy: CPersonWhereInput
  modifiedAt: DateTime
  modifiedAt_not: DateTime
  modifiedAt_in: [DateTime!]
  modifiedAt_not_in: [DateTime!]
  modifiedAt_lt: DateTime
  modifiedAt_lte: DateTime
  modifiedAt_gt: DateTime
  modifiedAt_gte: DateTime
  removed: Boolean
  removed_not: Boolean
  invoiced: Boolean
  invoiced_not: Boolean
  AND: [CateringPurchaseOrderWhereInput!]
  OR: [CateringPurchaseOrderWhereInput!]
  NOT: [CateringPurchaseOrderWhereInput!]
}

input CateringPurchaseOrderWhereUniqueInput {
  id: ID
  coreId: String
}

type CateringTask {
  id: ID!
  coreId: String!
  flight: CFlightLeg
  assignedTo: CPerson
  _createdAt: DateTime
  modifiedAt: DateTime
  modifiedBy: CPerson
  dueDate: DateTime
  status: String
  alerts(where: CAlertWhereInput, orderBy: CAlertOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CAlert!]
  proposal: Proposal
  pinned: Boolean
  removed: Boolean
  additionalFlightLegs(where: CFlightLegWhereInput, orderBy: CFlightLegOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CFlightLeg!]
  notes(where: CateringTaskNoteWhereInput, orderBy: CateringTaskNoteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CateringTaskNote!]
  transitions(where: CateringWFTransitionWhereInput, orderBy: CateringWFTransitionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CateringWFTransition!]
  priceLists(where: CPriceListWhereInput, orderBy: CPriceListOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CPriceList!]
  isPriceListAvailable: Boolean
  msTasks(where: MsTaskWhereInput, orderBy: MsTaskOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [MsTask!]
  isInvoiced: Boolean
  isChargeableCancellation: Boolean
  isMenuSent: Boolean
  alertPriority: Int
  alertStatus: String
  alertTooltips: String
  correlationId: String
}

type CateringTaskConnection {
  pageInfo: PageInfo!
  edges: [CateringTaskEdge]!
  aggregate: AggregateCateringTask!
}

input CateringTaskCreateInput {
  coreId: String!
  flight: CFlightLegCreateOneInput
  assignedTo: CPersonCreateOneInput
  _createdAt: DateTime
  modifiedAt: DateTime
  modifiedBy: CPersonCreateOneInput
  dueDate: DateTime
  status: String
  alerts: CAlertCreateManyWithoutTaskInput
  proposal: ProposalCreateOneWithoutTaskInput
  pinned: Boolean
  removed: Boolean
  additionalFlightLegs: CFlightLegCreateManyInput
  notes: CateringTaskNoteCreateManyWithoutTaskInput
  transitions: CateringWFTransitionCreateManyWithoutTaskInput
  priceLists: CPriceListCreateManyInput
  isPriceListAvailable: Boolean
  msTasks: MsTaskCreateManyWithoutTaskInput
  isInvoiced: Boolean
  isChargeableCancellation: Boolean
  isMenuSent: Boolean
  alertPriority: Int
  alertStatus: String
  alertTooltips: String
  correlationId: String
}

input CateringTaskCreateOneWithoutAlertsInput {
  create: CateringTaskCreateWithoutAlertsInput
  connect: CateringTaskWhereUniqueInput
}

input CateringTaskCreateOneWithoutMsTasksInput {
  create: CateringTaskCreateWithoutMsTasksInput
  connect: CateringTaskWhereUniqueInput
}

input CateringTaskCreateOneWithoutNotesInput {
  create: CateringTaskCreateWithoutNotesInput
  connect: CateringTaskWhereUniqueInput
}

input CateringTaskCreateOneWithoutProposalInput {
  create: CateringTaskCreateWithoutProposalInput
  connect: CateringTaskWhereUniqueInput
}

input CateringTaskCreateOneWithoutTransitionsInput {
  create: CateringTaskCreateWithoutTransitionsInput
  connect: CateringTaskWhereUniqueInput
}

input CateringTaskCreateWithoutAlertsInput {
  coreId: String!
  flight: CFlightLegCreateOneInput
  assignedTo: CPersonCreateOneInput
  _createdAt: DateTime
  modifiedAt: DateTime
  modifiedBy: CPersonCreateOneInput
  dueDate: DateTime
  status: String
  proposal: ProposalCreateOneWithoutTaskInput
  pinned: Boolean
  removed: Boolean
  additionalFlightLegs: CFlightLegCreateManyInput
  notes: CateringTaskNoteCreateManyWithoutTaskInput
  transitions: CateringWFTransitionCreateManyWithoutTaskInput
  priceLists: CPriceListCreateManyInput
  isPriceListAvailable: Boolean
  msTasks: MsTaskCreateManyWithoutTaskInput
  isInvoiced: Boolean
  isChargeableCancellation: Boolean
  isMenuSent: Boolean
  alertPriority: Int
  alertStatus: String
  alertTooltips: String
  correlationId: String
}

input CateringTaskCreateWithoutMsTasksInput {
  coreId: String!
  flight: CFlightLegCreateOneInput
  assignedTo: CPersonCreateOneInput
  _createdAt: DateTime
  modifiedAt: DateTime
  modifiedBy: CPersonCreateOneInput
  dueDate: DateTime
  status: String
  alerts: CAlertCreateManyWithoutTaskInput
  proposal: ProposalCreateOneWithoutTaskInput
  pinned: Boolean
  removed: Boolean
  additionalFlightLegs: CFlightLegCreateManyInput
  notes: CateringTaskNoteCreateManyWithoutTaskInput
  transitions: CateringWFTransitionCreateManyWithoutTaskInput
  priceLists: CPriceListCreateManyInput
  isPriceListAvailable: Boolean
  isInvoiced: Boolean
  isChargeableCancellation: Boolean
  isMenuSent: Boolean
  alertPriority: Int
  alertStatus: String
  alertTooltips: String
  correlationId: String
}

input CateringTaskCreateWithoutNotesInput {
  coreId: String!
  flight: CFlightLegCreateOneInput
  assignedTo: CPersonCreateOneInput
  _createdAt: DateTime
  modifiedAt: DateTime
  modifiedBy: CPersonCreateOneInput
  dueDate: DateTime
  status: String
  alerts: CAlertCreateManyWithoutTaskInput
  proposal: ProposalCreateOneWithoutTaskInput
  pinned: Boolean
  removed: Boolean
  additionalFlightLegs: CFlightLegCreateManyInput
  transitions: CateringWFTransitionCreateManyWithoutTaskInput
  priceLists: CPriceListCreateManyInput
  isPriceListAvailable: Boolean
  msTasks: MsTaskCreateManyWithoutTaskInput
  isInvoiced: Boolean
  isChargeableCancellation: Boolean
  isMenuSent: Boolean
  alertPriority: Int
  alertStatus: String
  alertTooltips: String
  correlationId: String
}

input CateringTaskCreateWithoutProposalInput {
  coreId: String!
  flight: CFlightLegCreateOneInput
  assignedTo: CPersonCreateOneInput
  _createdAt: DateTime
  modifiedAt: DateTime
  modifiedBy: CPersonCreateOneInput
  dueDate: DateTime
  status: String
  alerts: CAlertCreateManyWithoutTaskInput
  pinned: Boolean
  removed: Boolean
  additionalFlightLegs: CFlightLegCreateManyInput
  notes: CateringTaskNoteCreateManyWithoutTaskInput
  transitions: CateringWFTransitionCreateManyWithoutTaskInput
  priceLists: CPriceListCreateManyInput
  isPriceListAvailable: Boolean
  msTasks: MsTaskCreateManyWithoutTaskInput
  isInvoiced: Boolean
  isChargeableCancellation: Boolean
  isMenuSent: Boolean
  alertPriority: Int
  alertStatus: String
  alertTooltips: String
  correlationId: String
}

input CateringTaskCreateWithoutTransitionsInput {
  coreId: String!
  flight: CFlightLegCreateOneInput
  assignedTo: CPersonCreateOneInput
  _createdAt: DateTime
  modifiedAt: DateTime
  modifiedBy: CPersonCreateOneInput
  dueDate: DateTime
  status: String
  alerts: CAlertCreateManyWithoutTaskInput
  proposal: ProposalCreateOneWithoutTaskInput
  pinned: Boolean
  removed: Boolean
  additionalFlightLegs: CFlightLegCreateManyInput
  notes: CateringTaskNoteCreateManyWithoutTaskInput
  priceLists: CPriceListCreateManyInput
  isPriceListAvailable: Boolean
  msTasks: MsTaskCreateManyWithoutTaskInput
  isInvoiced: Boolean
  isChargeableCancellation: Boolean
  isMenuSent: Boolean
  alertPriority: Int
  alertStatus: String
  alertTooltips: String
  correlationId: String
}

type CateringTaskEdge {
  node: CateringTask!
  cursor: String!
}

type CateringTaskNote {
  id: ID!
  coreId: String!
  note: String
  task: CateringTask
  createdBy: CPerson
  _createdAt: DateTime
}

type CateringTaskNoteConnection {
  pageInfo: PageInfo!
  edges: [CateringTaskNoteEdge]!
  aggregate: AggregateCateringTaskNote!
}

input CateringTaskNoteCreateInput {
  coreId: String!
  note: String
  task: CateringTaskCreateOneWithoutNotesInput
  createdBy: CPersonCreateOneInput
  _createdAt: DateTime
}

input CateringTaskNoteCreateManyWithoutTaskInput {
  create: [CateringTaskNoteCreateWithoutTaskInput!]
  connect: [CateringTaskNoteWhereUniqueInput!]
}

input CateringTaskNoteCreateWithoutTaskInput {
  coreId: String!
  note: String
  createdBy: CPersonCreateOneInput
  _createdAt: DateTime
}

type CateringTaskNoteEdge {
  node: CateringTaskNote!
  cursor: String!
}

enum CateringTaskNoteOrderByInput {
  id_ASC
  id_DESC
  coreId_ASC
  coreId_DESC
  note_ASC
  note_DESC
  _createdAt_ASC
  _createdAt_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type CateringTaskNotePreviousValues {
  id: ID!
  coreId: String!
  note: String
  _createdAt: DateTime
}

input CateringTaskNoteScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  coreId: String
  coreId_not: String
  coreId_in: [String!]
  coreId_not_in: [String!]
  coreId_lt: String
  coreId_lte: String
  coreId_gt: String
  coreId_gte: String
  coreId_contains: String
  coreId_not_contains: String
  coreId_starts_with: String
  coreId_not_starts_with: String
  coreId_ends_with: String
  coreId_not_ends_with: String
  note: String
  note_not: String
  note_in: [String!]
  note_not_in: [String!]
  note_lt: String
  note_lte: String
  note_gt: String
  note_gte: String
  note_contains: String
  note_not_contains: String
  note_starts_with: String
  note_not_starts_with: String
  note_ends_with: String
  note_not_ends_with: String
  _createdAt: DateTime
  _createdAt_not: DateTime
  _createdAt_in: [DateTime!]
  _createdAt_not_in: [DateTime!]
  _createdAt_lt: DateTime
  _createdAt_lte: DateTime
  _createdAt_gt: DateTime
  _createdAt_gte: DateTime
  AND: [CateringTaskNoteScalarWhereInput!]
  OR: [CateringTaskNoteScalarWhereInput!]
  NOT: [CateringTaskNoteScalarWhereInput!]
}

type CateringTaskNoteSubscriptionPayload {
  mutation: MutationType!
  node: CateringTaskNote
  updatedFields: [String!]
  previousValues: CateringTaskNotePreviousValues
}

input CateringTaskNoteSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CateringTaskNoteWhereInput
  AND: [CateringTaskNoteSubscriptionWhereInput!]
  OR: [CateringTaskNoteSubscriptionWhereInput!]
  NOT: [CateringTaskNoteSubscriptionWhereInput!]
}

input CateringTaskNoteUpdateInput {
  coreId: String
  note: String
  task: CateringTaskUpdateOneWithoutNotesInput
  createdBy: CPersonUpdateOneInput
  _createdAt: DateTime
}

input CateringTaskNoteUpdateManyDataInput {
  coreId: String
  note: String
  _createdAt: DateTime
}

input CateringTaskNoteUpdateManyMutationInput {
  coreId: String
  note: String
  _createdAt: DateTime
}

input CateringTaskNoteUpdateManyWithoutTaskInput {
  create: [CateringTaskNoteCreateWithoutTaskInput!]
  delete: [CateringTaskNoteWhereUniqueInput!]
  connect: [CateringTaskNoteWhereUniqueInput!]
  set: [CateringTaskNoteWhereUniqueInput!]
  disconnect: [CateringTaskNoteWhereUniqueInput!]
  update: [CateringTaskNoteUpdateWithWhereUniqueWithoutTaskInput!]
  upsert: [CateringTaskNoteUpsertWithWhereUniqueWithoutTaskInput!]
  deleteMany: [CateringTaskNoteScalarWhereInput!]
  updateMany: [CateringTaskNoteUpdateManyWithWhereNestedInput!]
}

input CateringTaskNoteUpdateManyWithWhereNestedInput {
  where: CateringTaskNoteScalarWhereInput!
  data: CateringTaskNoteUpdateManyDataInput!
}

input CateringTaskNoteUpdateWithoutTaskDataInput {
  coreId: String
  note: String
  createdBy: CPersonUpdateOneInput
  _createdAt: DateTime
}

input CateringTaskNoteUpdateWithWhereUniqueWithoutTaskInput {
  where: CateringTaskNoteWhereUniqueInput!
  data: CateringTaskNoteUpdateWithoutTaskDataInput!
}

input CateringTaskNoteUpsertWithWhereUniqueWithoutTaskInput {
  where: CateringTaskNoteWhereUniqueInput!
  update: CateringTaskNoteUpdateWithoutTaskDataInput!
  create: CateringTaskNoteCreateWithoutTaskInput!
}

input CateringTaskNoteWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  coreId: String
  coreId_not: String
  coreId_in: [String!]
  coreId_not_in: [String!]
  coreId_lt: String
  coreId_lte: String
  coreId_gt: String
  coreId_gte: String
  coreId_contains: String
  coreId_not_contains: String
  coreId_starts_with: String
  coreId_not_starts_with: String
  coreId_ends_with: String
  coreId_not_ends_with: String
  note: String
  note_not: String
  note_in: [String!]
  note_not_in: [String!]
  note_lt: String
  note_lte: String
  note_gt: String
  note_gte: String
  note_contains: String
  note_not_contains: String
  note_starts_with: String
  note_not_starts_with: String
  note_ends_with: String
  note_not_ends_with: String
  task: CateringTaskWhereInput
  createdBy: CPersonWhereInput
  _createdAt: DateTime
  _createdAt_not: DateTime
  _createdAt_in: [DateTime!]
  _createdAt_not_in: [DateTime!]
  _createdAt_lt: DateTime
  _createdAt_lte: DateTime
  _createdAt_gt: DateTime
  _createdAt_gte: DateTime
  AND: [CateringTaskNoteWhereInput!]
  OR: [CateringTaskNoteWhereInput!]
  NOT: [CateringTaskNoteWhereInput!]
}

input CateringTaskNoteWhereUniqueInput {
  id: ID
  coreId: String
}

enum CateringTaskOrderByInput {
  id_ASC
  id_DESC
  coreId_ASC
  coreId_DESC
  _createdAt_ASC
  _createdAt_DESC
  modifiedAt_ASC
  modifiedAt_DESC
  dueDate_ASC
  dueDate_DESC
  status_ASC
  status_DESC
  pinned_ASC
  pinned_DESC
  removed_ASC
  removed_DESC
  isPriceListAvailable_ASC
  isPriceListAvailable_DESC
  isInvoiced_ASC
  isInvoiced_DESC
  isChargeableCancellation_ASC
  isChargeableCancellation_DESC
  isMenuSent_ASC
  isMenuSent_DESC
  alertPriority_ASC
  alertPriority_DESC
  alertStatus_ASC
  alertStatus_DESC
  alertTooltips_ASC
  alertTooltips_DESC
  correlationId_ASC
  correlationId_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type CateringTaskPreviousValues {
  id: ID!
  coreId: String!
  _createdAt: DateTime
  modifiedAt: DateTime
  dueDate: DateTime
  status: String
  pinned: Boolean
  removed: Boolean
  isPriceListAvailable: Boolean
  isInvoiced: Boolean
  isChargeableCancellation: Boolean
  isMenuSent: Boolean
  alertPriority: Int
  alertStatus: String
  alertTooltips: String
  correlationId: String
}

type CateringTaskSubscriptionPayload {
  mutation: MutationType!
  node: CateringTask
  updatedFields: [String!]
  previousValues: CateringTaskPreviousValues
}

input CateringTaskSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CateringTaskWhereInput
  AND: [CateringTaskSubscriptionWhereInput!]
  OR: [CateringTaskSubscriptionWhereInput!]
  NOT: [CateringTaskSubscriptionWhereInput!]
}

input CateringTaskUpdateInput {
  coreId: String
  flight: CFlightLegUpdateOneInput
  assignedTo: CPersonUpdateOneInput
  _createdAt: DateTime
  modifiedAt: DateTime
  modifiedBy: CPersonUpdateOneInput
  dueDate: DateTime
  status: String
  alerts: CAlertUpdateManyWithoutTaskInput
  proposal: ProposalUpdateOneWithoutTaskInput
  pinned: Boolean
  removed: Boolean
  additionalFlightLegs: CFlightLegUpdateManyInput
  notes: CateringTaskNoteUpdateManyWithoutTaskInput
  transitions: CateringWFTransitionUpdateManyWithoutTaskInput
  priceLists: CPriceListUpdateManyInput
  isPriceListAvailable: Boolean
  msTasks: MsTaskUpdateManyWithoutTaskInput
  isInvoiced: Boolean
  isChargeableCancellation: Boolean
  isMenuSent: Boolean
  alertPriority: Int
  alertStatus: String
  alertTooltips: String
  correlationId: String
}

input CateringTaskUpdateManyMutationInput {
  coreId: String
  _createdAt: DateTime
  modifiedAt: DateTime
  dueDate: DateTime
  status: String
  pinned: Boolean
  removed: Boolean
  isPriceListAvailable: Boolean
  isInvoiced: Boolean
  isChargeableCancellation: Boolean
  isMenuSent: Boolean
  alertPriority: Int
  alertStatus: String
  alertTooltips: String
  correlationId: String
}

input CateringTaskUpdateOneWithoutAlertsInput {
  create: CateringTaskCreateWithoutAlertsInput
  update: CateringTaskUpdateWithoutAlertsDataInput
  upsert: CateringTaskUpsertWithoutAlertsInput
  delete: Boolean
  disconnect: Boolean
  connect: CateringTaskWhereUniqueInput
}

input CateringTaskUpdateOneWithoutMsTasksInput {
  create: CateringTaskCreateWithoutMsTasksInput
  update: CateringTaskUpdateWithoutMsTasksDataInput
  upsert: CateringTaskUpsertWithoutMsTasksInput
  delete: Boolean
  disconnect: Boolean
  connect: CateringTaskWhereUniqueInput
}

input CateringTaskUpdateOneWithoutNotesInput {
  create: CateringTaskCreateWithoutNotesInput
  update: CateringTaskUpdateWithoutNotesDataInput
  upsert: CateringTaskUpsertWithoutNotesInput
  delete: Boolean
  disconnect: Boolean
  connect: CateringTaskWhereUniqueInput
}

input CateringTaskUpdateOneWithoutProposalInput {
  create: CateringTaskCreateWithoutProposalInput
  update: CateringTaskUpdateWithoutProposalDataInput
  upsert: CateringTaskUpsertWithoutProposalInput
  delete: Boolean
  disconnect: Boolean
  connect: CateringTaskWhereUniqueInput
}

input CateringTaskUpdateOneWithoutTransitionsInput {
  create: CateringTaskCreateWithoutTransitionsInput
  update: CateringTaskUpdateWithoutTransitionsDataInput
  upsert: CateringTaskUpsertWithoutTransitionsInput
  delete: Boolean
  disconnect: Boolean
  connect: CateringTaskWhereUniqueInput
}

input CateringTaskUpdateWithoutAlertsDataInput {
  coreId: String
  flight: CFlightLegUpdateOneInput
  assignedTo: CPersonUpdateOneInput
  _createdAt: DateTime
  modifiedAt: DateTime
  modifiedBy: CPersonUpdateOneInput
  dueDate: DateTime
  status: String
  proposal: ProposalUpdateOneWithoutTaskInput
  pinned: Boolean
  removed: Boolean
  additionalFlightLegs: CFlightLegUpdateManyInput
  notes: CateringTaskNoteUpdateManyWithoutTaskInput
  transitions: CateringWFTransitionUpdateManyWithoutTaskInput
  priceLists: CPriceListUpdateManyInput
  isPriceListAvailable: Boolean
  msTasks: MsTaskUpdateManyWithoutTaskInput
  isInvoiced: Boolean
  isChargeableCancellation: Boolean
  isMenuSent: Boolean
  alertPriority: Int
  alertStatus: String
  alertTooltips: String
  correlationId: String
}

input CateringTaskUpdateWithoutMsTasksDataInput {
  coreId: String
  flight: CFlightLegUpdateOneInput
  assignedTo: CPersonUpdateOneInput
  _createdAt: DateTime
  modifiedAt: DateTime
  modifiedBy: CPersonUpdateOneInput
  dueDate: DateTime
  status: String
  alerts: CAlertUpdateManyWithoutTaskInput
  proposal: ProposalUpdateOneWithoutTaskInput
  pinned: Boolean
  removed: Boolean
  additionalFlightLegs: CFlightLegUpdateManyInput
  notes: CateringTaskNoteUpdateManyWithoutTaskInput
  transitions: CateringWFTransitionUpdateManyWithoutTaskInput
  priceLists: CPriceListUpdateManyInput
  isPriceListAvailable: Boolean
  isInvoiced: Boolean
  isChargeableCancellation: Boolean
  isMenuSent: Boolean
  alertPriority: Int
  alertStatus: String
  alertTooltips: String
  correlationId: String
}

input CateringTaskUpdateWithoutNotesDataInput {
  coreId: String
  flight: CFlightLegUpdateOneInput
  assignedTo: CPersonUpdateOneInput
  _createdAt: DateTime
  modifiedAt: DateTime
  modifiedBy: CPersonUpdateOneInput
  dueDate: DateTime
  status: String
  alerts: CAlertUpdateManyWithoutTaskInput
  proposal: ProposalUpdateOneWithoutTaskInput
  pinned: Boolean
  removed: Boolean
  additionalFlightLegs: CFlightLegUpdateManyInput
  transitions: CateringWFTransitionUpdateManyWithoutTaskInput
  priceLists: CPriceListUpdateManyInput
  isPriceListAvailable: Boolean
  msTasks: MsTaskUpdateManyWithoutTaskInput
  isInvoiced: Boolean
  isChargeableCancellation: Boolean
  isMenuSent: Boolean
  alertPriority: Int
  alertStatus: String
  alertTooltips: String
  correlationId: String
}

input CateringTaskUpdateWithoutProposalDataInput {
  coreId: String
  flight: CFlightLegUpdateOneInput
  assignedTo: CPersonUpdateOneInput
  _createdAt: DateTime
  modifiedAt: DateTime
  modifiedBy: CPersonUpdateOneInput
  dueDate: DateTime
  status: String
  alerts: CAlertUpdateManyWithoutTaskInput
  pinned: Boolean
  removed: Boolean
  additionalFlightLegs: CFlightLegUpdateManyInput
  notes: CateringTaskNoteUpdateManyWithoutTaskInput
  transitions: CateringWFTransitionUpdateManyWithoutTaskInput
  priceLists: CPriceListUpdateManyInput
  isPriceListAvailable: Boolean
  msTasks: MsTaskUpdateManyWithoutTaskInput
  isInvoiced: Boolean
  isChargeableCancellation: Boolean
  isMenuSent: Boolean
  alertPriority: Int
  alertStatus: String
  alertTooltips: String
  correlationId: String
}

input CateringTaskUpdateWithoutTransitionsDataInput {
  coreId: String
  flight: CFlightLegUpdateOneInput
  assignedTo: CPersonUpdateOneInput
  _createdAt: DateTime
  modifiedAt: DateTime
  modifiedBy: CPersonUpdateOneInput
  dueDate: DateTime
  status: String
  alerts: CAlertUpdateManyWithoutTaskInput
  proposal: ProposalUpdateOneWithoutTaskInput
  pinned: Boolean
  removed: Boolean
  additionalFlightLegs: CFlightLegUpdateManyInput
  notes: CateringTaskNoteUpdateManyWithoutTaskInput
  priceLists: CPriceListUpdateManyInput
  isPriceListAvailable: Boolean
  msTasks: MsTaskUpdateManyWithoutTaskInput
  isInvoiced: Boolean
  isChargeableCancellation: Boolean
  isMenuSent: Boolean
  alertPriority: Int
  alertStatus: String
  alertTooltips: String
  correlationId: String
}

input CateringTaskUpsertWithoutAlertsInput {
  update: CateringTaskUpdateWithoutAlertsDataInput!
  create: CateringTaskCreateWithoutAlertsInput!
}

input CateringTaskUpsertWithoutMsTasksInput {
  update: CateringTaskUpdateWithoutMsTasksDataInput!
  create: CateringTaskCreateWithoutMsTasksInput!
}

input CateringTaskUpsertWithoutNotesInput {
  update: CateringTaskUpdateWithoutNotesDataInput!
  create: CateringTaskCreateWithoutNotesInput!
}

input CateringTaskUpsertWithoutProposalInput {
  update: CateringTaskUpdateWithoutProposalDataInput!
  create: CateringTaskCreateWithoutProposalInput!
}

input CateringTaskUpsertWithoutTransitionsInput {
  update: CateringTaskUpdateWithoutTransitionsDataInput!
  create: CateringTaskCreateWithoutTransitionsInput!
}

input CateringTaskWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  coreId: String
  coreId_not: String
  coreId_in: [String!]
  coreId_not_in: [String!]
  coreId_lt: String
  coreId_lte: String
  coreId_gt: String
  coreId_gte: String
  coreId_contains: String
  coreId_not_contains: String
  coreId_starts_with: String
  coreId_not_starts_with: String
  coreId_ends_with: String
  coreId_not_ends_with: String
  flight: CFlightLegWhereInput
  assignedTo: CPersonWhereInput
  _createdAt: DateTime
  _createdAt_not: DateTime
  _createdAt_in: [DateTime!]
  _createdAt_not_in: [DateTime!]
  _createdAt_lt: DateTime
  _createdAt_lte: DateTime
  _createdAt_gt: DateTime
  _createdAt_gte: DateTime
  modifiedAt: DateTime
  modifiedAt_not: DateTime
  modifiedAt_in: [DateTime!]
  modifiedAt_not_in: [DateTime!]
  modifiedAt_lt: DateTime
  modifiedAt_lte: DateTime
  modifiedAt_gt: DateTime
  modifiedAt_gte: DateTime
  modifiedBy: CPersonWhereInput
  dueDate: DateTime
  dueDate_not: DateTime
  dueDate_in: [DateTime!]
  dueDate_not_in: [DateTime!]
  dueDate_lt: DateTime
  dueDate_lte: DateTime
  dueDate_gt: DateTime
  dueDate_gte: DateTime
  status: String
  status_not: String
  status_in: [String!]
  status_not_in: [String!]
  status_lt: String
  status_lte: String
  status_gt: String
  status_gte: String
  status_contains: String
  status_not_contains: String
  status_starts_with: String
  status_not_starts_with: String
  status_ends_with: String
  status_not_ends_with: String
  alerts_every: CAlertWhereInput
  alerts_some: CAlertWhereInput
  alerts_none: CAlertWhereInput
  proposal: ProposalWhereInput
  pinned: Boolean
  pinned_not: Boolean
  removed: Boolean
  removed_not: Boolean
  additionalFlightLegs_every: CFlightLegWhereInput
  additionalFlightLegs_some: CFlightLegWhereInput
  additionalFlightLegs_none: CFlightLegWhereInput
  notes_every: CateringTaskNoteWhereInput
  notes_some: CateringTaskNoteWhereInput
  notes_none: CateringTaskNoteWhereInput
  transitions_every: CateringWFTransitionWhereInput
  transitions_some: CateringWFTransitionWhereInput
  transitions_none: CateringWFTransitionWhereInput
  priceLists_every: CPriceListWhereInput
  priceLists_some: CPriceListWhereInput
  priceLists_none: CPriceListWhereInput
  isPriceListAvailable: Boolean
  isPriceListAvailable_not: Boolean
  msTasks_every: MsTaskWhereInput
  msTasks_some: MsTaskWhereInput
  msTasks_none: MsTaskWhereInput
  isInvoiced: Boolean
  isInvoiced_not: Boolean
  isChargeableCancellation: Boolean
  isChargeableCancellation_not: Boolean
  isMenuSent: Boolean
  isMenuSent_not: Boolean
  alertPriority: Int
  alertPriority_not: Int
  alertPriority_in: [Int!]
  alertPriority_not_in: [Int!]
  alertPriority_lt: Int
  alertPriority_lte: Int
  alertPriority_gt: Int
  alertPriority_gte: Int
  alertStatus: String
  alertStatus_not: String
  alertStatus_in: [String!]
  alertStatus_not_in: [String!]
  alertStatus_lt: String
  alertStatus_lte: String
  alertStatus_gt: String
  alertStatus_gte: String
  alertStatus_contains: String
  alertStatus_not_contains: String
  alertStatus_starts_with: String
  alertStatus_not_starts_with: String
  alertStatus_ends_with: String
  alertStatus_not_ends_with: String
  alertTooltips: String
  alertTooltips_not: String
  alertTooltips_in: [String!]
  alertTooltips_not_in: [String!]
  alertTooltips_lt: String
  alertTooltips_lte: String
  alertTooltips_gt: String
  alertTooltips_gte: String
  alertTooltips_contains: String
  alertTooltips_not_contains: String
  alertTooltips_starts_with: String
  alertTooltips_not_starts_with: String
  alertTooltips_ends_with: String
  alertTooltips_not_ends_with: String
  correlationId: String
  correlationId_not: String
  correlationId_in: [String!]
  correlationId_not_in: [String!]
  correlationId_lt: String
  correlationId_lte: String
  correlationId_gt: String
  correlationId_gte: String
  correlationId_contains: String
  correlationId_not_contains: String
  correlationId_starts_with: String
  correlationId_not_starts_with: String
  correlationId_ends_with: String
  correlationId_not_ends_with: String
  AND: [CateringTaskWhereInput!]
  OR: [CateringTaskWhereInput!]
  NOT: [CateringTaskWhereInput!]
}

input CateringTaskWhereUniqueInput {
  id: ID
  coreId: String
}

type CateringUnit {
  id: ID!
  coreId: String!
  name: String
  description: String
  isActive: Boolean
}

type CateringUnitConnection {
  pageInfo: PageInfo!
  edges: [CateringUnitEdge]!
  aggregate: AggregateCateringUnit!
}

input CateringUnitCreateInput {
  coreId: String!
  name: String
  description: String
  isActive: Boolean
}

input CateringUnitCreateOneInput {
  create: CateringUnitCreateInput
  connect: CateringUnitWhereUniqueInput
}

type CateringUnitEdge {
  node: CateringUnit!
  cursor: String!
}

enum CateringUnitOrderByInput {
  id_ASC
  id_DESC
  coreId_ASC
  coreId_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  isActive_ASC
  isActive_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type CateringUnitPreviousValues {
  id: ID!
  coreId: String!
  name: String
  description: String
  isActive: Boolean
}

type CateringUnitSubscriptionPayload {
  mutation: MutationType!
  node: CateringUnit
  updatedFields: [String!]
  previousValues: CateringUnitPreviousValues
}

input CateringUnitSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CateringUnitWhereInput
  AND: [CateringUnitSubscriptionWhereInput!]
  OR: [CateringUnitSubscriptionWhereInput!]
  NOT: [CateringUnitSubscriptionWhereInput!]
}

input CateringUnitUpdateDataInput {
  coreId: String
  name: String
  description: String
  isActive: Boolean
}

input CateringUnitUpdateInput {
  coreId: String
  name: String
  description: String
  isActive: Boolean
}

input CateringUnitUpdateManyMutationInput {
  coreId: String
  name: String
  description: String
  isActive: Boolean
}

input CateringUnitUpdateOneInput {
  create: CateringUnitCreateInput
  update: CateringUnitUpdateDataInput
  upsert: CateringUnitUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: CateringUnitWhereUniqueInput
}

input CateringUnitUpsertNestedInput {
  update: CateringUnitUpdateDataInput!
  create: CateringUnitCreateInput!
}

input CateringUnitWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  coreId: String
  coreId_not: String
  coreId_in: [String!]
  coreId_not_in: [String!]
  coreId_lt: String
  coreId_lte: String
  coreId_gt: String
  coreId_gte: String
  coreId_contains: String
  coreId_not_contains: String
  coreId_starts_with: String
  coreId_not_starts_with: String
  coreId_ends_with: String
  coreId_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  isActive: Boolean
  isActive_not: Boolean
  AND: [CateringUnitWhereInput!]
  OR: [CateringUnitWhereInput!]
  NOT: [CateringUnitWhereInput!]
}

input CateringUnitWhereUniqueInput {
  id: ID
  coreId: String
}

type CateringWFTransition {
  id: ID!
  coreId: String!
  initialState: String
  finalState: String
  initiatedBy: CPerson
  initiatedAt: DateTime
  note: String
  task: CateringTask
}

type CateringWFTransitionConnection {
  pageInfo: PageInfo!
  edges: [CateringWFTransitionEdge]!
  aggregate: AggregateCateringWFTransition!
}

input CateringWFTransitionCreateInput {
  coreId: String!
  initialState: String
  finalState: String
  initiatedBy: CPersonCreateOneInput
  initiatedAt: DateTime
  note: String
  task: CateringTaskCreateOneWithoutTransitionsInput
}

input CateringWFTransitionCreateManyWithoutTaskInput {
  create: [CateringWFTransitionCreateWithoutTaskInput!]
  connect: [CateringWFTransitionWhereUniqueInput!]
}

input CateringWFTransitionCreateWithoutTaskInput {
  coreId: String!
  initialState: String
  finalState: String
  initiatedBy: CPersonCreateOneInput
  initiatedAt: DateTime
  note: String
}

type CateringWFTransitionEdge {
  node: CateringWFTransition!
  cursor: String!
}

enum CateringWFTransitionOrderByInput {
  id_ASC
  id_DESC
  coreId_ASC
  coreId_DESC
  initialState_ASC
  initialState_DESC
  finalState_ASC
  finalState_DESC
  initiatedAt_ASC
  initiatedAt_DESC
  note_ASC
  note_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type CateringWFTransitionPreviousValues {
  id: ID!
  coreId: String!
  initialState: String
  finalState: String
  initiatedAt: DateTime
  note: String
}

input CateringWFTransitionScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  coreId: String
  coreId_not: String
  coreId_in: [String!]
  coreId_not_in: [String!]
  coreId_lt: String
  coreId_lte: String
  coreId_gt: String
  coreId_gte: String
  coreId_contains: String
  coreId_not_contains: String
  coreId_starts_with: String
  coreId_not_starts_with: String
  coreId_ends_with: String
  coreId_not_ends_with: String
  initialState: String
  initialState_not: String
  initialState_in: [String!]
  initialState_not_in: [String!]
  initialState_lt: String
  initialState_lte: String
  initialState_gt: String
  initialState_gte: String
  initialState_contains: String
  initialState_not_contains: String
  initialState_starts_with: String
  initialState_not_starts_with: String
  initialState_ends_with: String
  initialState_not_ends_with: String
  finalState: String
  finalState_not: String
  finalState_in: [String!]
  finalState_not_in: [String!]
  finalState_lt: String
  finalState_lte: String
  finalState_gt: String
  finalState_gte: String
  finalState_contains: String
  finalState_not_contains: String
  finalState_starts_with: String
  finalState_not_starts_with: String
  finalState_ends_with: String
  finalState_not_ends_with: String
  initiatedAt: DateTime
  initiatedAt_not: DateTime
  initiatedAt_in: [DateTime!]
  initiatedAt_not_in: [DateTime!]
  initiatedAt_lt: DateTime
  initiatedAt_lte: DateTime
  initiatedAt_gt: DateTime
  initiatedAt_gte: DateTime
  note: String
  note_not: String
  note_in: [String!]
  note_not_in: [String!]
  note_lt: String
  note_lte: String
  note_gt: String
  note_gte: String
  note_contains: String
  note_not_contains: String
  note_starts_with: String
  note_not_starts_with: String
  note_ends_with: String
  note_not_ends_with: String
  AND: [CateringWFTransitionScalarWhereInput!]
  OR: [CateringWFTransitionScalarWhereInput!]
  NOT: [CateringWFTransitionScalarWhereInput!]
}

type CateringWFTransitionSubscriptionPayload {
  mutation: MutationType!
  node: CateringWFTransition
  updatedFields: [String!]
  previousValues: CateringWFTransitionPreviousValues
}

input CateringWFTransitionSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CateringWFTransitionWhereInput
  AND: [CateringWFTransitionSubscriptionWhereInput!]
  OR: [CateringWFTransitionSubscriptionWhereInput!]
  NOT: [CateringWFTransitionSubscriptionWhereInput!]
}

input CateringWFTransitionUpdateInput {
  coreId: String
  initialState: String
  finalState: String
  initiatedBy: CPersonUpdateOneInput
  initiatedAt: DateTime
  note: String
  task: CateringTaskUpdateOneWithoutTransitionsInput
}

input CateringWFTransitionUpdateManyDataInput {
  coreId: String
  initialState: String
  finalState: String
  initiatedAt: DateTime
  note: String
}

input CateringWFTransitionUpdateManyMutationInput {
  coreId: String
  initialState: String
  finalState: String
  initiatedAt: DateTime
  note: String
}

input CateringWFTransitionUpdateManyWithoutTaskInput {
  create: [CateringWFTransitionCreateWithoutTaskInput!]
  delete: [CateringWFTransitionWhereUniqueInput!]
  connect: [CateringWFTransitionWhereUniqueInput!]
  set: [CateringWFTransitionWhereUniqueInput!]
  disconnect: [CateringWFTransitionWhereUniqueInput!]
  update: [CateringWFTransitionUpdateWithWhereUniqueWithoutTaskInput!]
  upsert: [CateringWFTransitionUpsertWithWhereUniqueWithoutTaskInput!]
  deleteMany: [CateringWFTransitionScalarWhereInput!]
  updateMany: [CateringWFTransitionUpdateManyWithWhereNestedInput!]
}

input CateringWFTransitionUpdateManyWithWhereNestedInput {
  where: CateringWFTransitionScalarWhereInput!
  data: CateringWFTransitionUpdateManyDataInput!
}

input CateringWFTransitionUpdateWithoutTaskDataInput {
  coreId: String
  initialState: String
  finalState: String
  initiatedBy: CPersonUpdateOneInput
  initiatedAt: DateTime
  note: String
}

input CateringWFTransitionUpdateWithWhereUniqueWithoutTaskInput {
  where: CateringWFTransitionWhereUniqueInput!
  data: CateringWFTransitionUpdateWithoutTaskDataInput!
}

input CateringWFTransitionUpsertWithWhereUniqueWithoutTaskInput {
  where: CateringWFTransitionWhereUniqueInput!
  update: CateringWFTransitionUpdateWithoutTaskDataInput!
  create: CateringWFTransitionCreateWithoutTaskInput!
}

input CateringWFTransitionWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  coreId: String
  coreId_not: String
  coreId_in: [String!]
  coreId_not_in: [String!]
  coreId_lt: String
  coreId_lte: String
  coreId_gt: String
  coreId_gte: String
  coreId_contains: String
  coreId_not_contains: String
  coreId_starts_with: String
  coreId_not_starts_with: String
  coreId_ends_with: String
  coreId_not_ends_with: String
  initialState: String
  initialState_not: String
  initialState_in: [String!]
  initialState_not_in: [String!]
  initialState_lt: String
  initialState_lte: String
  initialState_gt: String
  initialState_gte: String
  initialState_contains: String
  initialState_not_contains: String
  initialState_starts_with: String
  initialState_not_starts_with: String
  initialState_ends_with: String
  initialState_not_ends_with: String
  finalState: String
  finalState_not: String
  finalState_in: [String!]
  finalState_not_in: [String!]
  finalState_lt: String
  finalState_lte: String
  finalState_gt: String
  finalState_gte: String
  finalState_contains: String
  finalState_not_contains: String
  finalState_starts_with: String
  finalState_not_starts_with: String
  finalState_ends_with: String
  finalState_not_ends_with: String
  initiatedBy: CPersonWhereInput
  initiatedAt: DateTime
  initiatedAt_not: DateTime
  initiatedAt_in: [DateTime!]
  initiatedAt_not_in: [DateTime!]
  initiatedAt_lt: DateTime
  initiatedAt_lte: DateTime
  initiatedAt_gt: DateTime
  initiatedAt_gte: DateTime
  note: String
  note_not: String
  note_in: [String!]
  note_not_in: [String!]
  note_lt: String
  note_lte: String
  note_gt: String
  note_gte: String
  note_contains: String
  note_not_contains: String
  note_starts_with: String
  note_not_starts_with: String
  note_ends_with: String
  note_not_ends_with: String
  task: CateringTaskWhereInput
  AND: [CateringWFTransitionWhereInput!]
  OR: [CateringWFTransitionWhereInput!]
  NOT: [CateringWFTransitionWhereInput!]
}

input CateringWFTransitionWhereUniqueInput {
  id: ID
  coreId: String
}

type CCompany {
  id: ID!
  coreId: String!
  name: String
  note: String
  avoided: Boolean
  createdBy: CPerson
  _createdAt: DateTime
  modifiedBy: CPerson
  modifiedAt: DateTime
  isActive: Boolean
  phoneNumbers(where: CateringCompanyPhoneNumberWhereInput, orderBy: CateringCompanyPhoneNumberOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CateringCompanyPhoneNumber!]
  emailAddresses(where: CateringCompanyEmailWhereInput, orderBy: CateringCompanyEmailOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CateringCompanyEmail!]
  contracts(where: CContractWhereInput, orderBy: CContractOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CContract!]
  contractStartDate: DateTime
  contractEndDate: DateTime
  priceLists(where: CPriceListWhereInput, orderBy: CPriceListOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CPriceList!]
  serviceProviders(where: CServiceProviderWhereInput, orderBy: CServiceProviderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CServiceProvider!]
  cemPerson: CPerson
}

type CCompanyConnection {
  pageInfo: PageInfo!
  edges: [CCompanyEdge]!
  aggregate: AggregateCCompany!
}

input CCompanyCreateInput {
  coreId: String!
  name: String
  note: String
  avoided: Boolean
  createdBy: CPersonCreateOneInput
  _createdAt: DateTime
  modifiedBy: CPersonCreateOneInput
  modifiedAt: DateTime
  isActive: Boolean
  phoneNumbers: CateringCompanyPhoneNumberCreateManyInput
  emailAddresses: CateringCompanyEmailCreateManyInput
  contracts: CContractCreateManyInput
  contractStartDate: DateTime
  contractEndDate: DateTime
  priceLists: CPriceListCreateManyWithoutCompanyInput
  serviceProviders: CServiceProviderCreateManyWithoutCompanyInput
  cemPerson: CPersonCreateOneInput
}

input CCompanyCreateOneInput {
  create: CCompanyCreateInput
  connect: CCompanyWhereUniqueInput
}

input CCompanyCreateOneWithoutPriceListsInput {
  create: CCompanyCreateWithoutPriceListsInput
  connect: CCompanyWhereUniqueInput
}

input CCompanyCreateOneWithoutServiceProvidersInput {
  create: CCompanyCreateWithoutServiceProvidersInput
  connect: CCompanyWhereUniqueInput
}

input CCompanyCreateWithoutPriceListsInput {
  coreId: String!
  name: String
  note: String
  avoided: Boolean
  createdBy: CPersonCreateOneInput
  _createdAt: DateTime
  modifiedBy: CPersonCreateOneInput
  modifiedAt: DateTime
  isActive: Boolean
  phoneNumbers: CateringCompanyPhoneNumberCreateManyInput
  emailAddresses: CateringCompanyEmailCreateManyInput
  contracts: CContractCreateManyInput
  contractStartDate: DateTime
  contractEndDate: DateTime
  serviceProviders: CServiceProviderCreateManyWithoutCompanyInput
  cemPerson: CPersonCreateOneInput
}

input CCompanyCreateWithoutServiceProvidersInput {
  coreId: String!
  name: String
  note: String
  avoided: Boolean
  createdBy: CPersonCreateOneInput
  _createdAt: DateTime
  modifiedBy: CPersonCreateOneInput
  modifiedAt: DateTime
  isActive: Boolean
  phoneNumbers: CateringCompanyPhoneNumberCreateManyInput
  emailAddresses: CateringCompanyEmailCreateManyInput
  contracts: CContractCreateManyInput
  contractStartDate: DateTime
  contractEndDate: DateTime
  priceLists: CPriceListCreateManyWithoutCompanyInput
  cemPerson: CPersonCreateOneInput
}

type CCompanyEdge {
  node: CCompany!
  cursor: String!
}

enum CCompanyOrderByInput {
  id_ASC
  id_DESC
  coreId_ASC
  coreId_DESC
  name_ASC
  name_DESC
  note_ASC
  note_DESC
  avoided_ASC
  avoided_DESC
  _createdAt_ASC
  _createdAt_DESC
  modifiedAt_ASC
  modifiedAt_DESC
  isActive_ASC
  isActive_DESC
  contractStartDate_ASC
  contractStartDate_DESC
  contractEndDate_ASC
  contractEndDate_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type CCompanyPreviousValues {
  id: ID!
  coreId: String!
  name: String
  note: String
  avoided: Boolean
  _createdAt: DateTime
  modifiedAt: DateTime
  isActive: Boolean
  contractStartDate: DateTime
  contractEndDate: DateTime
}

type CCompanySubscriptionPayload {
  mutation: MutationType!
  node: CCompany
  updatedFields: [String!]
  previousValues: CCompanyPreviousValues
}

input CCompanySubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CCompanyWhereInput
  AND: [CCompanySubscriptionWhereInput!]
  OR: [CCompanySubscriptionWhereInput!]
  NOT: [CCompanySubscriptionWhereInput!]
}

input CCompanyUpdateDataInput {
  coreId: String
  name: String
  note: String
  avoided: Boolean
  createdBy: CPersonUpdateOneInput
  _createdAt: DateTime
  modifiedBy: CPersonUpdateOneInput
  modifiedAt: DateTime
  isActive: Boolean
  phoneNumbers: CateringCompanyPhoneNumberUpdateManyInput
  emailAddresses: CateringCompanyEmailUpdateManyInput
  contracts: CContractUpdateManyInput
  contractStartDate: DateTime
  contractEndDate: DateTime
  priceLists: CPriceListUpdateManyWithoutCompanyInput
  serviceProviders: CServiceProviderUpdateManyWithoutCompanyInput
  cemPerson: CPersonUpdateOneInput
}

input CCompanyUpdateInput {
  coreId: String
  name: String
  note: String
  avoided: Boolean
  createdBy: CPersonUpdateOneInput
  _createdAt: DateTime
  modifiedBy: CPersonUpdateOneInput
  modifiedAt: DateTime
  isActive: Boolean
  phoneNumbers: CateringCompanyPhoneNumberUpdateManyInput
  emailAddresses: CateringCompanyEmailUpdateManyInput
  contracts: CContractUpdateManyInput
  contractStartDate: DateTime
  contractEndDate: DateTime
  priceLists: CPriceListUpdateManyWithoutCompanyInput
  serviceProviders: CServiceProviderUpdateManyWithoutCompanyInput
  cemPerson: CPersonUpdateOneInput
}

input CCompanyUpdateManyMutationInput {
  coreId: String
  name: String
  note: String
  avoided: Boolean
  _createdAt: DateTime
  modifiedAt: DateTime
  isActive: Boolean
  contractStartDate: DateTime
  contractEndDate: DateTime
}

input CCompanyUpdateOneInput {
  create: CCompanyCreateInput
  update: CCompanyUpdateDataInput
  upsert: CCompanyUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: CCompanyWhereUniqueInput
}

input CCompanyUpdateOneWithoutPriceListsInput {
  create: CCompanyCreateWithoutPriceListsInput
  update: CCompanyUpdateWithoutPriceListsDataInput
  upsert: CCompanyUpsertWithoutPriceListsInput
  delete: Boolean
  disconnect: Boolean
  connect: CCompanyWhereUniqueInput
}

input CCompanyUpdateOneWithoutServiceProvidersInput {
  create: CCompanyCreateWithoutServiceProvidersInput
  update: CCompanyUpdateWithoutServiceProvidersDataInput
  upsert: CCompanyUpsertWithoutServiceProvidersInput
  delete: Boolean
  disconnect: Boolean
  connect: CCompanyWhereUniqueInput
}

input CCompanyUpdateWithoutPriceListsDataInput {
  coreId: String
  name: String
  note: String
  avoided: Boolean
  createdBy: CPersonUpdateOneInput
  _createdAt: DateTime
  modifiedBy: CPersonUpdateOneInput
  modifiedAt: DateTime
  isActive: Boolean
  phoneNumbers: CateringCompanyPhoneNumberUpdateManyInput
  emailAddresses: CateringCompanyEmailUpdateManyInput
  contracts: CContractUpdateManyInput
  contractStartDate: DateTime
  contractEndDate: DateTime
  serviceProviders: CServiceProviderUpdateManyWithoutCompanyInput
  cemPerson: CPersonUpdateOneInput
}

input CCompanyUpdateWithoutServiceProvidersDataInput {
  coreId: String
  name: String
  note: String
  avoided: Boolean
  createdBy: CPersonUpdateOneInput
  _createdAt: DateTime
  modifiedBy: CPersonUpdateOneInput
  modifiedAt: DateTime
  isActive: Boolean
  phoneNumbers: CateringCompanyPhoneNumberUpdateManyInput
  emailAddresses: CateringCompanyEmailUpdateManyInput
  contracts: CContractUpdateManyInput
  contractStartDate: DateTime
  contractEndDate: DateTime
  priceLists: CPriceListUpdateManyWithoutCompanyInput
  cemPerson: CPersonUpdateOneInput
}

input CCompanyUpsertNestedInput {
  update: CCompanyUpdateDataInput!
  create: CCompanyCreateInput!
}

input CCompanyUpsertWithoutPriceListsInput {
  update: CCompanyUpdateWithoutPriceListsDataInput!
  create: CCompanyCreateWithoutPriceListsInput!
}

input CCompanyUpsertWithoutServiceProvidersInput {
  update: CCompanyUpdateWithoutServiceProvidersDataInput!
  create: CCompanyCreateWithoutServiceProvidersInput!
}

input CCompanyWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  coreId: String
  coreId_not: String
  coreId_in: [String!]
  coreId_not_in: [String!]
  coreId_lt: String
  coreId_lte: String
  coreId_gt: String
  coreId_gte: String
  coreId_contains: String
  coreId_not_contains: String
  coreId_starts_with: String
  coreId_not_starts_with: String
  coreId_ends_with: String
  coreId_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  note: String
  note_not: String
  note_in: [String!]
  note_not_in: [String!]
  note_lt: String
  note_lte: String
  note_gt: String
  note_gte: String
  note_contains: String
  note_not_contains: String
  note_starts_with: String
  note_not_starts_with: String
  note_ends_with: String
  note_not_ends_with: String
  avoided: Boolean
  avoided_not: Boolean
  createdBy: CPersonWhereInput
  _createdAt: DateTime
  _createdAt_not: DateTime
  _createdAt_in: [DateTime!]
  _createdAt_not_in: [DateTime!]
  _createdAt_lt: DateTime
  _createdAt_lte: DateTime
  _createdAt_gt: DateTime
  _createdAt_gte: DateTime
  modifiedBy: CPersonWhereInput
  modifiedAt: DateTime
  modifiedAt_not: DateTime
  modifiedAt_in: [DateTime!]
  modifiedAt_not_in: [DateTime!]
  modifiedAt_lt: DateTime
  modifiedAt_lte: DateTime
  modifiedAt_gt: DateTime
  modifiedAt_gte: DateTime
  isActive: Boolean
  isActive_not: Boolean
  phoneNumbers_every: CateringCompanyPhoneNumberWhereInput
  phoneNumbers_some: CateringCompanyPhoneNumberWhereInput
  phoneNumbers_none: CateringCompanyPhoneNumberWhereInput
  emailAddresses_every: CateringCompanyEmailWhereInput
  emailAddresses_some: CateringCompanyEmailWhereInput
  emailAddresses_none: CateringCompanyEmailWhereInput
  contracts_every: CContractWhereInput
  contracts_some: CContractWhereInput
  contracts_none: CContractWhereInput
  contractStartDate: DateTime
  contractStartDate_not: DateTime
  contractStartDate_in: [DateTime!]
  contractStartDate_not_in: [DateTime!]
  contractStartDate_lt: DateTime
  contractStartDate_lte: DateTime
  contractStartDate_gt: DateTime
  contractStartDate_gte: DateTime
  contractEndDate: DateTime
  contractEndDate_not: DateTime
  contractEndDate_in: [DateTime!]
  contractEndDate_not_in: [DateTime!]
  contractEndDate_lt: DateTime
  contractEndDate_lte: DateTime
  contractEndDate_gt: DateTime
  contractEndDate_gte: DateTime
  priceLists_every: CPriceListWhereInput
  priceLists_some: CPriceListWhereInput
  priceLists_none: CPriceListWhereInput
  serviceProviders_every: CServiceProviderWhereInput
  serviceProviders_some: CServiceProviderWhereInput
  serviceProviders_none: CServiceProviderWhereInput
  cemPerson: CPersonWhereInput
  AND: [CCompanyWhereInput!]
  OR: [CCompanyWhereInput!]
  NOT: [CCompanyWhereInput!]
}

input CCompanyWhereUniqueInput {
  id: ID
  coreId: String
}

type CContract {
  id: ID!
  coreId: String!
  fileName: String
}

type CContractConnection {
  pageInfo: PageInfo!
  edges: [CContractEdge]!
  aggregate: AggregateCContract!
}

input CContractCreateInput {
  coreId: String!
  fileName: String
}

input CContractCreateManyInput {
  create: [CContractCreateInput!]
  connect: [CContractWhereUniqueInput!]
}

type CContractEdge {
  node: CContract!
  cursor: String!
}

enum CContractOrderByInput {
  id_ASC
  id_DESC
  coreId_ASC
  coreId_DESC
  fileName_ASC
  fileName_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type CContractPreviousValues {
  id: ID!
  coreId: String!
  fileName: String
}

input CContractScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  coreId: String
  coreId_not: String
  coreId_in: [String!]
  coreId_not_in: [String!]
  coreId_lt: String
  coreId_lte: String
  coreId_gt: String
  coreId_gte: String
  coreId_contains: String
  coreId_not_contains: String
  coreId_starts_with: String
  coreId_not_starts_with: String
  coreId_ends_with: String
  coreId_not_ends_with: String
  fileName: String
  fileName_not: String
  fileName_in: [String!]
  fileName_not_in: [String!]
  fileName_lt: String
  fileName_lte: String
  fileName_gt: String
  fileName_gte: String
  fileName_contains: String
  fileName_not_contains: String
  fileName_starts_with: String
  fileName_not_starts_with: String
  fileName_ends_with: String
  fileName_not_ends_with: String
  AND: [CContractScalarWhereInput!]
  OR: [CContractScalarWhereInput!]
  NOT: [CContractScalarWhereInput!]
}

type CContractSubscriptionPayload {
  mutation: MutationType!
  node: CContract
  updatedFields: [String!]
  previousValues: CContractPreviousValues
}

input CContractSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CContractWhereInput
  AND: [CContractSubscriptionWhereInput!]
  OR: [CContractSubscriptionWhereInput!]
  NOT: [CContractSubscriptionWhereInput!]
}

input CContractUpdateDataInput {
  coreId: String
  fileName: String
}

input CContractUpdateInput {
  coreId: String
  fileName: String
}

input CContractUpdateManyDataInput {
  coreId: String
  fileName: String
}

input CContractUpdateManyInput {
  create: [CContractCreateInput!]
  update: [CContractUpdateWithWhereUniqueNestedInput!]
  upsert: [CContractUpsertWithWhereUniqueNestedInput!]
  delete: [CContractWhereUniqueInput!]
  connect: [CContractWhereUniqueInput!]
  set: [CContractWhereUniqueInput!]
  disconnect: [CContractWhereUniqueInput!]
  deleteMany: [CContractScalarWhereInput!]
  updateMany: [CContractUpdateManyWithWhereNestedInput!]
}

input CContractUpdateManyMutationInput {
  coreId: String
  fileName: String
}

input CContractUpdateManyWithWhereNestedInput {
  where: CContractScalarWhereInput!
  data: CContractUpdateManyDataInput!
}

input CContractUpdateWithWhereUniqueNestedInput {
  where: CContractWhereUniqueInput!
  data: CContractUpdateDataInput!
}

input CContractUpsertWithWhereUniqueNestedInput {
  where: CContractWhereUniqueInput!
  update: CContractUpdateDataInput!
  create: CContractCreateInput!
}

input CContractWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  coreId: String
  coreId_not: String
  coreId_in: [String!]
  coreId_not_in: [String!]
  coreId_lt: String
  coreId_lte: String
  coreId_gt: String
  coreId_gte: String
  coreId_contains: String
  coreId_not_contains: String
  coreId_starts_with: String
  coreId_not_starts_with: String
  coreId_ends_with: String
  coreId_not_ends_with: String
  fileName: String
  fileName_not: String
  fileName_in: [String!]
  fileName_not_in: [String!]
  fileName_lt: String
  fileName_lte: String
  fileName_gt: String
  fileName_gte: String
  fileName_contains: String
  fileName_not_contains: String
  fileName_starts_with: String
  fileName_not_starts_with: String
  fileName_ends_with: String
  fileName_not_ends_with: String
  AND: [CContractWhereInput!]
  OR: [CContractWhereInput!]
  NOT: [CContractWhereInput!]
}

input CContractWhereUniqueInput {
  id: ID
  coreId: String
}

type CCrew {
  id: ID!
  coreId: String!
  crewMemberCode: String
  crewRole: CCrewRole
  flightLeg: CFlightLeg
  person: CPerson
}

type CCrewConnection {
  pageInfo: PageInfo!
  edges: [CCrewEdge]!
  aggregate: AggregateCCrew!
}

input CCrewCreateInput {
  coreId: String!
  crewMemberCode: String
  crewRole: CCrewRoleCreateOneInput
  flightLeg: CFlightLegCreateOneWithoutCrewsInput
  person: CPersonCreateOneInput
}

input CCrewCreateManyWithoutFlightLegInput {
  create: [CCrewCreateWithoutFlightLegInput!]
  connect: [CCrewWhereUniqueInput!]
}

input CCrewCreateWithoutFlightLegInput {
  coreId: String!
  crewMemberCode: String
  crewRole: CCrewRoleCreateOneInput
  person: CPersonCreateOneInput
}

type CCrewEdge {
  node: CCrew!
  cursor: String!
}

enum CCrewOrderByInput {
  id_ASC
  id_DESC
  coreId_ASC
  coreId_DESC
  crewMemberCode_ASC
  crewMemberCode_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type CCrewPreviousValues {
  id: ID!
  coreId: String!
  crewMemberCode: String
}

type CCrewRole {
  id: ID!
  coreId: String!
  name: String
  customerFacingName: String
  rank: Int
  abbreviation: String
  isActive: Boolean
}

type CCrewRoleConnection {
  pageInfo: PageInfo!
  edges: [CCrewRoleEdge]!
  aggregate: AggregateCCrewRole!
}

input CCrewRoleCreateInput {
  coreId: String!
  name: String
  customerFacingName: String
  rank: Int
  abbreviation: String
  isActive: Boolean
}

input CCrewRoleCreateOneInput {
  create: CCrewRoleCreateInput
  connect: CCrewRoleWhereUniqueInput
}

type CCrewRoleEdge {
  node: CCrewRole!
  cursor: String!
}

enum CCrewRoleOrderByInput {
  id_ASC
  id_DESC
  coreId_ASC
  coreId_DESC
  name_ASC
  name_DESC
  customerFacingName_ASC
  customerFacingName_DESC
  rank_ASC
  rank_DESC
  abbreviation_ASC
  abbreviation_DESC
  isActive_ASC
  isActive_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type CCrewRolePreviousValues {
  id: ID!
  coreId: String!
  name: String
  customerFacingName: String
  rank: Int
  abbreviation: String
  isActive: Boolean
}

type CCrewRoleSubscriptionPayload {
  mutation: MutationType!
  node: CCrewRole
  updatedFields: [String!]
  previousValues: CCrewRolePreviousValues
}

input CCrewRoleSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CCrewRoleWhereInput
  AND: [CCrewRoleSubscriptionWhereInput!]
  OR: [CCrewRoleSubscriptionWhereInput!]
  NOT: [CCrewRoleSubscriptionWhereInput!]
}

input CCrewRoleUpdateDataInput {
  coreId: String
  name: String
  customerFacingName: String
  rank: Int
  abbreviation: String
  isActive: Boolean
}

input CCrewRoleUpdateInput {
  coreId: String
  name: String
  customerFacingName: String
  rank: Int
  abbreviation: String
  isActive: Boolean
}

input CCrewRoleUpdateManyMutationInput {
  coreId: String
  name: String
  customerFacingName: String
  rank: Int
  abbreviation: String
  isActive: Boolean
}

input CCrewRoleUpdateOneInput {
  create: CCrewRoleCreateInput
  update: CCrewRoleUpdateDataInput
  upsert: CCrewRoleUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: CCrewRoleWhereUniqueInput
}

input CCrewRoleUpsertNestedInput {
  update: CCrewRoleUpdateDataInput!
  create: CCrewRoleCreateInput!
}

input CCrewRoleWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  coreId: String
  coreId_not: String
  coreId_in: [String!]
  coreId_not_in: [String!]
  coreId_lt: String
  coreId_lte: String
  coreId_gt: String
  coreId_gte: String
  coreId_contains: String
  coreId_not_contains: String
  coreId_starts_with: String
  coreId_not_starts_with: String
  coreId_ends_with: String
  coreId_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  customerFacingName: String
  customerFacingName_not: String
  customerFacingName_in: [String!]
  customerFacingName_not_in: [String!]
  customerFacingName_lt: String
  customerFacingName_lte: String
  customerFacingName_gt: String
  customerFacingName_gte: String
  customerFacingName_contains: String
  customerFacingName_not_contains: String
  customerFacingName_starts_with: String
  customerFacingName_not_starts_with: String
  customerFacingName_ends_with: String
  customerFacingName_not_ends_with: String
  rank: Int
  rank_not: Int
  rank_in: [Int!]
  rank_not_in: [Int!]
  rank_lt: Int
  rank_lte: Int
  rank_gt: Int
  rank_gte: Int
  abbreviation: String
  abbreviation_not: String
  abbreviation_in: [String!]
  abbreviation_not_in: [String!]
  abbreviation_lt: String
  abbreviation_lte: String
  abbreviation_gt: String
  abbreviation_gte: String
  abbreviation_contains: String
  abbreviation_not_contains: String
  abbreviation_starts_with: String
  abbreviation_not_starts_with: String
  abbreviation_ends_with: String
  abbreviation_not_ends_with: String
  isActive: Boolean
  isActive_not: Boolean
  AND: [CCrewRoleWhereInput!]
  OR: [CCrewRoleWhereInput!]
  NOT: [CCrewRoleWhereInput!]
}

input CCrewRoleWhereUniqueInput {
  id: ID
  coreId: String
}

input CCrewScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  coreId: String
  coreId_not: String
  coreId_in: [String!]
  coreId_not_in: [String!]
  coreId_lt: String
  coreId_lte: String
  coreId_gt: String
  coreId_gte: String
  coreId_contains: String
  coreId_not_contains: String
  coreId_starts_with: String
  coreId_not_starts_with: String
  coreId_ends_with: String
  coreId_not_ends_with: String
  crewMemberCode: String
  crewMemberCode_not: String
  crewMemberCode_in: [String!]
  crewMemberCode_not_in: [String!]
  crewMemberCode_lt: String
  crewMemberCode_lte: String
  crewMemberCode_gt: String
  crewMemberCode_gte: String
  crewMemberCode_contains: String
  crewMemberCode_not_contains: String
  crewMemberCode_starts_with: String
  crewMemberCode_not_starts_with: String
  crewMemberCode_ends_with: String
  crewMemberCode_not_ends_with: String
  AND: [CCrewScalarWhereInput!]
  OR: [CCrewScalarWhereInput!]
  NOT: [CCrewScalarWhereInput!]
}

type CCrewSubscriptionPayload {
  mutation: MutationType!
  node: CCrew
  updatedFields: [String!]
  previousValues: CCrewPreviousValues
}

input CCrewSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CCrewWhereInput
  AND: [CCrewSubscriptionWhereInput!]
  OR: [CCrewSubscriptionWhereInput!]
  NOT: [CCrewSubscriptionWhereInput!]
}

input CCrewUpdateInput {
  coreId: String
  crewMemberCode: String
  crewRole: CCrewRoleUpdateOneInput
  flightLeg: CFlightLegUpdateOneWithoutCrewsInput
  person: CPersonUpdateOneInput
}

input CCrewUpdateManyDataInput {
  coreId: String
  crewMemberCode: String
}

input CCrewUpdateManyMutationInput {
  coreId: String
  crewMemberCode: String
}

input CCrewUpdateManyWithoutFlightLegInput {
  create: [CCrewCreateWithoutFlightLegInput!]
  delete: [CCrewWhereUniqueInput!]
  connect: [CCrewWhereUniqueInput!]
  set: [CCrewWhereUniqueInput!]
  disconnect: [CCrewWhereUniqueInput!]
  update: [CCrewUpdateWithWhereUniqueWithoutFlightLegInput!]
  upsert: [CCrewUpsertWithWhereUniqueWithoutFlightLegInput!]
  deleteMany: [CCrewScalarWhereInput!]
  updateMany: [CCrewUpdateManyWithWhereNestedInput!]
}

input CCrewUpdateManyWithWhereNestedInput {
  where: CCrewScalarWhereInput!
  data: CCrewUpdateManyDataInput!
}

input CCrewUpdateWithoutFlightLegDataInput {
  coreId: String
  crewMemberCode: String
  crewRole: CCrewRoleUpdateOneInput
  person: CPersonUpdateOneInput
}

input CCrewUpdateWithWhereUniqueWithoutFlightLegInput {
  where: CCrewWhereUniqueInput!
  data: CCrewUpdateWithoutFlightLegDataInput!
}

input CCrewUpsertWithWhereUniqueWithoutFlightLegInput {
  where: CCrewWhereUniqueInput!
  update: CCrewUpdateWithoutFlightLegDataInput!
  create: CCrewCreateWithoutFlightLegInput!
}

input CCrewWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  coreId: String
  coreId_not: String
  coreId_in: [String!]
  coreId_not_in: [String!]
  coreId_lt: String
  coreId_lte: String
  coreId_gt: String
  coreId_gte: String
  coreId_contains: String
  coreId_not_contains: String
  coreId_starts_with: String
  coreId_not_starts_with: String
  coreId_ends_with: String
  coreId_not_ends_with: String
  crewMemberCode: String
  crewMemberCode_not: String
  crewMemberCode_in: [String!]
  crewMemberCode_not_in: [String!]
  crewMemberCode_lt: String
  crewMemberCode_lte: String
  crewMemberCode_gt: String
  crewMemberCode_gte: String
  crewMemberCode_contains: String
  crewMemberCode_not_contains: String
  crewMemberCode_starts_with: String
  crewMemberCode_not_starts_with: String
  crewMemberCode_ends_with: String
  crewMemberCode_not_ends_with: String
  crewRole: CCrewRoleWhereInput
  flightLeg: CFlightLegWhereInput
  person: CPersonWhereInput
  AND: [CCrewWhereInput!]
  OR: [CCrewWhereInput!]
  NOT: [CCrewWhereInput!]
}

input CCrewWhereUniqueInput {
  id: ID
  coreId: String
}

type CFboServiceProvider {
  id: ID!
  coreId: String!
  flightLeg: CFlightLeg
  flightDirection: String
  serviceStatus: String
  company: CCompany
}

type CFboServiceProviderConnection {
  pageInfo: PageInfo!
  edges: [CFboServiceProviderEdge]!
  aggregate: AggregateCFboServiceProvider!
}

input CFboServiceProviderCreateInput {
  coreId: String!
  flightLeg: CFlightLegCreateOneWithoutFboServiceProvidersInput
  flightDirection: String
  serviceStatus: String
  company: CCompanyCreateOneInput
}

input CFboServiceProviderCreateManyWithoutFlightLegInput {
  create: [CFboServiceProviderCreateWithoutFlightLegInput!]
  connect: [CFboServiceProviderWhereUniqueInput!]
}

input CFboServiceProviderCreateWithoutFlightLegInput {
  coreId: String!
  flightDirection: String
  serviceStatus: String
  company: CCompanyCreateOneInput
}

type CFboServiceProviderEdge {
  node: CFboServiceProvider!
  cursor: String!
}

enum CFboServiceProviderOrderByInput {
  id_ASC
  id_DESC
  coreId_ASC
  coreId_DESC
  flightDirection_ASC
  flightDirection_DESC
  serviceStatus_ASC
  serviceStatus_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type CFboServiceProviderPreviousValues {
  id: ID!
  coreId: String!
  flightDirection: String
  serviceStatus: String
}

input CFboServiceProviderScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  coreId: String
  coreId_not: String
  coreId_in: [String!]
  coreId_not_in: [String!]
  coreId_lt: String
  coreId_lte: String
  coreId_gt: String
  coreId_gte: String
  coreId_contains: String
  coreId_not_contains: String
  coreId_starts_with: String
  coreId_not_starts_with: String
  coreId_ends_with: String
  coreId_not_ends_with: String
  flightDirection: String
  flightDirection_not: String
  flightDirection_in: [String!]
  flightDirection_not_in: [String!]
  flightDirection_lt: String
  flightDirection_lte: String
  flightDirection_gt: String
  flightDirection_gte: String
  flightDirection_contains: String
  flightDirection_not_contains: String
  flightDirection_starts_with: String
  flightDirection_not_starts_with: String
  flightDirection_ends_with: String
  flightDirection_not_ends_with: String
  serviceStatus: String
  serviceStatus_not: String
  serviceStatus_in: [String!]
  serviceStatus_not_in: [String!]
  serviceStatus_lt: String
  serviceStatus_lte: String
  serviceStatus_gt: String
  serviceStatus_gte: String
  serviceStatus_contains: String
  serviceStatus_not_contains: String
  serviceStatus_starts_with: String
  serviceStatus_not_starts_with: String
  serviceStatus_ends_with: String
  serviceStatus_not_ends_with: String
  AND: [CFboServiceProviderScalarWhereInput!]
  OR: [CFboServiceProviderScalarWhereInput!]
  NOT: [CFboServiceProviderScalarWhereInput!]
}

type CFboServiceProviderSubscriptionPayload {
  mutation: MutationType!
  node: CFboServiceProvider
  updatedFields: [String!]
  previousValues: CFboServiceProviderPreviousValues
}

input CFboServiceProviderSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CFboServiceProviderWhereInput
  AND: [CFboServiceProviderSubscriptionWhereInput!]
  OR: [CFboServiceProviderSubscriptionWhereInput!]
  NOT: [CFboServiceProviderSubscriptionWhereInput!]
}

input CFboServiceProviderUpdateInput {
  coreId: String
  flightLeg: CFlightLegUpdateOneWithoutFboServiceProvidersInput
  flightDirection: String
  serviceStatus: String
  company: CCompanyUpdateOneInput
}

input CFboServiceProviderUpdateManyDataInput {
  coreId: String
  flightDirection: String
  serviceStatus: String
}

input CFboServiceProviderUpdateManyMutationInput {
  coreId: String
  flightDirection: String
  serviceStatus: String
}

input CFboServiceProviderUpdateManyWithoutFlightLegInput {
  create: [CFboServiceProviderCreateWithoutFlightLegInput!]
  delete: [CFboServiceProviderWhereUniqueInput!]
  connect: [CFboServiceProviderWhereUniqueInput!]
  set: [CFboServiceProviderWhereUniqueInput!]
  disconnect: [CFboServiceProviderWhereUniqueInput!]
  update: [CFboServiceProviderUpdateWithWhereUniqueWithoutFlightLegInput!]
  upsert: [CFboServiceProviderUpsertWithWhereUniqueWithoutFlightLegInput!]
  deleteMany: [CFboServiceProviderScalarWhereInput!]
  updateMany: [CFboServiceProviderUpdateManyWithWhereNestedInput!]
}

input CFboServiceProviderUpdateManyWithWhereNestedInput {
  where: CFboServiceProviderScalarWhereInput!
  data: CFboServiceProviderUpdateManyDataInput!
}

input CFboServiceProviderUpdateWithoutFlightLegDataInput {
  coreId: String
  flightDirection: String
  serviceStatus: String
  company: CCompanyUpdateOneInput
}

input CFboServiceProviderUpdateWithWhereUniqueWithoutFlightLegInput {
  where: CFboServiceProviderWhereUniqueInput!
  data: CFboServiceProviderUpdateWithoutFlightLegDataInput!
}

input CFboServiceProviderUpsertWithWhereUniqueWithoutFlightLegInput {
  where: CFboServiceProviderWhereUniqueInput!
  update: CFboServiceProviderUpdateWithoutFlightLegDataInput!
  create: CFboServiceProviderCreateWithoutFlightLegInput!
}

input CFboServiceProviderWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  coreId: String
  coreId_not: String
  coreId_in: [String!]
  coreId_not_in: [String!]
  coreId_lt: String
  coreId_lte: String
  coreId_gt: String
  coreId_gte: String
  coreId_contains: String
  coreId_not_contains: String
  coreId_starts_with: String
  coreId_not_starts_with: String
  coreId_ends_with: String
  coreId_not_ends_with: String
  flightLeg: CFlightLegWhereInput
  flightDirection: String
  flightDirection_not: String
  flightDirection_in: [String!]
  flightDirection_not_in: [String!]
  flightDirection_lt: String
  flightDirection_lte: String
  flightDirection_gt: String
  flightDirection_gte: String
  flightDirection_contains: String
  flightDirection_not_contains: String
  flightDirection_starts_with: String
  flightDirection_not_starts_with: String
  flightDirection_ends_with: String
  flightDirection_not_ends_with: String
  serviceStatus: String
  serviceStatus_not: String
  serviceStatus_in: [String!]
  serviceStatus_not_in: [String!]
  serviceStatus_lt: String
  serviceStatus_lte: String
  serviceStatus_gt: String
  serviceStatus_gte: String
  serviceStatus_contains: String
  serviceStatus_not_contains: String
  serviceStatus_starts_with: String
  serviceStatus_not_starts_with: String
  serviceStatus_ends_with: String
  serviceStatus_not_ends_with: String
  company: CCompanyWhereInput
  AND: [CFboServiceProviderWhereInput!]
  OR: [CFboServiceProviderWhereInput!]
  NOT: [CFboServiceProviderWhereInput!]
}

input CFboServiceProviderWhereUniqueInput {
  id: ID
  coreId: String
}

type CFlightLeg {
  id: ID!
  coreId: String!
  gvFlightLegId: Int
  gvOrderId: Int
  aircraft: CAircraft
  legOperationalStatus: LegOperationalStatus
  legOperationalType: LegOperationalType
  legBusinessType: LegBusinessType
  arrivalAirport: CAirport
  departureAirport: CAirport
  fboServiceProviders(where: CFboServiceProviderWhereInput, orderBy: CFboServiceProviderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CFboServiceProvider!]
  scheduledDeparture: DateTime
  scheduledArrival: DateTime
  estimatedDeparture: DateTime
  estimatedArrival: DateTime
  departureTime: DateTime
  arrivalTime: DateTime
  durationTime: Float
  flightPreferences: String
  passengers(where: PassengerWhereInput, orderBy: PassengerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Passenger!]
  expectedPaxNumber: Int
  isSensitive: Boolean
  isDemo: Boolean
  isLocked: Boolean
  crews(where: CCrewWhereInput, orderBy: CCrewOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CCrew!]
  permitNumber: String
  subscriber: CateringProposalSubscriber
  account: CAccount
  type: OrderBusinessType
  bookedPerson: CPerson
  budgetCost: Float
  budgetCoefficient: Float
  budgetPerPaxCents: Float
  budgetType: String
  preferencesUpdatedAt: DateTime
  preferencesUpdatedBy: CPerson
  isHandledByPd: Boolean
}

type CFlightLegConnection {
  pageInfo: PageInfo!
  edges: [CFlightLegEdge]!
  aggregate: AggregateCFlightLeg!
}

input CFlightLegCreateInput {
  coreId: String!
  gvFlightLegId: Int
  gvOrderId: Int
  aircraft: CAircraftCreateOneInput
  legOperationalStatus: LegOperationalStatusCreateOneInput
  legOperationalType: LegOperationalTypeCreateOneInput
  legBusinessType: LegBusinessTypeCreateOneInput
  arrivalAirport: CAirportCreateOneInput
  departureAirport: CAirportCreateOneInput
  fboServiceProviders: CFboServiceProviderCreateManyWithoutFlightLegInput
  scheduledDeparture: DateTime
  scheduledArrival: DateTime
  estimatedDeparture: DateTime
  estimatedArrival: DateTime
  departureTime: DateTime
  arrivalTime: DateTime
  durationTime: Float
  flightPreferences: String
  passengers: PassengerCreateManyInput
  expectedPaxNumber: Int
  isSensitive: Boolean
  isDemo: Boolean
  isLocked: Boolean
  crews: CCrewCreateManyWithoutFlightLegInput
  permitNumber: String
  subscriber: CateringProposalSubscriberCreateOneWithoutFlightLegInput
  account: CAccountCreateOneInput
  type: OrderBusinessTypeCreateOneInput
  bookedPerson: CPersonCreateOneInput
  budgetCost: Float
  budgetCoefficient: Float
  budgetPerPaxCents: Float
  budgetType: String
  preferencesUpdatedAt: DateTime
  preferencesUpdatedBy: CPersonCreateOneInput
  isHandledByPd: Boolean
}

input CFlightLegCreateManyInput {
  create: [CFlightLegCreateInput!]
  connect: [CFlightLegWhereUniqueInput!]
}

input CFlightLegCreateOneInput {
  create: CFlightLegCreateInput
  connect: CFlightLegWhereUniqueInput
}

input CFlightLegCreateOneWithoutCrewsInput {
  create: CFlightLegCreateWithoutCrewsInput
  connect: CFlightLegWhereUniqueInput
}

input CFlightLegCreateOneWithoutFboServiceProvidersInput {
  create: CFlightLegCreateWithoutFboServiceProvidersInput
  connect: CFlightLegWhereUniqueInput
}

input CFlightLegCreateOneWithoutSubscriberInput {
  create: CFlightLegCreateWithoutSubscriberInput
  connect: CFlightLegWhereUniqueInput
}

input CFlightLegCreateWithoutCrewsInput {
  coreId: String!
  gvFlightLegId: Int
  gvOrderId: Int
  aircraft: CAircraftCreateOneInput
  legOperationalStatus: LegOperationalStatusCreateOneInput
  legOperationalType: LegOperationalTypeCreateOneInput
  legBusinessType: LegBusinessTypeCreateOneInput
  arrivalAirport: CAirportCreateOneInput
  departureAirport: CAirportCreateOneInput
  fboServiceProviders: CFboServiceProviderCreateManyWithoutFlightLegInput
  scheduledDeparture: DateTime
  scheduledArrival: DateTime
  estimatedDeparture: DateTime
  estimatedArrival: DateTime
  departureTime: DateTime
  arrivalTime: DateTime
  durationTime: Float
  flightPreferences: String
  passengers: PassengerCreateManyInput
  expectedPaxNumber: Int
  isSensitive: Boolean
  isDemo: Boolean
  isLocked: Boolean
  permitNumber: String
  subscriber: CateringProposalSubscriberCreateOneWithoutFlightLegInput
  account: CAccountCreateOneInput
  type: OrderBusinessTypeCreateOneInput
  bookedPerson: CPersonCreateOneInput
  budgetCost: Float
  budgetCoefficient: Float
  budgetPerPaxCents: Float
  budgetType: String
  preferencesUpdatedAt: DateTime
  preferencesUpdatedBy: CPersonCreateOneInput
  isHandledByPd: Boolean
}

input CFlightLegCreateWithoutFboServiceProvidersInput {
  coreId: String!
  gvFlightLegId: Int
  gvOrderId: Int
  aircraft: CAircraftCreateOneInput
  legOperationalStatus: LegOperationalStatusCreateOneInput
  legOperationalType: LegOperationalTypeCreateOneInput
  legBusinessType: LegBusinessTypeCreateOneInput
  arrivalAirport: CAirportCreateOneInput
  departureAirport: CAirportCreateOneInput
  scheduledDeparture: DateTime
  scheduledArrival: DateTime
  estimatedDeparture: DateTime
  estimatedArrival: DateTime
  departureTime: DateTime
  arrivalTime: DateTime
  durationTime: Float
  flightPreferences: String
  passengers: PassengerCreateManyInput
  expectedPaxNumber: Int
  isSensitive: Boolean
  isDemo: Boolean
  isLocked: Boolean
  crews: CCrewCreateManyWithoutFlightLegInput
  permitNumber: String
  subscriber: CateringProposalSubscriberCreateOneWithoutFlightLegInput
  account: CAccountCreateOneInput
  type: OrderBusinessTypeCreateOneInput
  bookedPerson: CPersonCreateOneInput
  budgetCost: Float
  budgetCoefficient: Float
  budgetPerPaxCents: Float
  budgetType: String
  preferencesUpdatedAt: DateTime
  preferencesUpdatedBy: CPersonCreateOneInput
  isHandledByPd: Boolean
}

input CFlightLegCreateWithoutSubscriberInput {
  coreId: String!
  gvFlightLegId: Int
  gvOrderId: Int
  aircraft: CAircraftCreateOneInput
  legOperationalStatus: LegOperationalStatusCreateOneInput
  legOperationalType: LegOperationalTypeCreateOneInput
  legBusinessType: LegBusinessTypeCreateOneInput
  arrivalAirport: CAirportCreateOneInput
  departureAirport: CAirportCreateOneInput
  fboServiceProviders: CFboServiceProviderCreateManyWithoutFlightLegInput
  scheduledDeparture: DateTime
  scheduledArrival: DateTime
  estimatedDeparture: DateTime
  estimatedArrival: DateTime
  departureTime: DateTime
  arrivalTime: DateTime
  durationTime: Float
  flightPreferences: String
  passengers: PassengerCreateManyInput
  expectedPaxNumber: Int
  isSensitive: Boolean
  isDemo: Boolean
  isLocked: Boolean
  crews: CCrewCreateManyWithoutFlightLegInput
  permitNumber: String
  account: CAccountCreateOneInput
  type: OrderBusinessTypeCreateOneInput
  bookedPerson: CPersonCreateOneInput
  budgetCost: Float
  budgetCoefficient: Float
  budgetPerPaxCents: Float
  budgetType: String
  preferencesUpdatedAt: DateTime
  preferencesUpdatedBy: CPersonCreateOneInput
  isHandledByPd: Boolean
}

type CFlightLegEdge {
  node: CFlightLeg!
  cursor: String!
}

enum CFlightLegOrderByInput {
  id_ASC
  id_DESC
  coreId_ASC
  coreId_DESC
  gvFlightLegId_ASC
  gvFlightLegId_DESC
  gvOrderId_ASC
  gvOrderId_DESC
  scheduledDeparture_ASC
  scheduledDeparture_DESC
  scheduledArrival_ASC
  scheduledArrival_DESC
  estimatedDeparture_ASC
  estimatedDeparture_DESC
  estimatedArrival_ASC
  estimatedArrival_DESC
  departureTime_ASC
  departureTime_DESC
  arrivalTime_ASC
  arrivalTime_DESC
  durationTime_ASC
  durationTime_DESC
  flightPreferences_ASC
  flightPreferences_DESC
  expectedPaxNumber_ASC
  expectedPaxNumber_DESC
  isSensitive_ASC
  isSensitive_DESC
  isDemo_ASC
  isDemo_DESC
  isLocked_ASC
  isLocked_DESC
  permitNumber_ASC
  permitNumber_DESC
  budgetCost_ASC
  budgetCost_DESC
  budgetCoefficient_ASC
  budgetCoefficient_DESC
  budgetPerPaxCents_ASC
  budgetPerPaxCents_DESC
  budgetType_ASC
  budgetType_DESC
  preferencesUpdatedAt_ASC
  preferencesUpdatedAt_DESC
  isHandledByPd_ASC
  isHandledByPd_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type CFlightLegPreviousValues {
  id: ID!
  coreId: String!
  gvFlightLegId: Int
  gvOrderId: Int
  scheduledDeparture: DateTime
  scheduledArrival: DateTime
  estimatedDeparture: DateTime
  estimatedArrival: DateTime
  departureTime: DateTime
  arrivalTime: DateTime
  durationTime: Float
  flightPreferences: String
  expectedPaxNumber: Int
  isSensitive: Boolean
  isDemo: Boolean
  isLocked: Boolean
  permitNumber: String
  budgetCost: Float
  budgetCoefficient: Float
  budgetPerPaxCents: Float
  budgetType: String
  preferencesUpdatedAt: DateTime
  isHandledByPd: Boolean
}

input CFlightLegScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  coreId: String
  coreId_not: String
  coreId_in: [String!]
  coreId_not_in: [String!]
  coreId_lt: String
  coreId_lte: String
  coreId_gt: String
  coreId_gte: String
  coreId_contains: String
  coreId_not_contains: String
  coreId_starts_with: String
  coreId_not_starts_with: String
  coreId_ends_with: String
  coreId_not_ends_with: String
  gvFlightLegId: Int
  gvFlightLegId_not: Int
  gvFlightLegId_in: [Int!]
  gvFlightLegId_not_in: [Int!]
  gvFlightLegId_lt: Int
  gvFlightLegId_lte: Int
  gvFlightLegId_gt: Int
  gvFlightLegId_gte: Int
  gvOrderId: Int
  gvOrderId_not: Int
  gvOrderId_in: [Int!]
  gvOrderId_not_in: [Int!]
  gvOrderId_lt: Int
  gvOrderId_lte: Int
  gvOrderId_gt: Int
  gvOrderId_gte: Int
  scheduledDeparture: DateTime
  scheduledDeparture_not: DateTime
  scheduledDeparture_in: [DateTime!]
  scheduledDeparture_not_in: [DateTime!]
  scheduledDeparture_lt: DateTime
  scheduledDeparture_lte: DateTime
  scheduledDeparture_gt: DateTime
  scheduledDeparture_gte: DateTime
  scheduledArrival: DateTime
  scheduledArrival_not: DateTime
  scheduledArrival_in: [DateTime!]
  scheduledArrival_not_in: [DateTime!]
  scheduledArrival_lt: DateTime
  scheduledArrival_lte: DateTime
  scheduledArrival_gt: DateTime
  scheduledArrival_gte: DateTime
  estimatedDeparture: DateTime
  estimatedDeparture_not: DateTime
  estimatedDeparture_in: [DateTime!]
  estimatedDeparture_not_in: [DateTime!]
  estimatedDeparture_lt: DateTime
  estimatedDeparture_lte: DateTime
  estimatedDeparture_gt: DateTime
  estimatedDeparture_gte: DateTime
  estimatedArrival: DateTime
  estimatedArrival_not: DateTime
  estimatedArrival_in: [DateTime!]
  estimatedArrival_not_in: [DateTime!]
  estimatedArrival_lt: DateTime
  estimatedArrival_lte: DateTime
  estimatedArrival_gt: DateTime
  estimatedArrival_gte: DateTime
  departureTime: DateTime
  departureTime_not: DateTime
  departureTime_in: [DateTime!]
  departureTime_not_in: [DateTime!]
  departureTime_lt: DateTime
  departureTime_lte: DateTime
  departureTime_gt: DateTime
  departureTime_gte: DateTime
  arrivalTime: DateTime
  arrivalTime_not: DateTime
  arrivalTime_in: [DateTime!]
  arrivalTime_not_in: [DateTime!]
  arrivalTime_lt: DateTime
  arrivalTime_lte: DateTime
  arrivalTime_gt: DateTime
  arrivalTime_gte: DateTime
  durationTime: Float
  durationTime_not: Float
  durationTime_in: [Float!]
  durationTime_not_in: [Float!]
  durationTime_lt: Float
  durationTime_lte: Float
  durationTime_gt: Float
  durationTime_gte: Float
  flightPreferences: String
  flightPreferences_not: String
  flightPreferences_in: [String!]
  flightPreferences_not_in: [String!]
  flightPreferences_lt: String
  flightPreferences_lte: String
  flightPreferences_gt: String
  flightPreferences_gte: String
  flightPreferences_contains: String
  flightPreferences_not_contains: String
  flightPreferences_starts_with: String
  flightPreferences_not_starts_with: String
  flightPreferences_ends_with: String
  flightPreferences_not_ends_with: String
  expectedPaxNumber: Int
  expectedPaxNumber_not: Int
  expectedPaxNumber_in: [Int!]
  expectedPaxNumber_not_in: [Int!]
  expectedPaxNumber_lt: Int
  expectedPaxNumber_lte: Int
  expectedPaxNumber_gt: Int
  expectedPaxNumber_gte: Int
  isSensitive: Boolean
  isSensitive_not: Boolean
  isDemo: Boolean
  isDemo_not: Boolean
  isLocked: Boolean
  isLocked_not: Boolean
  permitNumber: String
  permitNumber_not: String
  permitNumber_in: [String!]
  permitNumber_not_in: [String!]
  permitNumber_lt: String
  permitNumber_lte: String
  permitNumber_gt: String
  permitNumber_gte: String
  permitNumber_contains: String
  permitNumber_not_contains: String
  permitNumber_starts_with: String
  permitNumber_not_starts_with: String
  permitNumber_ends_with: String
  permitNumber_not_ends_with: String
  budgetCost: Float
  budgetCost_not: Float
  budgetCost_in: [Float!]
  budgetCost_not_in: [Float!]
  budgetCost_lt: Float
  budgetCost_lte: Float
  budgetCost_gt: Float
  budgetCost_gte: Float
  budgetCoefficient: Float
  budgetCoefficient_not: Float
  budgetCoefficient_in: [Float!]
  budgetCoefficient_not_in: [Float!]
  budgetCoefficient_lt: Float
  budgetCoefficient_lte: Float
  budgetCoefficient_gt: Float
  budgetCoefficient_gte: Float
  budgetPerPaxCents: Float
  budgetPerPaxCents_not: Float
  budgetPerPaxCents_in: [Float!]
  budgetPerPaxCents_not_in: [Float!]
  budgetPerPaxCents_lt: Float
  budgetPerPaxCents_lte: Float
  budgetPerPaxCents_gt: Float
  budgetPerPaxCents_gte: Float
  budgetType: String
  budgetType_not: String
  budgetType_in: [String!]
  budgetType_not_in: [String!]
  budgetType_lt: String
  budgetType_lte: String
  budgetType_gt: String
  budgetType_gte: String
  budgetType_contains: String
  budgetType_not_contains: String
  budgetType_starts_with: String
  budgetType_not_starts_with: String
  budgetType_ends_with: String
  budgetType_not_ends_with: String
  preferencesUpdatedAt: DateTime
  preferencesUpdatedAt_not: DateTime
  preferencesUpdatedAt_in: [DateTime!]
  preferencesUpdatedAt_not_in: [DateTime!]
  preferencesUpdatedAt_lt: DateTime
  preferencesUpdatedAt_lte: DateTime
  preferencesUpdatedAt_gt: DateTime
  preferencesUpdatedAt_gte: DateTime
  isHandledByPd: Boolean
  isHandledByPd_not: Boolean
  AND: [CFlightLegScalarWhereInput!]
  OR: [CFlightLegScalarWhereInput!]
  NOT: [CFlightLegScalarWhereInput!]
}

type CFlightLegSubscriptionPayload {
  mutation: MutationType!
  node: CFlightLeg
  updatedFields: [String!]
  previousValues: CFlightLegPreviousValues
}

input CFlightLegSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CFlightLegWhereInput
  AND: [CFlightLegSubscriptionWhereInput!]
  OR: [CFlightLegSubscriptionWhereInput!]
  NOT: [CFlightLegSubscriptionWhereInput!]
}

input CFlightLegUpdateDataInput {
  coreId: String
  gvFlightLegId: Int
  gvOrderId: Int
  aircraft: CAircraftUpdateOneInput
  legOperationalStatus: LegOperationalStatusUpdateOneInput
  legOperationalType: LegOperationalTypeUpdateOneInput
  legBusinessType: LegBusinessTypeUpdateOneInput
  arrivalAirport: CAirportUpdateOneInput
  departureAirport: CAirportUpdateOneInput
  fboServiceProviders: CFboServiceProviderUpdateManyWithoutFlightLegInput
  scheduledDeparture: DateTime
  scheduledArrival: DateTime
  estimatedDeparture: DateTime
  estimatedArrival: DateTime
  departureTime: DateTime
  arrivalTime: DateTime
  durationTime: Float
  flightPreferences: String
  passengers: PassengerUpdateManyInput
  expectedPaxNumber: Int
  isSensitive: Boolean
  isDemo: Boolean
  isLocked: Boolean
  crews: CCrewUpdateManyWithoutFlightLegInput
  permitNumber: String
  subscriber: CateringProposalSubscriberUpdateOneWithoutFlightLegInput
  account: CAccountUpdateOneInput
  type: OrderBusinessTypeUpdateOneInput
  bookedPerson: CPersonUpdateOneInput
  budgetCost: Float
  budgetCoefficient: Float
  budgetPerPaxCents: Float
  budgetType: String
  preferencesUpdatedAt: DateTime
  preferencesUpdatedBy: CPersonUpdateOneInput
  isHandledByPd: Boolean
}

input CFlightLegUpdateInput {
  coreId: String
  gvFlightLegId: Int
  gvOrderId: Int
  aircraft: CAircraftUpdateOneInput
  legOperationalStatus: LegOperationalStatusUpdateOneInput
  legOperationalType: LegOperationalTypeUpdateOneInput
  legBusinessType: LegBusinessTypeUpdateOneInput
  arrivalAirport: CAirportUpdateOneInput
  departureAirport: CAirportUpdateOneInput
  fboServiceProviders: CFboServiceProviderUpdateManyWithoutFlightLegInput
  scheduledDeparture: DateTime
  scheduledArrival: DateTime
  estimatedDeparture: DateTime
  estimatedArrival: DateTime
  departureTime: DateTime
  arrivalTime: DateTime
  durationTime: Float
  flightPreferences: String
  passengers: PassengerUpdateManyInput
  expectedPaxNumber: Int
  isSensitive: Boolean
  isDemo: Boolean
  isLocked: Boolean
  crews: CCrewUpdateManyWithoutFlightLegInput
  permitNumber: String
  subscriber: CateringProposalSubscriberUpdateOneWithoutFlightLegInput
  account: CAccountUpdateOneInput
  type: OrderBusinessTypeUpdateOneInput
  bookedPerson: CPersonUpdateOneInput
  budgetCost: Float
  budgetCoefficient: Float
  budgetPerPaxCents: Float
  budgetType: String
  preferencesUpdatedAt: DateTime
  preferencesUpdatedBy: CPersonUpdateOneInput
  isHandledByPd: Boolean
}

input CFlightLegUpdateManyDataInput {
  coreId: String
  gvFlightLegId: Int
  gvOrderId: Int
  scheduledDeparture: DateTime
  scheduledArrival: DateTime
  estimatedDeparture: DateTime
  estimatedArrival: DateTime
  departureTime: DateTime
  arrivalTime: DateTime
  durationTime: Float
  flightPreferences: String
  expectedPaxNumber: Int
  isSensitive: Boolean
  isDemo: Boolean
  isLocked: Boolean
  permitNumber: String
  budgetCost: Float
  budgetCoefficient: Float
  budgetPerPaxCents: Float
  budgetType: String
  preferencesUpdatedAt: DateTime
  isHandledByPd: Boolean
}

input CFlightLegUpdateManyInput {
  create: [CFlightLegCreateInput!]
  update: [CFlightLegUpdateWithWhereUniqueNestedInput!]
  upsert: [CFlightLegUpsertWithWhereUniqueNestedInput!]
  delete: [CFlightLegWhereUniqueInput!]
  connect: [CFlightLegWhereUniqueInput!]
  set: [CFlightLegWhereUniqueInput!]
  disconnect: [CFlightLegWhereUniqueInput!]
  deleteMany: [CFlightLegScalarWhereInput!]
  updateMany: [CFlightLegUpdateManyWithWhereNestedInput!]
}

input CFlightLegUpdateManyMutationInput {
  coreId: String
  gvFlightLegId: Int
  gvOrderId: Int
  scheduledDeparture: DateTime
  scheduledArrival: DateTime
  estimatedDeparture: DateTime
  estimatedArrival: DateTime
  departureTime: DateTime
  arrivalTime: DateTime
  durationTime: Float
  flightPreferences: String
  expectedPaxNumber: Int
  isSensitive: Boolean
  isDemo: Boolean
  isLocked: Boolean
  permitNumber: String
  budgetCost: Float
  budgetCoefficient: Float
  budgetPerPaxCents: Float
  budgetType: String
  preferencesUpdatedAt: DateTime
  isHandledByPd: Boolean
}

input CFlightLegUpdateManyWithWhereNestedInput {
  where: CFlightLegScalarWhereInput!
  data: CFlightLegUpdateManyDataInput!
}

input CFlightLegUpdateOneInput {
  create: CFlightLegCreateInput
  update: CFlightLegUpdateDataInput
  upsert: CFlightLegUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: CFlightLegWhereUniqueInput
}

input CFlightLegUpdateOneWithoutCrewsInput {
  create: CFlightLegCreateWithoutCrewsInput
  update: CFlightLegUpdateWithoutCrewsDataInput
  upsert: CFlightLegUpsertWithoutCrewsInput
  delete: Boolean
  disconnect: Boolean
  connect: CFlightLegWhereUniqueInput
}

input CFlightLegUpdateOneWithoutFboServiceProvidersInput {
  create: CFlightLegCreateWithoutFboServiceProvidersInput
  update: CFlightLegUpdateWithoutFboServiceProvidersDataInput
  upsert: CFlightLegUpsertWithoutFboServiceProvidersInput
  delete: Boolean
  disconnect: Boolean
  connect: CFlightLegWhereUniqueInput
}

input CFlightLegUpdateOneWithoutSubscriberInput {
  create: CFlightLegCreateWithoutSubscriberInput
  update: CFlightLegUpdateWithoutSubscriberDataInput
  upsert: CFlightLegUpsertWithoutSubscriberInput
  delete: Boolean
  disconnect: Boolean
  connect: CFlightLegWhereUniqueInput
}

input CFlightLegUpdateWithoutCrewsDataInput {
  coreId: String
  gvFlightLegId: Int
  gvOrderId: Int
  aircraft: CAircraftUpdateOneInput
  legOperationalStatus: LegOperationalStatusUpdateOneInput
  legOperationalType: LegOperationalTypeUpdateOneInput
  legBusinessType: LegBusinessTypeUpdateOneInput
  arrivalAirport: CAirportUpdateOneInput
  departureAirport: CAirportUpdateOneInput
  fboServiceProviders: CFboServiceProviderUpdateManyWithoutFlightLegInput
  scheduledDeparture: DateTime
  scheduledArrival: DateTime
  estimatedDeparture: DateTime
  estimatedArrival: DateTime
  departureTime: DateTime
  arrivalTime: DateTime
  durationTime: Float
  flightPreferences: String
  passengers: PassengerUpdateManyInput
  expectedPaxNumber: Int
  isSensitive: Boolean
  isDemo: Boolean
  isLocked: Boolean
  permitNumber: String
  subscriber: CateringProposalSubscriberUpdateOneWithoutFlightLegInput
  account: CAccountUpdateOneInput
  type: OrderBusinessTypeUpdateOneInput
  bookedPerson: CPersonUpdateOneInput
  budgetCost: Float
  budgetCoefficient: Float
  budgetPerPaxCents: Float
  budgetType: String
  preferencesUpdatedAt: DateTime
  preferencesUpdatedBy: CPersonUpdateOneInput
  isHandledByPd: Boolean
}

input CFlightLegUpdateWithoutFboServiceProvidersDataInput {
  coreId: String
  gvFlightLegId: Int
  gvOrderId: Int
  aircraft: CAircraftUpdateOneInput
  legOperationalStatus: LegOperationalStatusUpdateOneInput
  legOperationalType: LegOperationalTypeUpdateOneInput
  legBusinessType: LegBusinessTypeUpdateOneInput
  arrivalAirport: CAirportUpdateOneInput
  departureAirport: CAirportUpdateOneInput
  scheduledDeparture: DateTime
  scheduledArrival: DateTime
  estimatedDeparture: DateTime
  estimatedArrival: DateTime
  departureTime: DateTime
  arrivalTime: DateTime
  durationTime: Float
  flightPreferences: String
  passengers: PassengerUpdateManyInput
  expectedPaxNumber: Int
  isSensitive: Boolean
  isDemo: Boolean
  isLocked: Boolean
  crews: CCrewUpdateManyWithoutFlightLegInput
  permitNumber: String
  subscriber: CateringProposalSubscriberUpdateOneWithoutFlightLegInput
  account: CAccountUpdateOneInput
  type: OrderBusinessTypeUpdateOneInput
  bookedPerson: CPersonUpdateOneInput
  budgetCost: Float
  budgetCoefficient: Float
  budgetPerPaxCents: Float
  budgetType: String
  preferencesUpdatedAt: DateTime
  preferencesUpdatedBy: CPersonUpdateOneInput
  isHandledByPd: Boolean
}

input CFlightLegUpdateWithoutSubscriberDataInput {
  coreId: String
  gvFlightLegId: Int
  gvOrderId: Int
  aircraft: CAircraftUpdateOneInput
  legOperationalStatus: LegOperationalStatusUpdateOneInput
  legOperationalType: LegOperationalTypeUpdateOneInput
  legBusinessType: LegBusinessTypeUpdateOneInput
  arrivalAirport: CAirportUpdateOneInput
  departureAirport: CAirportUpdateOneInput
  fboServiceProviders: CFboServiceProviderUpdateManyWithoutFlightLegInput
  scheduledDeparture: DateTime
  scheduledArrival: DateTime
  estimatedDeparture: DateTime
  estimatedArrival: DateTime
  departureTime: DateTime
  arrivalTime: DateTime
  durationTime: Float
  flightPreferences: String
  passengers: PassengerUpdateManyInput
  expectedPaxNumber: Int
  isSensitive: Boolean
  isDemo: Boolean
  isLocked: Boolean
  crews: CCrewUpdateManyWithoutFlightLegInput
  permitNumber: String
  account: CAccountUpdateOneInput
  type: OrderBusinessTypeUpdateOneInput
  bookedPerson: CPersonUpdateOneInput
  budgetCost: Float
  budgetCoefficient: Float
  budgetPerPaxCents: Float
  budgetType: String
  preferencesUpdatedAt: DateTime
  preferencesUpdatedBy: CPersonUpdateOneInput
  isHandledByPd: Boolean
}

input CFlightLegUpdateWithWhereUniqueNestedInput {
  where: CFlightLegWhereUniqueInput!
  data: CFlightLegUpdateDataInput!
}

input CFlightLegUpsertNestedInput {
  update: CFlightLegUpdateDataInput!
  create: CFlightLegCreateInput!
}

input CFlightLegUpsertWithoutCrewsInput {
  update: CFlightLegUpdateWithoutCrewsDataInput!
  create: CFlightLegCreateWithoutCrewsInput!
}

input CFlightLegUpsertWithoutFboServiceProvidersInput {
  update: CFlightLegUpdateWithoutFboServiceProvidersDataInput!
  create: CFlightLegCreateWithoutFboServiceProvidersInput!
}

input CFlightLegUpsertWithoutSubscriberInput {
  update: CFlightLegUpdateWithoutSubscriberDataInput!
  create: CFlightLegCreateWithoutSubscriberInput!
}

input CFlightLegUpsertWithWhereUniqueNestedInput {
  where: CFlightLegWhereUniqueInput!
  update: CFlightLegUpdateDataInput!
  create: CFlightLegCreateInput!
}

input CFlightLegWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  coreId: String
  coreId_not: String
  coreId_in: [String!]
  coreId_not_in: [String!]
  coreId_lt: String
  coreId_lte: String
  coreId_gt: String
  coreId_gte: String
  coreId_contains: String
  coreId_not_contains: String
  coreId_starts_with: String
  coreId_not_starts_with: String
  coreId_ends_with: String
  coreId_not_ends_with: String
  gvFlightLegId: Int
  gvFlightLegId_not: Int
  gvFlightLegId_in: [Int!]
  gvFlightLegId_not_in: [Int!]
  gvFlightLegId_lt: Int
  gvFlightLegId_lte: Int
  gvFlightLegId_gt: Int
  gvFlightLegId_gte: Int
  gvOrderId: Int
  gvOrderId_not: Int
  gvOrderId_in: [Int!]
  gvOrderId_not_in: [Int!]
  gvOrderId_lt: Int
  gvOrderId_lte: Int
  gvOrderId_gt: Int
  gvOrderId_gte: Int
  aircraft: CAircraftWhereInput
  legOperationalStatus: LegOperationalStatusWhereInput
  legOperationalType: LegOperationalTypeWhereInput
  legBusinessType: LegBusinessTypeWhereInput
  arrivalAirport: CAirportWhereInput
  departureAirport: CAirportWhereInput
  fboServiceProviders_every: CFboServiceProviderWhereInput
  fboServiceProviders_some: CFboServiceProviderWhereInput
  fboServiceProviders_none: CFboServiceProviderWhereInput
  scheduledDeparture: DateTime
  scheduledDeparture_not: DateTime
  scheduledDeparture_in: [DateTime!]
  scheduledDeparture_not_in: [DateTime!]
  scheduledDeparture_lt: DateTime
  scheduledDeparture_lte: DateTime
  scheduledDeparture_gt: DateTime
  scheduledDeparture_gte: DateTime
  scheduledArrival: DateTime
  scheduledArrival_not: DateTime
  scheduledArrival_in: [DateTime!]
  scheduledArrival_not_in: [DateTime!]
  scheduledArrival_lt: DateTime
  scheduledArrival_lte: DateTime
  scheduledArrival_gt: DateTime
  scheduledArrival_gte: DateTime
  estimatedDeparture: DateTime
  estimatedDeparture_not: DateTime
  estimatedDeparture_in: [DateTime!]
  estimatedDeparture_not_in: [DateTime!]
  estimatedDeparture_lt: DateTime
  estimatedDeparture_lte: DateTime
  estimatedDeparture_gt: DateTime
  estimatedDeparture_gte: DateTime
  estimatedArrival: DateTime
  estimatedArrival_not: DateTime
  estimatedArrival_in: [DateTime!]
  estimatedArrival_not_in: [DateTime!]
  estimatedArrival_lt: DateTime
  estimatedArrival_lte: DateTime
  estimatedArrival_gt: DateTime
  estimatedArrival_gte: DateTime
  departureTime: DateTime
  departureTime_not: DateTime
  departureTime_in: [DateTime!]
  departureTime_not_in: [DateTime!]
  departureTime_lt: DateTime
  departureTime_lte: DateTime
  departureTime_gt: DateTime
  departureTime_gte: DateTime
  arrivalTime: DateTime
  arrivalTime_not: DateTime
  arrivalTime_in: [DateTime!]
  arrivalTime_not_in: [DateTime!]
  arrivalTime_lt: DateTime
  arrivalTime_lte: DateTime
  arrivalTime_gt: DateTime
  arrivalTime_gte: DateTime
  durationTime: Float
  durationTime_not: Float
  durationTime_in: [Float!]
  durationTime_not_in: [Float!]
  durationTime_lt: Float
  durationTime_lte: Float
  durationTime_gt: Float
  durationTime_gte: Float
  flightPreferences: String
  flightPreferences_not: String
  flightPreferences_in: [String!]
  flightPreferences_not_in: [String!]
  flightPreferences_lt: String
  flightPreferences_lte: String
  flightPreferences_gt: String
  flightPreferences_gte: String
  flightPreferences_contains: String
  flightPreferences_not_contains: String
  flightPreferences_starts_with: String
  flightPreferences_not_starts_with: String
  flightPreferences_ends_with: String
  flightPreferences_not_ends_with: String
  passengers_every: PassengerWhereInput
  passengers_some: PassengerWhereInput
  passengers_none: PassengerWhereInput
  expectedPaxNumber: Int
  expectedPaxNumber_not: Int
  expectedPaxNumber_in: [Int!]
  expectedPaxNumber_not_in: [Int!]
  expectedPaxNumber_lt: Int
  expectedPaxNumber_lte: Int
  expectedPaxNumber_gt: Int
  expectedPaxNumber_gte: Int
  isSensitive: Boolean
  isSensitive_not: Boolean
  isDemo: Boolean
  isDemo_not: Boolean
  isLocked: Boolean
  isLocked_not: Boolean
  crews_every: CCrewWhereInput
  crews_some: CCrewWhereInput
  crews_none: CCrewWhereInput
  permitNumber: String
  permitNumber_not: String
  permitNumber_in: [String!]
  permitNumber_not_in: [String!]
  permitNumber_lt: String
  permitNumber_lte: String
  permitNumber_gt: String
  permitNumber_gte: String
  permitNumber_contains: String
  permitNumber_not_contains: String
  permitNumber_starts_with: String
  permitNumber_not_starts_with: String
  permitNumber_ends_with: String
  permitNumber_not_ends_with: String
  subscriber: CateringProposalSubscriberWhereInput
  account: CAccountWhereInput
  type: OrderBusinessTypeWhereInput
  bookedPerson: CPersonWhereInput
  budgetCost: Float
  budgetCost_not: Float
  budgetCost_in: [Float!]
  budgetCost_not_in: [Float!]
  budgetCost_lt: Float
  budgetCost_lte: Float
  budgetCost_gt: Float
  budgetCost_gte: Float
  budgetCoefficient: Float
  budgetCoefficient_not: Float
  budgetCoefficient_in: [Float!]
  budgetCoefficient_not_in: [Float!]
  budgetCoefficient_lt: Float
  budgetCoefficient_lte: Float
  budgetCoefficient_gt: Float
  budgetCoefficient_gte: Float
  budgetPerPaxCents: Float
  budgetPerPaxCents_not: Float
  budgetPerPaxCents_in: [Float!]
  budgetPerPaxCents_not_in: [Float!]
  budgetPerPaxCents_lt: Float
  budgetPerPaxCents_lte: Float
  budgetPerPaxCents_gt: Float
  budgetPerPaxCents_gte: Float
  budgetType: String
  budgetType_not: String
  budgetType_in: [String!]
  budgetType_not_in: [String!]
  budgetType_lt: String
  budgetType_lte: String
  budgetType_gt: String
  budgetType_gte: String
  budgetType_contains: String
  budgetType_not_contains: String
  budgetType_starts_with: String
  budgetType_not_starts_with: String
  budgetType_ends_with: String
  budgetType_not_ends_with: String
  preferencesUpdatedAt: DateTime
  preferencesUpdatedAt_not: DateTime
  preferencesUpdatedAt_in: [DateTime!]
  preferencesUpdatedAt_not_in: [DateTime!]
  preferencesUpdatedAt_lt: DateTime
  preferencesUpdatedAt_lte: DateTime
  preferencesUpdatedAt_gt: DateTime
  preferencesUpdatedAt_gte: DateTime
  preferencesUpdatedBy: CPersonWhereInput
  isHandledByPd: Boolean
  isHandledByPd_not: Boolean
  AND: [CFlightLegWhereInput!]
  OR: [CFlightLegWhereInput!]
  NOT: [CFlightLegWhereInput!]
}

input CFlightLegWhereUniqueInput {
  id: ID
  coreId: String
}

type CFxRate {
  id: ID!
  coreId: String!
  sourceCurrency: Currency
  targetCurrency: Currency
  rate: Float
  startTime: DateTime
  endTime: DateTime
  isActive: Boolean
}

type CFxRateConnection {
  pageInfo: PageInfo!
  edges: [CFxRateEdge]!
  aggregate: AggregateCFxRate!
}

input CFxRateCreateInput {
  coreId: String!
  sourceCurrency: CurrencyCreateOneInput
  targetCurrency: CurrencyCreateOneInput
  rate: Float
  startTime: DateTime
  endTime: DateTime
  isActive: Boolean
}

type CFxRateEdge {
  node: CFxRate!
  cursor: String!
}

enum CFxRateOrderByInput {
  id_ASC
  id_DESC
  coreId_ASC
  coreId_DESC
  rate_ASC
  rate_DESC
  startTime_ASC
  startTime_DESC
  endTime_ASC
  endTime_DESC
  isActive_ASC
  isActive_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type CFxRatePreviousValues {
  id: ID!
  coreId: String!
  rate: Float
  startTime: DateTime
  endTime: DateTime
  isActive: Boolean
}

type CFxRateSubscriptionPayload {
  mutation: MutationType!
  node: CFxRate
  updatedFields: [String!]
  previousValues: CFxRatePreviousValues
}

input CFxRateSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CFxRateWhereInput
  AND: [CFxRateSubscriptionWhereInput!]
  OR: [CFxRateSubscriptionWhereInput!]
  NOT: [CFxRateSubscriptionWhereInput!]
}

input CFxRateUpdateInput {
  coreId: String
  sourceCurrency: CurrencyUpdateOneInput
  targetCurrency: CurrencyUpdateOneInput
  rate: Float
  startTime: DateTime
  endTime: DateTime
  isActive: Boolean
}

input CFxRateUpdateManyMutationInput {
  coreId: String
  rate: Float
  startTime: DateTime
  endTime: DateTime
  isActive: Boolean
}

input CFxRateWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  coreId: String
  coreId_not: String
  coreId_in: [String!]
  coreId_not_in: [String!]
  coreId_lt: String
  coreId_lte: String
  coreId_gt: String
  coreId_gte: String
  coreId_contains: String
  coreId_not_contains: String
  coreId_starts_with: String
  coreId_not_starts_with: String
  coreId_ends_with: String
  coreId_not_ends_with: String
  sourceCurrency: CurrencyWhereInput
  targetCurrency: CurrencyWhereInput
  rate: Float
  rate_not: Float
  rate_in: [Float!]
  rate_not_in: [Float!]
  rate_lt: Float
  rate_lte: Float
  rate_gt: Float
  rate_gte: Float
  startTime: DateTime
  startTime_not: DateTime
  startTime_in: [DateTime!]
  startTime_not_in: [DateTime!]
  startTime_lt: DateTime
  startTime_lte: DateTime
  startTime_gt: DateTime
  startTime_gte: DateTime
  endTime: DateTime
  endTime_not: DateTime
  endTime_in: [DateTime!]
  endTime_not_in: [DateTime!]
  endTime_lt: DateTime
  endTime_lte: DateTime
  endTime_gt: DateTime
  endTime_gte: DateTime
  isActive: Boolean
  isActive_not: Boolean
  AND: [CFxRateWhereInput!]
  OR: [CFxRateWhereInput!]
  NOT: [CFxRateWhereInput!]
}

input CFxRateWhereUniqueInput {
  id: ID
  coreId: String
}

type CPerson {
  id: ID!
  coreId: String!
  firstName: String
  lastName: String
  middleName: String
  fullName: String
  salutation: String
  isActive: Boolean
  username: String
  emails(where: CateringPersonEmailWhereInput, orderBy: CateringPersonEmailOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CateringPersonEmail!]
  phones(where: CateringPersonPhoneNumberWhereInput, orderBy: CateringPersonPhoneNumberOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CateringPersonPhoneNumber!]
  preferences(where: CateringPreferenceWhereInput, orderBy: CateringPreferenceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CateringPreference!]
  dateOfBirth: DateTime
  gender: String
  nationalities(where: CateringPersonNationalityWhereInput, orderBy: CateringPersonNationalityOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CateringPersonNationality!]
  isTeamMember: Boolean
}

type CPersonConnection {
  pageInfo: PageInfo!
  edges: [CPersonEdge]!
  aggregate: AggregateCPerson!
}

input CPersonCreateInput {
  coreId: String!
  firstName: String
  lastName: String
  middleName: String
  fullName: String
  salutation: String
  isActive: Boolean
  username: String
  emails: CateringPersonEmailCreateManyInput
  phones: CateringPersonPhoneNumberCreateManyInput
  preferences: CateringPreferenceCreateManyWithoutPersonInput
  dateOfBirth: DateTime
  gender: String
  nationalities: CateringPersonNationalityCreateManyInput
  isTeamMember: Boolean
}

input CPersonCreateOneInput {
  create: CPersonCreateInput
  connect: CPersonWhereUniqueInput
}

input CPersonCreateOneWithoutPreferencesInput {
  create: CPersonCreateWithoutPreferencesInput
  connect: CPersonWhereUniqueInput
}

input CPersonCreateWithoutPreferencesInput {
  coreId: String!
  firstName: String
  lastName: String
  middleName: String
  fullName: String
  salutation: String
  isActive: Boolean
  username: String
  emails: CateringPersonEmailCreateManyInput
  phones: CateringPersonPhoneNumberCreateManyInput
  dateOfBirth: DateTime
  gender: String
  nationalities: CateringPersonNationalityCreateManyInput
  isTeamMember: Boolean
}

type CPersonEdge {
  node: CPerson!
  cursor: String!
}

enum CPersonOrderByInput {
  id_ASC
  id_DESC
  coreId_ASC
  coreId_DESC
  firstName_ASC
  firstName_DESC
  lastName_ASC
  lastName_DESC
  middleName_ASC
  middleName_DESC
  fullName_ASC
  fullName_DESC
  salutation_ASC
  salutation_DESC
  isActive_ASC
  isActive_DESC
  username_ASC
  username_DESC
  dateOfBirth_ASC
  dateOfBirth_DESC
  gender_ASC
  gender_DESC
  isTeamMember_ASC
  isTeamMember_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type CPersonPreviousValues {
  id: ID!
  coreId: String!
  firstName: String
  lastName: String
  middleName: String
  fullName: String
  salutation: String
  isActive: Boolean
  username: String
  dateOfBirth: DateTime
  gender: String
  isTeamMember: Boolean
}

type CPersonSubscriptionPayload {
  mutation: MutationType!
  node: CPerson
  updatedFields: [String!]
  previousValues: CPersonPreviousValues
}

input CPersonSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CPersonWhereInput
  AND: [CPersonSubscriptionWhereInput!]
  OR: [CPersonSubscriptionWhereInput!]
  NOT: [CPersonSubscriptionWhereInput!]
}

input CPersonUpdateDataInput {
  coreId: String
  firstName: String
  lastName: String
  middleName: String
  fullName: String
  salutation: String
  isActive: Boolean
  username: String
  emails: CateringPersonEmailUpdateManyInput
  phones: CateringPersonPhoneNumberUpdateManyInput
  preferences: CateringPreferenceUpdateManyWithoutPersonInput
  dateOfBirth: DateTime
  gender: String
  nationalities: CateringPersonNationalityUpdateManyInput
  isTeamMember: Boolean
}

input CPersonUpdateInput {
  coreId: String
  firstName: String
  lastName: String
  middleName: String
  fullName: String
  salutation: String
  isActive: Boolean
  username: String
  emails: CateringPersonEmailUpdateManyInput
  phones: CateringPersonPhoneNumberUpdateManyInput
  preferences: CateringPreferenceUpdateManyWithoutPersonInput
  dateOfBirth: DateTime
  gender: String
  nationalities: CateringPersonNationalityUpdateManyInput
  isTeamMember: Boolean
}

input CPersonUpdateManyMutationInput {
  coreId: String
  firstName: String
  lastName: String
  middleName: String
  fullName: String
  salutation: String
  isActive: Boolean
  username: String
  dateOfBirth: DateTime
  gender: String
  isTeamMember: Boolean
}

input CPersonUpdateOneInput {
  create: CPersonCreateInput
  update: CPersonUpdateDataInput
  upsert: CPersonUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: CPersonWhereUniqueInput
}

input CPersonUpdateOneWithoutPreferencesInput {
  create: CPersonCreateWithoutPreferencesInput
  update: CPersonUpdateWithoutPreferencesDataInput
  upsert: CPersonUpsertWithoutPreferencesInput
  delete: Boolean
  disconnect: Boolean
  connect: CPersonWhereUniqueInput
}

input CPersonUpdateWithoutPreferencesDataInput {
  coreId: String
  firstName: String
  lastName: String
  middleName: String
  fullName: String
  salutation: String
  isActive: Boolean
  username: String
  emails: CateringPersonEmailUpdateManyInput
  phones: CateringPersonPhoneNumberUpdateManyInput
  dateOfBirth: DateTime
  gender: String
  nationalities: CateringPersonNationalityUpdateManyInput
  isTeamMember: Boolean
}

input CPersonUpsertNestedInput {
  update: CPersonUpdateDataInput!
  create: CPersonCreateInput!
}

input CPersonUpsertWithoutPreferencesInput {
  update: CPersonUpdateWithoutPreferencesDataInput!
  create: CPersonCreateWithoutPreferencesInput!
}

input CPersonWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  coreId: String
  coreId_not: String
  coreId_in: [String!]
  coreId_not_in: [String!]
  coreId_lt: String
  coreId_lte: String
  coreId_gt: String
  coreId_gte: String
  coreId_contains: String
  coreId_not_contains: String
  coreId_starts_with: String
  coreId_not_starts_with: String
  coreId_ends_with: String
  coreId_not_ends_with: String
  firstName: String
  firstName_not: String
  firstName_in: [String!]
  firstName_not_in: [String!]
  firstName_lt: String
  firstName_lte: String
  firstName_gt: String
  firstName_gte: String
  firstName_contains: String
  firstName_not_contains: String
  firstName_starts_with: String
  firstName_not_starts_with: String
  firstName_ends_with: String
  firstName_not_ends_with: String
  lastName: String
  lastName_not: String
  lastName_in: [String!]
  lastName_not_in: [String!]
  lastName_lt: String
  lastName_lte: String
  lastName_gt: String
  lastName_gte: String
  lastName_contains: String
  lastName_not_contains: String
  lastName_starts_with: String
  lastName_not_starts_with: String
  lastName_ends_with: String
  lastName_not_ends_with: String
  middleName: String
  middleName_not: String
  middleName_in: [String!]
  middleName_not_in: [String!]
  middleName_lt: String
  middleName_lte: String
  middleName_gt: String
  middleName_gte: String
  middleName_contains: String
  middleName_not_contains: String
  middleName_starts_with: String
  middleName_not_starts_with: String
  middleName_ends_with: String
  middleName_not_ends_with: String
  fullName: String
  fullName_not: String
  fullName_in: [String!]
  fullName_not_in: [String!]
  fullName_lt: String
  fullName_lte: String
  fullName_gt: String
  fullName_gte: String
  fullName_contains: String
  fullName_not_contains: String
  fullName_starts_with: String
  fullName_not_starts_with: String
  fullName_ends_with: String
  fullName_not_ends_with: String
  salutation: String
  salutation_not: String
  salutation_in: [String!]
  salutation_not_in: [String!]
  salutation_lt: String
  salutation_lte: String
  salutation_gt: String
  salutation_gte: String
  salutation_contains: String
  salutation_not_contains: String
  salutation_starts_with: String
  salutation_not_starts_with: String
  salutation_ends_with: String
  salutation_not_ends_with: String
  isActive: Boolean
  isActive_not: Boolean
  username: String
  username_not: String
  username_in: [String!]
  username_not_in: [String!]
  username_lt: String
  username_lte: String
  username_gt: String
  username_gte: String
  username_contains: String
  username_not_contains: String
  username_starts_with: String
  username_not_starts_with: String
  username_ends_with: String
  username_not_ends_with: String
  emails_every: CateringPersonEmailWhereInput
  emails_some: CateringPersonEmailWhereInput
  emails_none: CateringPersonEmailWhereInput
  phones_every: CateringPersonPhoneNumberWhereInput
  phones_some: CateringPersonPhoneNumberWhereInput
  phones_none: CateringPersonPhoneNumberWhereInput
  preferences_every: CateringPreferenceWhereInput
  preferences_some: CateringPreferenceWhereInput
  preferences_none: CateringPreferenceWhereInput
  dateOfBirth: DateTime
  dateOfBirth_not: DateTime
  dateOfBirth_in: [DateTime!]
  dateOfBirth_not_in: [DateTime!]
  dateOfBirth_lt: DateTime
  dateOfBirth_lte: DateTime
  dateOfBirth_gt: DateTime
  dateOfBirth_gte: DateTime
  gender: String
  gender_not: String
  gender_in: [String!]
  gender_not_in: [String!]
  gender_lt: String
  gender_lte: String
  gender_gt: String
  gender_gte: String
  gender_contains: String
  gender_not_contains: String
  gender_starts_with: String
  gender_not_starts_with: String
  gender_ends_with: String
  gender_not_ends_with: String
  nationalities_every: CateringPersonNationalityWhereInput
  nationalities_some: CateringPersonNationalityWhereInput
  nationalities_none: CateringPersonNationalityWhereInput
  isTeamMember: Boolean
  isTeamMember_not: Boolean
  AND: [CPersonWhereInput!]
  OR: [CPersonWhereInput!]
  NOT: [CPersonWhereInput!]
}

input CPersonWhereUniqueInput {
  id: ID
  coreId: String
}

type CPlace {
  id: ID!
  coreId: String!
  city: String
  country: CateringCountry
  region: String
  isActive: Boolean
}

type CPlaceConnection {
  pageInfo: PageInfo!
  edges: [CPlaceEdge]!
  aggregate: AggregateCPlace!
}

input CPlaceCreateInput {
  coreId: String!
  city: String
  country: CateringCountryCreateOneInput
  region: String
  isActive: Boolean
}

input CPlaceCreateOneInput {
  create: CPlaceCreateInput
  connect: CPlaceWhereUniqueInput
}

type CPlaceEdge {
  node: CPlace!
  cursor: String!
}

enum CPlaceOrderByInput {
  id_ASC
  id_DESC
  coreId_ASC
  coreId_DESC
  city_ASC
  city_DESC
  region_ASC
  region_DESC
  isActive_ASC
  isActive_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type CPlacePreviousValues {
  id: ID!
  coreId: String!
  city: String
  region: String
  isActive: Boolean
}

type CPlaceSubscriptionPayload {
  mutation: MutationType!
  node: CPlace
  updatedFields: [String!]
  previousValues: CPlacePreviousValues
}

input CPlaceSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CPlaceWhereInput
  AND: [CPlaceSubscriptionWhereInput!]
  OR: [CPlaceSubscriptionWhereInput!]
  NOT: [CPlaceSubscriptionWhereInput!]
}

input CPlaceUpdateDataInput {
  coreId: String
  city: String
  country: CateringCountryUpdateOneInput
  region: String
  isActive: Boolean
}

input CPlaceUpdateInput {
  coreId: String
  city: String
  country: CateringCountryUpdateOneInput
  region: String
  isActive: Boolean
}

input CPlaceUpdateManyMutationInput {
  coreId: String
  city: String
  region: String
  isActive: Boolean
}

input CPlaceUpdateOneInput {
  create: CPlaceCreateInput
  update: CPlaceUpdateDataInput
  upsert: CPlaceUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: CPlaceWhereUniqueInput
}

input CPlaceUpsertNestedInput {
  update: CPlaceUpdateDataInput!
  create: CPlaceCreateInput!
}

input CPlaceWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  coreId: String
  coreId_not: String
  coreId_in: [String!]
  coreId_not_in: [String!]
  coreId_lt: String
  coreId_lte: String
  coreId_gt: String
  coreId_gte: String
  coreId_contains: String
  coreId_not_contains: String
  coreId_starts_with: String
  coreId_not_starts_with: String
  coreId_ends_with: String
  coreId_not_ends_with: String
  city: String
  city_not: String
  city_in: [String!]
  city_not_in: [String!]
  city_lt: String
  city_lte: String
  city_gt: String
  city_gte: String
  city_contains: String
  city_not_contains: String
  city_starts_with: String
  city_not_starts_with: String
  city_ends_with: String
  city_not_ends_with: String
  country: CateringCountryWhereInput
  region: String
  region_not: String
  region_in: [String!]
  region_not_in: [String!]
  region_lt: String
  region_lte: String
  region_gt: String
  region_gte: String
  region_contains: String
  region_not_contains: String
  region_starts_with: String
  region_not_starts_with: String
  region_ends_with: String
  region_not_ends_with: String
  isActive: Boolean
  isActive_not: Boolean
  AND: [CPlaceWhereInput!]
  OR: [CPlaceWhereInput!]
  NOT: [CPlaceWhereInput!]
}

input CPlaceWhereUniqueInput {
  id: ID
  coreId: String
}

type CPriceItem {
  id: ID!
  coreId: String!
  price: Float
  currency: Currency
  priceList: CPriceList
  name: String
  description: String
  note: String
  cateringCategory: CateringCategory
  unit: CateringUnit
  chargeable: Boolean
  ingredients(where: CateringIngredientWhereInput, orderBy: CateringIngredientOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CateringIngredient!]
  cuisine: CateringCuisine
  dietaryPreferences(where: CateringDietaryPreferenceWhereInput, orderBy: CateringDietaryPreferenceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CateringDietaryPreference!]
  standard: Boolean
  createdBy: CPerson
  _createdAt: DateTime
  modifiedBy: CPerson
  modifiedAt: DateTime
  removed: Boolean
}

type CPriceItemConnection {
  pageInfo: PageInfo!
  edges: [CPriceItemEdge]!
  aggregate: AggregateCPriceItem!
}

input CPriceItemCreateInput {
  coreId: String!
  price: Float
  currency: CurrencyCreateOneInput
  priceList: CPriceListCreateOneWithoutPriceItemsInput
  name: String
  description: String
  note: String
  cateringCategory: CateringCategoryCreateOneInput
  unit: CateringUnitCreateOneInput
  chargeable: Boolean
  ingredients: CateringIngredientCreateManyInput
  cuisine: CateringCuisineCreateOneInput
  dietaryPreferences: CateringDietaryPreferenceCreateManyInput
  standard: Boolean
  createdBy: CPersonCreateOneInput
  _createdAt: DateTime
  modifiedBy: CPersonCreateOneInput
  modifiedAt: DateTime
  removed: Boolean
}

input CPriceItemCreateManyInput {
  create: [CPriceItemCreateInput!]
  connect: [CPriceItemWhereUniqueInput!]
}

input CPriceItemCreateManyWithoutPriceListInput {
  create: [CPriceItemCreateWithoutPriceListInput!]
  connect: [CPriceItemWhereUniqueInput!]
}

input CPriceItemCreateOneInput {
  create: CPriceItemCreateInput
  connect: CPriceItemWhereUniqueInput
}

input CPriceItemCreateWithoutPriceListInput {
  coreId: String!
  price: Float
  currency: CurrencyCreateOneInput
  name: String
  description: String
  note: String
  cateringCategory: CateringCategoryCreateOneInput
  unit: CateringUnitCreateOneInput
  chargeable: Boolean
  ingredients: CateringIngredientCreateManyInput
  cuisine: CateringCuisineCreateOneInput
  dietaryPreferences: CateringDietaryPreferenceCreateManyInput
  standard: Boolean
  createdBy: CPersonCreateOneInput
  _createdAt: DateTime
  modifiedBy: CPersonCreateOneInput
  modifiedAt: DateTime
  removed: Boolean
}

type CPriceItemEdge {
  node: CPriceItem!
  cursor: String!
}

enum CPriceItemOrderByInput {
  id_ASC
  id_DESC
  coreId_ASC
  coreId_DESC
  price_ASC
  price_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  note_ASC
  note_DESC
  chargeable_ASC
  chargeable_DESC
  standard_ASC
  standard_DESC
  _createdAt_ASC
  _createdAt_DESC
  modifiedAt_ASC
  modifiedAt_DESC
  removed_ASC
  removed_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type CPriceItemPreviousValues {
  id: ID!
  coreId: String!
  price: Float
  name: String
  description: String
  note: String
  chargeable: Boolean
  standard: Boolean
  _createdAt: DateTime
  modifiedAt: DateTime
  removed: Boolean
}

input CPriceItemScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  coreId: String
  coreId_not: String
  coreId_in: [String!]
  coreId_not_in: [String!]
  coreId_lt: String
  coreId_lte: String
  coreId_gt: String
  coreId_gte: String
  coreId_contains: String
  coreId_not_contains: String
  coreId_starts_with: String
  coreId_not_starts_with: String
  coreId_ends_with: String
  coreId_not_ends_with: String
  price: Float
  price_not: Float
  price_in: [Float!]
  price_not_in: [Float!]
  price_lt: Float
  price_lte: Float
  price_gt: Float
  price_gte: Float
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  note: String
  note_not: String
  note_in: [String!]
  note_not_in: [String!]
  note_lt: String
  note_lte: String
  note_gt: String
  note_gte: String
  note_contains: String
  note_not_contains: String
  note_starts_with: String
  note_not_starts_with: String
  note_ends_with: String
  note_not_ends_with: String
  chargeable: Boolean
  chargeable_not: Boolean
  standard: Boolean
  standard_not: Boolean
  _createdAt: DateTime
  _createdAt_not: DateTime
  _createdAt_in: [DateTime!]
  _createdAt_not_in: [DateTime!]
  _createdAt_lt: DateTime
  _createdAt_lte: DateTime
  _createdAt_gt: DateTime
  _createdAt_gte: DateTime
  modifiedAt: DateTime
  modifiedAt_not: DateTime
  modifiedAt_in: [DateTime!]
  modifiedAt_not_in: [DateTime!]
  modifiedAt_lt: DateTime
  modifiedAt_lte: DateTime
  modifiedAt_gt: DateTime
  modifiedAt_gte: DateTime
  removed: Boolean
  removed_not: Boolean
  AND: [CPriceItemScalarWhereInput!]
  OR: [CPriceItemScalarWhereInput!]
  NOT: [CPriceItemScalarWhereInput!]
}

type CPriceItemSubscriptionPayload {
  mutation: MutationType!
  node: CPriceItem
  updatedFields: [String!]
  previousValues: CPriceItemPreviousValues
}

input CPriceItemSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CPriceItemWhereInput
  AND: [CPriceItemSubscriptionWhereInput!]
  OR: [CPriceItemSubscriptionWhereInput!]
  NOT: [CPriceItemSubscriptionWhereInput!]
}

input CPriceItemUpdateDataInput {
  coreId: String
  price: Float
  currency: CurrencyUpdateOneInput
  priceList: CPriceListUpdateOneWithoutPriceItemsInput
  name: String
  description: String
  note: String
  cateringCategory: CateringCategoryUpdateOneInput
  unit: CateringUnitUpdateOneInput
  chargeable: Boolean
  ingredients: CateringIngredientUpdateManyInput
  cuisine: CateringCuisineUpdateOneInput
  dietaryPreferences: CateringDietaryPreferenceUpdateManyInput
  standard: Boolean
  createdBy: CPersonUpdateOneInput
  _createdAt: DateTime
  modifiedBy: CPersonUpdateOneInput
  modifiedAt: DateTime
  removed: Boolean
}

input CPriceItemUpdateInput {
  coreId: String
  price: Float
  currency: CurrencyUpdateOneInput
  priceList: CPriceListUpdateOneWithoutPriceItemsInput
  name: String
  description: String
  note: String
  cateringCategory: CateringCategoryUpdateOneInput
  unit: CateringUnitUpdateOneInput
  chargeable: Boolean
  ingredients: CateringIngredientUpdateManyInput
  cuisine: CateringCuisineUpdateOneInput
  dietaryPreferences: CateringDietaryPreferenceUpdateManyInput
  standard: Boolean
  createdBy: CPersonUpdateOneInput
  _createdAt: DateTime
  modifiedBy: CPersonUpdateOneInput
  modifiedAt: DateTime
  removed: Boolean
}

input CPriceItemUpdateManyDataInput {
  coreId: String
  price: Float
  name: String
  description: String
  note: String
  chargeable: Boolean
  standard: Boolean
  _createdAt: DateTime
  modifiedAt: DateTime
  removed: Boolean
}

input CPriceItemUpdateManyInput {
  create: [CPriceItemCreateInput!]
  update: [CPriceItemUpdateWithWhereUniqueNestedInput!]
  upsert: [CPriceItemUpsertWithWhereUniqueNestedInput!]
  delete: [CPriceItemWhereUniqueInput!]
  connect: [CPriceItemWhereUniqueInput!]
  set: [CPriceItemWhereUniqueInput!]
  disconnect: [CPriceItemWhereUniqueInput!]
  deleteMany: [CPriceItemScalarWhereInput!]
  updateMany: [CPriceItemUpdateManyWithWhereNestedInput!]
}

input CPriceItemUpdateManyMutationInput {
  coreId: String
  price: Float
  name: String
  description: String
  note: String
  chargeable: Boolean
  standard: Boolean
  _createdAt: DateTime
  modifiedAt: DateTime
  removed: Boolean
}

input CPriceItemUpdateManyWithoutPriceListInput {
  create: [CPriceItemCreateWithoutPriceListInput!]
  delete: [CPriceItemWhereUniqueInput!]
  connect: [CPriceItemWhereUniqueInput!]
  set: [CPriceItemWhereUniqueInput!]
  disconnect: [CPriceItemWhereUniqueInput!]
  update: [CPriceItemUpdateWithWhereUniqueWithoutPriceListInput!]
  upsert: [CPriceItemUpsertWithWhereUniqueWithoutPriceListInput!]
  deleteMany: [CPriceItemScalarWhereInput!]
  updateMany: [CPriceItemUpdateManyWithWhereNestedInput!]
}

input CPriceItemUpdateManyWithWhereNestedInput {
  where: CPriceItemScalarWhereInput!
  data: CPriceItemUpdateManyDataInput!
}

input CPriceItemUpdateOneInput {
  create: CPriceItemCreateInput
  update: CPriceItemUpdateDataInput
  upsert: CPriceItemUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: CPriceItemWhereUniqueInput
}

input CPriceItemUpdateWithoutPriceListDataInput {
  coreId: String
  price: Float
  currency: CurrencyUpdateOneInput
  name: String
  description: String
  note: String
  cateringCategory: CateringCategoryUpdateOneInput
  unit: CateringUnitUpdateOneInput
  chargeable: Boolean
  ingredients: CateringIngredientUpdateManyInput
  cuisine: CateringCuisineUpdateOneInput
  dietaryPreferences: CateringDietaryPreferenceUpdateManyInput
  standard: Boolean
  createdBy: CPersonUpdateOneInput
  _createdAt: DateTime
  modifiedBy: CPersonUpdateOneInput
  modifiedAt: DateTime
  removed: Boolean
}

input CPriceItemUpdateWithWhereUniqueNestedInput {
  where: CPriceItemWhereUniqueInput!
  data: CPriceItemUpdateDataInput!
}

input CPriceItemUpdateWithWhereUniqueWithoutPriceListInput {
  where: CPriceItemWhereUniqueInput!
  data: CPriceItemUpdateWithoutPriceListDataInput!
}

input CPriceItemUpsertNestedInput {
  update: CPriceItemUpdateDataInput!
  create: CPriceItemCreateInput!
}

input CPriceItemUpsertWithWhereUniqueNestedInput {
  where: CPriceItemWhereUniqueInput!
  update: CPriceItemUpdateDataInput!
  create: CPriceItemCreateInput!
}

input CPriceItemUpsertWithWhereUniqueWithoutPriceListInput {
  where: CPriceItemWhereUniqueInput!
  update: CPriceItemUpdateWithoutPriceListDataInput!
  create: CPriceItemCreateWithoutPriceListInput!
}

input CPriceItemWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  coreId: String
  coreId_not: String
  coreId_in: [String!]
  coreId_not_in: [String!]
  coreId_lt: String
  coreId_lte: String
  coreId_gt: String
  coreId_gte: String
  coreId_contains: String
  coreId_not_contains: String
  coreId_starts_with: String
  coreId_not_starts_with: String
  coreId_ends_with: String
  coreId_not_ends_with: String
  price: Float
  price_not: Float
  price_in: [Float!]
  price_not_in: [Float!]
  price_lt: Float
  price_lte: Float
  price_gt: Float
  price_gte: Float
  currency: CurrencyWhereInput
  priceList: CPriceListWhereInput
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  note: String
  note_not: String
  note_in: [String!]
  note_not_in: [String!]
  note_lt: String
  note_lte: String
  note_gt: String
  note_gte: String
  note_contains: String
  note_not_contains: String
  note_starts_with: String
  note_not_starts_with: String
  note_ends_with: String
  note_not_ends_with: String
  cateringCategory: CateringCategoryWhereInput
  unit: CateringUnitWhereInput
  chargeable: Boolean
  chargeable_not: Boolean
  ingredients_every: CateringIngredientWhereInput
  ingredients_some: CateringIngredientWhereInput
  ingredients_none: CateringIngredientWhereInput
  cuisine: CateringCuisineWhereInput
  dietaryPreferences_every: CateringDietaryPreferenceWhereInput
  dietaryPreferences_some: CateringDietaryPreferenceWhereInput
  dietaryPreferences_none: CateringDietaryPreferenceWhereInput
  standard: Boolean
  standard_not: Boolean
  createdBy: CPersonWhereInput
  _createdAt: DateTime
  _createdAt_not: DateTime
  _createdAt_in: [DateTime!]
  _createdAt_not_in: [DateTime!]
  _createdAt_lt: DateTime
  _createdAt_lte: DateTime
  _createdAt_gt: DateTime
  _createdAt_gte: DateTime
  modifiedBy: CPersonWhereInput
  modifiedAt: DateTime
  modifiedAt_not: DateTime
  modifiedAt_in: [DateTime!]
  modifiedAt_not_in: [DateTime!]
  modifiedAt_lt: DateTime
  modifiedAt_lte: DateTime
  modifiedAt_gt: DateTime
  modifiedAt_gte: DateTime
  removed: Boolean
  removed_not: Boolean
  AND: [CPriceItemWhereInput!]
  OR: [CPriceItemWhereInput!]
  NOT: [CPriceItemWhereInput!]
}

input CPriceItemWhereUniqueInput {
  id: ID
  coreId: String
}

type CPriceList {
  id: ID!
  coreId: String!
  name: String
  validFrom: DateTime
  validTo: DateTime
  company: CCompany
  airports(where: CAirportWhereInput, orderBy: CAirportOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CAirport!]
  currency: Currency
  standard: Boolean
  isPickUpRequired: Boolean
  isRestaurant: Boolean
  notes: String
  createdBy: CPerson
  _createdAt: DateTime
  modifiedBy: CPerson
  modifiedAt: DateTime
  removed: Boolean
  priceItems(where: CPriceItemWhereInput, orderBy: CPriceItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CPriceItem!]
  serviceProviders(where: CServiceProviderWhereInput, orderBy: CServiceProviderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CServiceProvider!]
  priceItemCount: Int
}

type CPriceListConnection {
  pageInfo: PageInfo!
  edges: [CPriceListEdge]!
  aggregate: AggregateCPriceList!
}

input CPriceListCreateInput {
  coreId: String!
  name: String
  validFrom: DateTime
  validTo: DateTime
  company: CCompanyCreateOneWithoutPriceListsInput
  airports: CAirportCreateManyInput
  currency: CurrencyCreateOneInput
  standard: Boolean
  isPickUpRequired: Boolean
  isRestaurant: Boolean
  notes: String
  createdBy: CPersonCreateOneInput
  _createdAt: DateTime
  modifiedBy: CPersonCreateOneInput
  modifiedAt: DateTime
  removed: Boolean
  priceItems: CPriceItemCreateManyWithoutPriceListInput
  serviceProviders: CServiceProviderCreateManyInput
  priceItemCount: Int
}

input CPriceListCreateManyInput {
  create: [CPriceListCreateInput!]
  connect: [CPriceListWhereUniqueInput!]
}

input CPriceListCreateManyWithoutCompanyInput {
  create: [CPriceListCreateWithoutCompanyInput!]
  connect: [CPriceListWhereUniqueInput!]
}

input CPriceListCreateOneWithoutPriceItemsInput {
  create: CPriceListCreateWithoutPriceItemsInput
  connect: CPriceListWhereUniqueInput
}

input CPriceListCreateWithoutCompanyInput {
  coreId: String!
  name: String
  validFrom: DateTime
  validTo: DateTime
  airports: CAirportCreateManyInput
  currency: CurrencyCreateOneInput
  standard: Boolean
  isPickUpRequired: Boolean
  isRestaurant: Boolean
  notes: String
  createdBy: CPersonCreateOneInput
  _createdAt: DateTime
  modifiedBy: CPersonCreateOneInput
  modifiedAt: DateTime
  removed: Boolean
  priceItems: CPriceItemCreateManyWithoutPriceListInput
  serviceProviders: CServiceProviderCreateManyInput
  priceItemCount: Int
}

input CPriceListCreateWithoutPriceItemsInput {
  coreId: String!
  name: String
  validFrom: DateTime
  validTo: DateTime
  company: CCompanyCreateOneWithoutPriceListsInput
  airports: CAirportCreateManyInput
  currency: CurrencyCreateOneInput
  standard: Boolean
  isPickUpRequired: Boolean
  isRestaurant: Boolean
  notes: String
  createdBy: CPersonCreateOneInput
  _createdAt: DateTime
  modifiedBy: CPersonCreateOneInput
  modifiedAt: DateTime
  removed: Boolean
  serviceProviders: CServiceProviderCreateManyInput
  priceItemCount: Int
}

type CPriceListEdge {
  node: CPriceList!
  cursor: String!
}

enum CPriceListOrderByInput {
  id_ASC
  id_DESC
  coreId_ASC
  coreId_DESC
  name_ASC
  name_DESC
  validFrom_ASC
  validFrom_DESC
  validTo_ASC
  validTo_DESC
  standard_ASC
  standard_DESC
  isPickUpRequired_ASC
  isPickUpRequired_DESC
  isRestaurant_ASC
  isRestaurant_DESC
  notes_ASC
  notes_DESC
  _createdAt_ASC
  _createdAt_DESC
  modifiedAt_ASC
  modifiedAt_DESC
  removed_ASC
  removed_DESC
  priceItemCount_ASC
  priceItemCount_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type CPriceListPreviousValues {
  id: ID!
  coreId: String!
  name: String
  validFrom: DateTime
  validTo: DateTime
  standard: Boolean
  isPickUpRequired: Boolean
  isRestaurant: Boolean
  notes: String
  _createdAt: DateTime
  modifiedAt: DateTime
  removed: Boolean
  priceItemCount: Int
}

input CPriceListScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  coreId: String
  coreId_not: String
  coreId_in: [String!]
  coreId_not_in: [String!]
  coreId_lt: String
  coreId_lte: String
  coreId_gt: String
  coreId_gte: String
  coreId_contains: String
  coreId_not_contains: String
  coreId_starts_with: String
  coreId_not_starts_with: String
  coreId_ends_with: String
  coreId_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  validFrom: DateTime
  validFrom_not: DateTime
  validFrom_in: [DateTime!]
  validFrom_not_in: [DateTime!]
  validFrom_lt: DateTime
  validFrom_lte: DateTime
  validFrom_gt: DateTime
  validFrom_gte: DateTime
  validTo: DateTime
  validTo_not: DateTime
  validTo_in: [DateTime!]
  validTo_not_in: [DateTime!]
  validTo_lt: DateTime
  validTo_lte: DateTime
  validTo_gt: DateTime
  validTo_gte: DateTime
  standard: Boolean
  standard_not: Boolean
  isPickUpRequired: Boolean
  isPickUpRequired_not: Boolean
  isRestaurant: Boolean
  isRestaurant_not: Boolean
  notes: String
  notes_not: String
  notes_in: [String!]
  notes_not_in: [String!]
  notes_lt: String
  notes_lte: String
  notes_gt: String
  notes_gte: String
  notes_contains: String
  notes_not_contains: String
  notes_starts_with: String
  notes_not_starts_with: String
  notes_ends_with: String
  notes_not_ends_with: String
  _createdAt: DateTime
  _createdAt_not: DateTime
  _createdAt_in: [DateTime!]
  _createdAt_not_in: [DateTime!]
  _createdAt_lt: DateTime
  _createdAt_lte: DateTime
  _createdAt_gt: DateTime
  _createdAt_gte: DateTime
  modifiedAt: DateTime
  modifiedAt_not: DateTime
  modifiedAt_in: [DateTime!]
  modifiedAt_not_in: [DateTime!]
  modifiedAt_lt: DateTime
  modifiedAt_lte: DateTime
  modifiedAt_gt: DateTime
  modifiedAt_gte: DateTime
  removed: Boolean
  removed_not: Boolean
  priceItemCount: Int
  priceItemCount_not: Int
  priceItemCount_in: [Int!]
  priceItemCount_not_in: [Int!]
  priceItemCount_lt: Int
  priceItemCount_lte: Int
  priceItemCount_gt: Int
  priceItemCount_gte: Int
  AND: [CPriceListScalarWhereInput!]
  OR: [CPriceListScalarWhereInput!]
  NOT: [CPriceListScalarWhereInput!]
}

type CPriceListSubscriptionPayload {
  mutation: MutationType!
  node: CPriceList
  updatedFields: [String!]
  previousValues: CPriceListPreviousValues
}

input CPriceListSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CPriceListWhereInput
  AND: [CPriceListSubscriptionWhereInput!]
  OR: [CPriceListSubscriptionWhereInput!]
  NOT: [CPriceListSubscriptionWhereInput!]
}

input CPriceListUpdateDataInput {
  coreId: String
  name: String
  validFrom: DateTime
  validTo: DateTime
  company: CCompanyUpdateOneWithoutPriceListsInput
  airports: CAirportUpdateManyInput
  currency: CurrencyUpdateOneInput
  standard: Boolean
  isPickUpRequired: Boolean
  isRestaurant: Boolean
  notes: String
  createdBy: CPersonUpdateOneInput
  _createdAt: DateTime
  modifiedBy: CPersonUpdateOneInput
  modifiedAt: DateTime
  removed: Boolean
  priceItems: CPriceItemUpdateManyWithoutPriceListInput
  serviceProviders: CServiceProviderUpdateManyInput
  priceItemCount: Int
}

input CPriceListUpdateInput {
  coreId: String
  name: String
  validFrom: DateTime
  validTo: DateTime
  company: CCompanyUpdateOneWithoutPriceListsInput
  airports: CAirportUpdateManyInput
  currency: CurrencyUpdateOneInput
  standard: Boolean
  isPickUpRequired: Boolean
  isRestaurant: Boolean
  notes: String
  createdBy: CPersonUpdateOneInput
  _createdAt: DateTime
  modifiedBy: CPersonUpdateOneInput
  modifiedAt: DateTime
  removed: Boolean
  priceItems: CPriceItemUpdateManyWithoutPriceListInput
  serviceProviders: CServiceProviderUpdateManyInput
  priceItemCount: Int
}

input CPriceListUpdateManyDataInput {
  coreId: String
  name: String
  validFrom: DateTime
  validTo: DateTime
  standard: Boolean
  isPickUpRequired: Boolean
  isRestaurant: Boolean
  notes: String
  _createdAt: DateTime
  modifiedAt: DateTime
  removed: Boolean
  priceItemCount: Int
}

input CPriceListUpdateManyInput {
  create: [CPriceListCreateInput!]
  update: [CPriceListUpdateWithWhereUniqueNestedInput!]
  upsert: [CPriceListUpsertWithWhereUniqueNestedInput!]
  delete: [CPriceListWhereUniqueInput!]
  connect: [CPriceListWhereUniqueInput!]
  set: [CPriceListWhereUniqueInput!]
  disconnect: [CPriceListWhereUniqueInput!]
  deleteMany: [CPriceListScalarWhereInput!]
  updateMany: [CPriceListUpdateManyWithWhereNestedInput!]
}

input CPriceListUpdateManyMutationInput {
  coreId: String
  name: String
  validFrom: DateTime
  validTo: DateTime
  standard: Boolean
  isPickUpRequired: Boolean
  isRestaurant: Boolean
  notes: String
  _createdAt: DateTime
  modifiedAt: DateTime
  removed: Boolean
  priceItemCount: Int
}

input CPriceListUpdateManyWithoutCompanyInput {
  create: [CPriceListCreateWithoutCompanyInput!]
  delete: [CPriceListWhereUniqueInput!]
  connect: [CPriceListWhereUniqueInput!]
  set: [CPriceListWhereUniqueInput!]
  disconnect: [CPriceListWhereUniqueInput!]
  update: [CPriceListUpdateWithWhereUniqueWithoutCompanyInput!]
  upsert: [CPriceListUpsertWithWhereUniqueWithoutCompanyInput!]
  deleteMany: [CPriceListScalarWhereInput!]
  updateMany: [CPriceListUpdateManyWithWhereNestedInput!]
}

input CPriceListUpdateManyWithWhereNestedInput {
  where: CPriceListScalarWhereInput!
  data: CPriceListUpdateManyDataInput!
}

input CPriceListUpdateOneWithoutPriceItemsInput {
  create: CPriceListCreateWithoutPriceItemsInput
  update: CPriceListUpdateWithoutPriceItemsDataInput
  upsert: CPriceListUpsertWithoutPriceItemsInput
  delete: Boolean
  disconnect: Boolean
  connect: CPriceListWhereUniqueInput
}

input CPriceListUpdateWithoutCompanyDataInput {
  coreId: String
  name: String
  validFrom: DateTime
  validTo: DateTime
  airports: CAirportUpdateManyInput
  currency: CurrencyUpdateOneInput
  standard: Boolean
  isPickUpRequired: Boolean
  isRestaurant: Boolean
  notes: String
  createdBy: CPersonUpdateOneInput
  _createdAt: DateTime
  modifiedBy: CPersonUpdateOneInput
  modifiedAt: DateTime
  removed: Boolean
  priceItems: CPriceItemUpdateManyWithoutPriceListInput
  serviceProviders: CServiceProviderUpdateManyInput
  priceItemCount: Int
}

input CPriceListUpdateWithoutPriceItemsDataInput {
  coreId: String
  name: String
  validFrom: DateTime
  validTo: DateTime
  company: CCompanyUpdateOneWithoutPriceListsInput
  airports: CAirportUpdateManyInput
  currency: CurrencyUpdateOneInput
  standard: Boolean
  isPickUpRequired: Boolean
  isRestaurant: Boolean
  notes: String
  createdBy: CPersonUpdateOneInput
  _createdAt: DateTime
  modifiedBy: CPersonUpdateOneInput
  modifiedAt: DateTime
  removed: Boolean
  serviceProviders: CServiceProviderUpdateManyInput
  priceItemCount: Int
}

input CPriceListUpdateWithWhereUniqueNestedInput {
  where: CPriceListWhereUniqueInput!
  data: CPriceListUpdateDataInput!
}

input CPriceListUpdateWithWhereUniqueWithoutCompanyInput {
  where: CPriceListWhereUniqueInput!
  data: CPriceListUpdateWithoutCompanyDataInput!
}

input CPriceListUpsertWithoutPriceItemsInput {
  update: CPriceListUpdateWithoutPriceItemsDataInput!
  create: CPriceListCreateWithoutPriceItemsInput!
}

input CPriceListUpsertWithWhereUniqueNestedInput {
  where: CPriceListWhereUniqueInput!
  update: CPriceListUpdateDataInput!
  create: CPriceListCreateInput!
}

input CPriceListUpsertWithWhereUniqueWithoutCompanyInput {
  where: CPriceListWhereUniqueInput!
  update: CPriceListUpdateWithoutCompanyDataInput!
  create: CPriceListCreateWithoutCompanyInput!
}

input CPriceListWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  coreId: String
  coreId_not: String
  coreId_in: [String!]
  coreId_not_in: [String!]
  coreId_lt: String
  coreId_lte: String
  coreId_gt: String
  coreId_gte: String
  coreId_contains: String
  coreId_not_contains: String
  coreId_starts_with: String
  coreId_not_starts_with: String
  coreId_ends_with: String
  coreId_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  validFrom: DateTime
  validFrom_not: DateTime
  validFrom_in: [DateTime!]
  validFrom_not_in: [DateTime!]
  validFrom_lt: DateTime
  validFrom_lte: DateTime
  validFrom_gt: DateTime
  validFrom_gte: DateTime
  validTo: DateTime
  validTo_not: DateTime
  validTo_in: [DateTime!]
  validTo_not_in: [DateTime!]
  validTo_lt: DateTime
  validTo_lte: DateTime
  validTo_gt: DateTime
  validTo_gte: DateTime
  company: CCompanyWhereInput
  airports_every: CAirportWhereInput
  airports_some: CAirportWhereInput
  airports_none: CAirportWhereInput
  currency: CurrencyWhereInput
  standard: Boolean
  standard_not: Boolean
  isPickUpRequired: Boolean
  isPickUpRequired_not: Boolean
  isRestaurant: Boolean
  isRestaurant_not: Boolean
  notes: String
  notes_not: String
  notes_in: [String!]
  notes_not_in: [String!]
  notes_lt: String
  notes_lte: String
  notes_gt: String
  notes_gte: String
  notes_contains: String
  notes_not_contains: String
  notes_starts_with: String
  notes_not_starts_with: String
  notes_ends_with: String
  notes_not_ends_with: String
  createdBy: CPersonWhereInput
  _createdAt: DateTime
  _createdAt_not: DateTime
  _createdAt_in: [DateTime!]
  _createdAt_not_in: [DateTime!]
  _createdAt_lt: DateTime
  _createdAt_lte: DateTime
  _createdAt_gt: DateTime
  _createdAt_gte: DateTime
  modifiedBy: CPersonWhereInput
  modifiedAt: DateTime
  modifiedAt_not: DateTime
  modifiedAt_in: [DateTime!]
  modifiedAt_not_in: [DateTime!]
  modifiedAt_lt: DateTime
  modifiedAt_lte: DateTime
  modifiedAt_gt: DateTime
  modifiedAt_gte: DateTime
  removed: Boolean
  removed_not: Boolean
  priceItems_every: CPriceItemWhereInput
  priceItems_some: CPriceItemWhereInput
  priceItems_none: CPriceItemWhereInput
  serviceProviders_every: CServiceProviderWhereInput
  serviceProviders_some: CServiceProviderWhereInput
  serviceProviders_none: CServiceProviderWhereInput
  priceItemCount: Int
  priceItemCount_not: Int
  priceItemCount_in: [Int!]
  priceItemCount_not_in: [Int!]
  priceItemCount_lt: Int
  priceItemCount_lte: Int
  priceItemCount_gt: Int
  priceItemCount_gte: Int
  AND: [CPriceListWhereInput!]
  OR: [CPriceListWhereInput!]
  NOT: [CPriceListWhereInput!]
}

input CPriceListWhereUniqueInput {
  id: ID
  coreId: String
}

type CServiceProvider {
  id: ID!
  coreId: String!
  company: CCompany
  airports(where: CAirportWhereInput, orderBy: CAirportOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CAirport!]
  addresses: String
  serviceProviderEmails(where: ServiceProviderEmailWhereInput, orderBy: ServiceProviderEmailOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ServiceProviderEmail!]
  serviceProviderPhoneNumbers(where: ServiceProviderPhoneNumberWhereInput, orderBy: ServiceProviderPhoneNumberOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ServiceProviderPhoneNumber!]
  emails: String
  phoneNumbers: String
  note: String
  standard: Boolean
  deliveryPrice: Float
  deliveryCurrency: Currency
  openingHours(where: OpeningHourWhereInput, orderBy: OpeningHourOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [OpeningHour!]
  serviceTypes(where: CServiceTypeWhereInput, orderBy: CServiceTypeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CServiceType!]
  useDetailsFromCompany: Boolean
  createdBy: CPerson
  _createdAt: DateTime
  modifiedBy: CPerson
  modifiedAt: DateTime
  removed: Boolean
}

type CServiceProviderConnection {
  pageInfo: PageInfo!
  edges: [CServiceProviderEdge]!
  aggregate: AggregateCServiceProvider!
}

input CServiceProviderCreateInput {
  coreId: String!
  company: CCompanyCreateOneWithoutServiceProvidersInput
  airports: CAirportCreateManyInput
  addresses: String
  serviceProviderEmails: ServiceProviderEmailCreateManyWithoutServiceProviderInput
  serviceProviderPhoneNumbers: ServiceProviderPhoneNumberCreateManyWithoutServiceProviderInput
  emails: String
  phoneNumbers: String
  note: String
  standard: Boolean
  deliveryPrice: Float
  deliveryCurrency: CurrencyCreateOneInput
  openingHours: OpeningHourCreateManyWithoutServiceProviderInput
  serviceTypes: CServiceTypeCreateManyInput
  useDetailsFromCompany: Boolean
  createdBy: CPersonCreateOneInput
  _createdAt: DateTime
  modifiedBy: CPersonCreateOneInput
  modifiedAt: DateTime
  removed: Boolean
}

input CServiceProviderCreateManyInput {
  create: [CServiceProviderCreateInput!]
  connect: [CServiceProviderWhereUniqueInput!]
}

input CServiceProviderCreateManyWithoutCompanyInput {
  create: [CServiceProviderCreateWithoutCompanyInput!]
  connect: [CServiceProviderWhereUniqueInput!]
}

input CServiceProviderCreateOneInput {
  create: CServiceProviderCreateInput
  connect: CServiceProviderWhereUniqueInput
}

input CServiceProviderCreateOneWithoutOpeningHoursInput {
  create: CServiceProviderCreateWithoutOpeningHoursInput
  connect: CServiceProviderWhereUniqueInput
}

input CServiceProviderCreateOneWithoutServiceProviderEmailsInput {
  create: CServiceProviderCreateWithoutServiceProviderEmailsInput
  connect: CServiceProviderWhereUniqueInput
}

input CServiceProviderCreateOneWithoutServiceProviderPhoneNumbersInput {
  create: CServiceProviderCreateWithoutServiceProviderPhoneNumbersInput
  connect: CServiceProviderWhereUniqueInput
}

input CServiceProviderCreateWithoutCompanyInput {
  coreId: String!
  airports: CAirportCreateManyInput
  addresses: String
  serviceProviderEmails: ServiceProviderEmailCreateManyWithoutServiceProviderInput
  serviceProviderPhoneNumbers: ServiceProviderPhoneNumberCreateManyWithoutServiceProviderInput
  emails: String
  phoneNumbers: String
  note: String
  standard: Boolean
  deliveryPrice: Float
  deliveryCurrency: CurrencyCreateOneInput
  openingHours: OpeningHourCreateManyWithoutServiceProviderInput
  serviceTypes: CServiceTypeCreateManyInput
  useDetailsFromCompany: Boolean
  createdBy: CPersonCreateOneInput
  _createdAt: DateTime
  modifiedBy: CPersonCreateOneInput
  modifiedAt: DateTime
  removed: Boolean
}

input CServiceProviderCreateWithoutOpeningHoursInput {
  coreId: String!
  company: CCompanyCreateOneWithoutServiceProvidersInput
  airports: CAirportCreateManyInput
  addresses: String
  serviceProviderEmails: ServiceProviderEmailCreateManyWithoutServiceProviderInput
  serviceProviderPhoneNumbers: ServiceProviderPhoneNumberCreateManyWithoutServiceProviderInput
  emails: String
  phoneNumbers: String
  note: String
  standard: Boolean
  deliveryPrice: Float
  deliveryCurrency: CurrencyCreateOneInput
  serviceTypes: CServiceTypeCreateManyInput
  useDetailsFromCompany: Boolean
  createdBy: CPersonCreateOneInput
  _createdAt: DateTime
  modifiedBy: CPersonCreateOneInput
  modifiedAt: DateTime
  removed: Boolean
}

input CServiceProviderCreateWithoutServiceProviderEmailsInput {
  coreId: String!
  company: CCompanyCreateOneWithoutServiceProvidersInput
  airports: CAirportCreateManyInput
  addresses: String
  serviceProviderPhoneNumbers: ServiceProviderPhoneNumberCreateManyWithoutServiceProviderInput
  emails: String
  phoneNumbers: String
  note: String
  standard: Boolean
  deliveryPrice: Float
  deliveryCurrency: CurrencyCreateOneInput
  openingHours: OpeningHourCreateManyWithoutServiceProviderInput
  serviceTypes: CServiceTypeCreateManyInput
  useDetailsFromCompany: Boolean
  createdBy: CPersonCreateOneInput
  _createdAt: DateTime
  modifiedBy: CPersonCreateOneInput
  modifiedAt: DateTime
  removed: Boolean
}

input CServiceProviderCreateWithoutServiceProviderPhoneNumbersInput {
  coreId: String!
  company: CCompanyCreateOneWithoutServiceProvidersInput
  airports: CAirportCreateManyInput
  addresses: String
  serviceProviderEmails: ServiceProviderEmailCreateManyWithoutServiceProviderInput
  emails: String
  phoneNumbers: String
  note: String
  standard: Boolean
  deliveryPrice: Float
  deliveryCurrency: CurrencyCreateOneInput
  openingHours: OpeningHourCreateManyWithoutServiceProviderInput
  serviceTypes: CServiceTypeCreateManyInput
  useDetailsFromCompany: Boolean
  createdBy: CPersonCreateOneInput
  _createdAt: DateTime
  modifiedBy: CPersonCreateOneInput
  modifiedAt: DateTime
  removed: Boolean
}

type CServiceProviderEdge {
  node: CServiceProvider!
  cursor: String!
}

enum CServiceProviderOrderByInput {
  id_ASC
  id_DESC
  coreId_ASC
  coreId_DESC
  addresses_ASC
  addresses_DESC
  emails_ASC
  emails_DESC
  phoneNumbers_ASC
  phoneNumbers_DESC
  note_ASC
  note_DESC
  standard_ASC
  standard_DESC
  deliveryPrice_ASC
  deliveryPrice_DESC
  useDetailsFromCompany_ASC
  useDetailsFromCompany_DESC
  _createdAt_ASC
  _createdAt_DESC
  modifiedAt_ASC
  modifiedAt_DESC
  removed_ASC
  removed_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type CServiceProviderPreviousValues {
  id: ID!
  coreId: String!
  addresses: String
  emails: String
  phoneNumbers: String
  note: String
  standard: Boolean
  deliveryPrice: Float
  useDetailsFromCompany: Boolean
  _createdAt: DateTime
  modifiedAt: DateTime
  removed: Boolean
}

input CServiceProviderScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  coreId: String
  coreId_not: String
  coreId_in: [String!]
  coreId_not_in: [String!]
  coreId_lt: String
  coreId_lte: String
  coreId_gt: String
  coreId_gte: String
  coreId_contains: String
  coreId_not_contains: String
  coreId_starts_with: String
  coreId_not_starts_with: String
  coreId_ends_with: String
  coreId_not_ends_with: String
  addresses: String
  addresses_not: String
  addresses_in: [String!]
  addresses_not_in: [String!]
  addresses_lt: String
  addresses_lte: String
  addresses_gt: String
  addresses_gte: String
  addresses_contains: String
  addresses_not_contains: String
  addresses_starts_with: String
  addresses_not_starts_with: String
  addresses_ends_with: String
  addresses_not_ends_with: String
  emails: String
  emails_not: String
  emails_in: [String!]
  emails_not_in: [String!]
  emails_lt: String
  emails_lte: String
  emails_gt: String
  emails_gte: String
  emails_contains: String
  emails_not_contains: String
  emails_starts_with: String
  emails_not_starts_with: String
  emails_ends_with: String
  emails_not_ends_with: String
  phoneNumbers: String
  phoneNumbers_not: String
  phoneNumbers_in: [String!]
  phoneNumbers_not_in: [String!]
  phoneNumbers_lt: String
  phoneNumbers_lte: String
  phoneNumbers_gt: String
  phoneNumbers_gte: String
  phoneNumbers_contains: String
  phoneNumbers_not_contains: String
  phoneNumbers_starts_with: String
  phoneNumbers_not_starts_with: String
  phoneNumbers_ends_with: String
  phoneNumbers_not_ends_with: String
  note: String
  note_not: String
  note_in: [String!]
  note_not_in: [String!]
  note_lt: String
  note_lte: String
  note_gt: String
  note_gte: String
  note_contains: String
  note_not_contains: String
  note_starts_with: String
  note_not_starts_with: String
  note_ends_with: String
  note_not_ends_with: String
  standard: Boolean
  standard_not: Boolean
  deliveryPrice: Float
  deliveryPrice_not: Float
  deliveryPrice_in: [Float!]
  deliveryPrice_not_in: [Float!]
  deliveryPrice_lt: Float
  deliveryPrice_lte: Float
  deliveryPrice_gt: Float
  deliveryPrice_gte: Float
  useDetailsFromCompany: Boolean
  useDetailsFromCompany_not: Boolean
  _createdAt: DateTime
  _createdAt_not: DateTime
  _createdAt_in: [DateTime!]
  _createdAt_not_in: [DateTime!]
  _createdAt_lt: DateTime
  _createdAt_lte: DateTime
  _createdAt_gt: DateTime
  _createdAt_gte: DateTime
  modifiedAt: DateTime
  modifiedAt_not: DateTime
  modifiedAt_in: [DateTime!]
  modifiedAt_not_in: [DateTime!]
  modifiedAt_lt: DateTime
  modifiedAt_lte: DateTime
  modifiedAt_gt: DateTime
  modifiedAt_gte: DateTime
  removed: Boolean
  removed_not: Boolean
  AND: [CServiceProviderScalarWhereInput!]
  OR: [CServiceProviderScalarWhereInput!]
  NOT: [CServiceProviderScalarWhereInput!]
}

type CServiceProviderSubscriptionPayload {
  mutation: MutationType!
  node: CServiceProvider
  updatedFields: [String!]
  previousValues: CServiceProviderPreviousValues
}

input CServiceProviderSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CServiceProviderWhereInput
  AND: [CServiceProviderSubscriptionWhereInput!]
  OR: [CServiceProviderSubscriptionWhereInput!]
  NOT: [CServiceProviderSubscriptionWhereInput!]
}

input CServiceProviderUpdateDataInput {
  coreId: String
  company: CCompanyUpdateOneWithoutServiceProvidersInput
  airports: CAirportUpdateManyInput
  addresses: String
  serviceProviderEmails: ServiceProviderEmailUpdateManyWithoutServiceProviderInput
  serviceProviderPhoneNumbers: ServiceProviderPhoneNumberUpdateManyWithoutServiceProviderInput
  emails: String
  phoneNumbers: String
  note: String
  standard: Boolean
  deliveryPrice: Float
  deliveryCurrency: CurrencyUpdateOneInput
  openingHours: OpeningHourUpdateManyWithoutServiceProviderInput
  serviceTypes: CServiceTypeUpdateManyInput
  useDetailsFromCompany: Boolean
  createdBy: CPersonUpdateOneInput
  _createdAt: DateTime
  modifiedBy: CPersonUpdateOneInput
  modifiedAt: DateTime
  removed: Boolean
}

input CServiceProviderUpdateInput {
  coreId: String
  company: CCompanyUpdateOneWithoutServiceProvidersInput
  airports: CAirportUpdateManyInput
  addresses: String
  serviceProviderEmails: ServiceProviderEmailUpdateManyWithoutServiceProviderInput
  serviceProviderPhoneNumbers: ServiceProviderPhoneNumberUpdateManyWithoutServiceProviderInput
  emails: String
  phoneNumbers: String
  note: String
  standard: Boolean
  deliveryPrice: Float
  deliveryCurrency: CurrencyUpdateOneInput
  openingHours: OpeningHourUpdateManyWithoutServiceProviderInput
  serviceTypes: CServiceTypeUpdateManyInput
  useDetailsFromCompany: Boolean
  createdBy: CPersonUpdateOneInput
  _createdAt: DateTime
  modifiedBy: CPersonUpdateOneInput
  modifiedAt: DateTime
  removed: Boolean
}

input CServiceProviderUpdateManyDataInput {
  coreId: String
  addresses: String
  emails: String
  phoneNumbers: String
  note: String
  standard: Boolean
  deliveryPrice: Float
  useDetailsFromCompany: Boolean
  _createdAt: DateTime
  modifiedAt: DateTime
  removed: Boolean
}

input CServiceProviderUpdateManyInput {
  create: [CServiceProviderCreateInput!]
  update: [CServiceProviderUpdateWithWhereUniqueNestedInput!]
  upsert: [CServiceProviderUpsertWithWhereUniqueNestedInput!]
  delete: [CServiceProviderWhereUniqueInput!]
  connect: [CServiceProviderWhereUniqueInput!]
  set: [CServiceProviderWhereUniqueInput!]
  disconnect: [CServiceProviderWhereUniqueInput!]
  deleteMany: [CServiceProviderScalarWhereInput!]
  updateMany: [CServiceProviderUpdateManyWithWhereNestedInput!]
}

input CServiceProviderUpdateManyMutationInput {
  coreId: String
  addresses: String
  emails: String
  phoneNumbers: String
  note: String
  standard: Boolean
  deliveryPrice: Float
  useDetailsFromCompany: Boolean
  _createdAt: DateTime
  modifiedAt: DateTime
  removed: Boolean
}

input CServiceProviderUpdateManyWithoutCompanyInput {
  create: [CServiceProviderCreateWithoutCompanyInput!]
  delete: [CServiceProviderWhereUniqueInput!]
  connect: [CServiceProviderWhereUniqueInput!]
  set: [CServiceProviderWhereUniqueInput!]
  disconnect: [CServiceProviderWhereUniqueInput!]
  update: [CServiceProviderUpdateWithWhereUniqueWithoutCompanyInput!]
  upsert: [CServiceProviderUpsertWithWhereUniqueWithoutCompanyInput!]
  deleteMany: [CServiceProviderScalarWhereInput!]
  updateMany: [CServiceProviderUpdateManyWithWhereNestedInput!]
}

input CServiceProviderUpdateManyWithWhereNestedInput {
  where: CServiceProviderScalarWhereInput!
  data: CServiceProviderUpdateManyDataInput!
}

input CServiceProviderUpdateOneInput {
  create: CServiceProviderCreateInput
  update: CServiceProviderUpdateDataInput
  upsert: CServiceProviderUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: CServiceProviderWhereUniqueInput
}

input CServiceProviderUpdateOneWithoutOpeningHoursInput {
  create: CServiceProviderCreateWithoutOpeningHoursInput
  update: CServiceProviderUpdateWithoutOpeningHoursDataInput
  upsert: CServiceProviderUpsertWithoutOpeningHoursInput
  delete: Boolean
  disconnect: Boolean
  connect: CServiceProviderWhereUniqueInput
}

input CServiceProviderUpdateOneWithoutServiceProviderEmailsInput {
  create: CServiceProviderCreateWithoutServiceProviderEmailsInput
  update: CServiceProviderUpdateWithoutServiceProviderEmailsDataInput
  upsert: CServiceProviderUpsertWithoutServiceProviderEmailsInput
  delete: Boolean
  disconnect: Boolean
  connect: CServiceProviderWhereUniqueInput
}

input CServiceProviderUpdateOneWithoutServiceProviderPhoneNumbersInput {
  create: CServiceProviderCreateWithoutServiceProviderPhoneNumbersInput
  update: CServiceProviderUpdateWithoutServiceProviderPhoneNumbersDataInput
  upsert: CServiceProviderUpsertWithoutServiceProviderPhoneNumbersInput
  delete: Boolean
  disconnect: Boolean
  connect: CServiceProviderWhereUniqueInput
}

input CServiceProviderUpdateWithoutCompanyDataInput {
  coreId: String
  airports: CAirportUpdateManyInput
  addresses: String
  serviceProviderEmails: ServiceProviderEmailUpdateManyWithoutServiceProviderInput
  serviceProviderPhoneNumbers: ServiceProviderPhoneNumberUpdateManyWithoutServiceProviderInput
  emails: String
  phoneNumbers: String
  note: String
  standard: Boolean
  deliveryPrice: Float
  deliveryCurrency: CurrencyUpdateOneInput
  openingHours: OpeningHourUpdateManyWithoutServiceProviderInput
  serviceTypes: CServiceTypeUpdateManyInput
  useDetailsFromCompany: Boolean
  createdBy: CPersonUpdateOneInput
  _createdAt: DateTime
  modifiedBy: CPersonUpdateOneInput
  modifiedAt: DateTime
  removed: Boolean
}

input CServiceProviderUpdateWithoutOpeningHoursDataInput {
  coreId: String
  company: CCompanyUpdateOneWithoutServiceProvidersInput
  airports: CAirportUpdateManyInput
  addresses: String
  serviceProviderEmails: ServiceProviderEmailUpdateManyWithoutServiceProviderInput
  serviceProviderPhoneNumbers: ServiceProviderPhoneNumberUpdateManyWithoutServiceProviderInput
  emails: String
  phoneNumbers: String
  note: String
  standard: Boolean
  deliveryPrice: Float
  deliveryCurrency: CurrencyUpdateOneInput
  serviceTypes: CServiceTypeUpdateManyInput
  useDetailsFromCompany: Boolean
  createdBy: CPersonUpdateOneInput
  _createdAt: DateTime
  modifiedBy: CPersonUpdateOneInput
  modifiedAt: DateTime
  removed: Boolean
}

input CServiceProviderUpdateWithoutServiceProviderEmailsDataInput {
  coreId: String
  company: CCompanyUpdateOneWithoutServiceProvidersInput
  airports: CAirportUpdateManyInput
  addresses: String
  serviceProviderPhoneNumbers: ServiceProviderPhoneNumberUpdateManyWithoutServiceProviderInput
  emails: String
  phoneNumbers: String
  note: String
  standard: Boolean
  deliveryPrice: Float
  deliveryCurrency: CurrencyUpdateOneInput
  openingHours: OpeningHourUpdateManyWithoutServiceProviderInput
  serviceTypes: CServiceTypeUpdateManyInput
  useDetailsFromCompany: Boolean
  createdBy: CPersonUpdateOneInput
  _createdAt: DateTime
  modifiedBy: CPersonUpdateOneInput
  modifiedAt: DateTime
  removed: Boolean
}

input CServiceProviderUpdateWithoutServiceProviderPhoneNumbersDataInput {
  coreId: String
  company: CCompanyUpdateOneWithoutServiceProvidersInput
  airports: CAirportUpdateManyInput
  addresses: String
  serviceProviderEmails: ServiceProviderEmailUpdateManyWithoutServiceProviderInput
  emails: String
  phoneNumbers: String
  note: String
  standard: Boolean
  deliveryPrice: Float
  deliveryCurrency: CurrencyUpdateOneInput
  openingHours: OpeningHourUpdateManyWithoutServiceProviderInput
  serviceTypes: CServiceTypeUpdateManyInput
  useDetailsFromCompany: Boolean
  createdBy: CPersonUpdateOneInput
  _createdAt: DateTime
  modifiedBy: CPersonUpdateOneInput
  modifiedAt: DateTime
  removed: Boolean
}

input CServiceProviderUpdateWithWhereUniqueNestedInput {
  where: CServiceProviderWhereUniqueInput!
  data: CServiceProviderUpdateDataInput!
}

input CServiceProviderUpdateWithWhereUniqueWithoutCompanyInput {
  where: CServiceProviderWhereUniqueInput!
  data: CServiceProviderUpdateWithoutCompanyDataInput!
}

input CServiceProviderUpsertNestedInput {
  update: CServiceProviderUpdateDataInput!
  create: CServiceProviderCreateInput!
}

input CServiceProviderUpsertWithoutOpeningHoursInput {
  update: CServiceProviderUpdateWithoutOpeningHoursDataInput!
  create: CServiceProviderCreateWithoutOpeningHoursInput!
}

input CServiceProviderUpsertWithoutServiceProviderEmailsInput {
  update: CServiceProviderUpdateWithoutServiceProviderEmailsDataInput!
  create: CServiceProviderCreateWithoutServiceProviderEmailsInput!
}

input CServiceProviderUpsertWithoutServiceProviderPhoneNumbersInput {
  update: CServiceProviderUpdateWithoutServiceProviderPhoneNumbersDataInput!
  create: CServiceProviderCreateWithoutServiceProviderPhoneNumbersInput!
}

input CServiceProviderUpsertWithWhereUniqueNestedInput {
  where: CServiceProviderWhereUniqueInput!
  update: CServiceProviderUpdateDataInput!
  create: CServiceProviderCreateInput!
}

input CServiceProviderUpsertWithWhereUniqueWithoutCompanyInput {
  where: CServiceProviderWhereUniqueInput!
  update: CServiceProviderUpdateWithoutCompanyDataInput!
  create: CServiceProviderCreateWithoutCompanyInput!
}

input CServiceProviderWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  coreId: String
  coreId_not: String
  coreId_in: [String!]
  coreId_not_in: [String!]
  coreId_lt: String
  coreId_lte: String
  coreId_gt: String
  coreId_gte: String
  coreId_contains: String
  coreId_not_contains: String
  coreId_starts_with: String
  coreId_not_starts_with: String
  coreId_ends_with: String
  coreId_not_ends_with: String
  company: CCompanyWhereInput
  airports_every: CAirportWhereInput
  airports_some: CAirportWhereInput
  airports_none: CAirportWhereInput
  addresses: String
  addresses_not: String
  addresses_in: [String!]
  addresses_not_in: [String!]
  addresses_lt: String
  addresses_lte: String
  addresses_gt: String
  addresses_gte: String
  addresses_contains: String
  addresses_not_contains: String
  addresses_starts_with: String
  addresses_not_starts_with: String
  addresses_ends_with: String
  addresses_not_ends_with: String
  serviceProviderEmails_every: ServiceProviderEmailWhereInput
  serviceProviderEmails_some: ServiceProviderEmailWhereInput
  serviceProviderEmails_none: ServiceProviderEmailWhereInput
  serviceProviderPhoneNumbers_every: ServiceProviderPhoneNumberWhereInput
  serviceProviderPhoneNumbers_some: ServiceProviderPhoneNumberWhereInput
  serviceProviderPhoneNumbers_none: ServiceProviderPhoneNumberWhereInput
  emails: String
  emails_not: String
  emails_in: [String!]
  emails_not_in: [String!]
  emails_lt: String
  emails_lte: String
  emails_gt: String
  emails_gte: String
  emails_contains: String
  emails_not_contains: String
  emails_starts_with: String
  emails_not_starts_with: String
  emails_ends_with: String
  emails_not_ends_with: String
  phoneNumbers: String
  phoneNumbers_not: String
  phoneNumbers_in: [String!]
  phoneNumbers_not_in: [String!]
  phoneNumbers_lt: String
  phoneNumbers_lte: String
  phoneNumbers_gt: String
  phoneNumbers_gte: String
  phoneNumbers_contains: String
  phoneNumbers_not_contains: String
  phoneNumbers_starts_with: String
  phoneNumbers_not_starts_with: String
  phoneNumbers_ends_with: String
  phoneNumbers_not_ends_with: String
  note: String
  note_not: String
  note_in: [String!]
  note_not_in: [String!]
  note_lt: String
  note_lte: String
  note_gt: String
  note_gte: String
  note_contains: String
  note_not_contains: String
  note_starts_with: String
  note_not_starts_with: String
  note_ends_with: String
  note_not_ends_with: String
  standard: Boolean
  standard_not: Boolean
  deliveryPrice: Float
  deliveryPrice_not: Float
  deliveryPrice_in: [Float!]
  deliveryPrice_not_in: [Float!]
  deliveryPrice_lt: Float
  deliveryPrice_lte: Float
  deliveryPrice_gt: Float
  deliveryPrice_gte: Float
  deliveryCurrency: CurrencyWhereInput
  openingHours_every: OpeningHourWhereInput
  openingHours_some: OpeningHourWhereInput
  openingHours_none: OpeningHourWhereInput
  serviceTypes_every: CServiceTypeWhereInput
  serviceTypes_some: CServiceTypeWhereInput
  serviceTypes_none: CServiceTypeWhereInput
  useDetailsFromCompany: Boolean
  useDetailsFromCompany_not: Boolean
  createdBy: CPersonWhereInput
  _createdAt: DateTime
  _createdAt_not: DateTime
  _createdAt_in: [DateTime!]
  _createdAt_not_in: [DateTime!]
  _createdAt_lt: DateTime
  _createdAt_lte: DateTime
  _createdAt_gt: DateTime
  _createdAt_gte: DateTime
  modifiedBy: CPersonWhereInput
  modifiedAt: DateTime
  modifiedAt_not: DateTime
  modifiedAt_in: [DateTime!]
  modifiedAt_not_in: [DateTime!]
  modifiedAt_lt: DateTime
  modifiedAt_lte: DateTime
  modifiedAt_gt: DateTime
  modifiedAt_gte: DateTime
  removed: Boolean
  removed_not: Boolean
  AND: [CServiceProviderWhereInput!]
  OR: [CServiceProviderWhereInput!]
  NOT: [CServiceProviderWhereInput!]
}

input CServiceProviderWhereUniqueInput {
  id: ID
  coreId: String
}

type CServiceType {
  id: ID!
  coreId: String!
  description: String
  isActive: Boolean
}

type CServiceTypeConnection {
  pageInfo: PageInfo!
  edges: [CServiceTypeEdge]!
  aggregate: AggregateCServiceType!
}

input CServiceTypeCreateInput {
  coreId: String!
  description: String
  isActive: Boolean
}

input CServiceTypeCreateManyInput {
  create: [CServiceTypeCreateInput!]
  connect: [CServiceTypeWhereUniqueInput!]
}

type CServiceTypeEdge {
  node: CServiceType!
  cursor: String!
}

enum CServiceTypeOrderByInput {
  id_ASC
  id_DESC
  coreId_ASC
  coreId_DESC
  description_ASC
  description_DESC
  isActive_ASC
  isActive_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type CServiceTypePreviousValues {
  id: ID!
  coreId: String!
  description: String
  isActive: Boolean
}

input CServiceTypeScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  coreId: String
  coreId_not: String
  coreId_in: [String!]
  coreId_not_in: [String!]
  coreId_lt: String
  coreId_lte: String
  coreId_gt: String
  coreId_gte: String
  coreId_contains: String
  coreId_not_contains: String
  coreId_starts_with: String
  coreId_not_starts_with: String
  coreId_ends_with: String
  coreId_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  isActive: Boolean
  isActive_not: Boolean
  AND: [CServiceTypeScalarWhereInput!]
  OR: [CServiceTypeScalarWhereInput!]
  NOT: [CServiceTypeScalarWhereInput!]
}

type CServiceTypeSubscriptionPayload {
  mutation: MutationType!
  node: CServiceType
  updatedFields: [String!]
  previousValues: CServiceTypePreviousValues
}

input CServiceTypeSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CServiceTypeWhereInput
  AND: [CServiceTypeSubscriptionWhereInput!]
  OR: [CServiceTypeSubscriptionWhereInput!]
  NOT: [CServiceTypeSubscriptionWhereInput!]
}

input CServiceTypeUpdateDataInput {
  coreId: String
  description: String
  isActive: Boolean
}

input CServiceTypeUpdateInput {
  coreId: String
  description: String
  isActive: Boolean
}

input CServiceTypeUpdateManyDataInput {
  coreId: String
  description: String
  isActive: Boolean
}

input CServiceTypeUpdateManyInput {
  create: [CServiceTypeCreateInput!]
  update: [CServiceTypeUpdateWithWhereUniqueNestedInput!]
  upsert: [CServiceTypeUpsertWithWhereUniqueNestedInput!]
  delete: [CServiceTypeWhereUniqueInput!]
  connect: [CServiceTypeWhereUniqueInput!]
  set: [CServiceTypeWhereUniqueInput!]
  disconnect: [CServiceTypeWhereUniqueInput!]
  deleteMany: [CServiceTypeScalarWhereInput!]
  updateMany: [CServiceTypeUpdateManyWithWhereNestedInput!]
}

input CServiceTypeUpdateManyMutationInput {
  coreId: String
  description: String
  isActive: Boolean
}

input CServiceTypeUpdateManyWithWhereNestedInput {
  where: CServiceTypeScalarWhereInput!
  data: CServiceTypeUpdateManyDataInput!
}

input CServiceTypeUpdateWithWhereUniqueNestedInput {
  where: CServiceTypeWhereUniqueInput!
  data: CServiceTypeUpdateDataInput!
}

input CServiceTypeUpsertWithWhereUniqueNestedInput {
  where: CServiceTypeWhereUniqueInput!
  update: CServiceTypeUpdateDataInput!
  create: CServiceTypeCreateInput!
}

input CServiceTypeWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  coreId: String
  coreId_not: String
  coreId_in: [String!]
  coreId_not_in: [String!]
  coreId_lt: String
  coreId_lte: String
  coreId_gt: String
  coreId_gte: String
  coreId_contains: String
  coreId_not_contains: String
  coreId_starts_with: String
  coreId_not_starts_with: String
  coreId_ends_with: String
  coreId_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  isActive: Boolean
  isActive_not: Boolean
  AND: [CServiceTypeWhereInput!]
  OR: [CServiceTypeWhereInput!]
  NOT: [CServiceTypeWhereInput!]
}

input CServiceTypeWhereUniqueInput {
  id: ID
  coreId: String
}

type CTimezone {
  id: ID!
  coreId: String!
  effectiveFromTimeUtc: DateTime
  effectiveToTimeUtc: DateTime
  standardUtcOffsetMinutes: Int
  isActive: Boolean
  dstFromTimeUtc: DateTime
  dstToTimeUtc: DateTime
  dstUtcOffset: Int
  timezoneCode: String
  createdTimeUtc: DateTime
}

type CTimezoneConnection {
  pageInfo: PageInfo!
  edges: [CTimezoneEdge]!
  aggregate: AggregateCTimezone!
}

input CTimezoneCreateInput {
  coreId: String!
  effectiveFromTimeUtc: DateTime
  effectiveToTimeUtc: DateTime
  standardUtcOffsetMinutes: Int
  isActive: Boolean
  dstFromTimeUtc: DateTime
  dstToTimeUtc: DateTime
  dstUtcOffset: Int
  timezoneCode: String
  createdTimeUtc: DateTime
}

input CTimezoneCreateManyInput {
  create: [CTimezoneCreateInput!]
  connect: [CTimezoneWhereUniqueInput!]
}

type CTimezoneEdge {
  node: CTimezone!
  cursor: String!
}

enum CTimezoneOrderByInput {
  id_ASC
  id_DESC
  coreId_ASC
  coreId_DESC
  effectiveFromTimeUtc_ASC
  effectiveFromTimeUtc_DESC
  effectiveToTimeUtc_ASC
  effectiveToTimeUtc_DESC
  standardUtcOffsetMinutes_ASC
  standardUtcOffsetMinutes_DESC
  isActive_ASC
  isActive_DESC
  dstFromTimeUtc_ASC
  dstFromTimeUtc_DESC
  dstToTimeUtc_ASC
  dstToTimeUtc_DESC
  dstUtcOffset_ASC
  dstUtcOffset_DESC
  timezoneCode_ASC
  timezoneCode_DESC
  createdTimeUtc_ASC
  createdTimeUtc_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type CTimezonePreviousValues {
  id: ID!
  coreId: String!
  effectiveFromTimeUtc: DateTime
  effectiveToTimeUtc: DateTime
  standardUtcOffsetMinutes: Int
  isActive: Boolean
  dstFromTimeUtc: DateTime
  dstToTimeUtc: DateTime
  dstUtcOffset: Int
  timezoneCode: String
  createdTimeUtc: DateTime
}

input CTimezoneScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  coreId: String
  coreId_not: String
  coreId_in: [String!]
  coreId_not_in: [String!]
  coreId_lt: String
  coreId_lte: String
  coreId_gt: String
  coreId_gte: String
  coreId_contains: String
  coreId_not_contains: String
  coreId_starts_with: String
  coreId_not_starts_with: String
  coreId_ends_with: String
  coreId_not_ends_with: String
  effectiveFromTimeUtc: DateTime
  effectiveFromTimeUtc_not: DateTime
  effectiveFromTimeUtc_in: [DateTime!]
  effectiveFromTimeUtc_not_in: [DateTime!]
  effectiveFromTimeUtc_lt: DateTime
  effectiveFromTimeUtc_lte: DateTime
  effectiveFromTimeUtc_gt: DateTime
  effectiveFromTimeUtc_gte: DateTime
  effectiveToTimeUtc: DateTime
  effectiveToTimeUtc_not: DateTime
  effectiveToTimeUtc_in: [DateTime!]
  effectiveToTimeUtc_not_in: [DateTime!]
  effectiveToTimeUtc_lt: DateTime
  effectiveToTimeUtc_lte: DateTime
  effectiveToTimeUtc_gt: DateTime
  effectiveToTimeUtc_gte: DateTime
  standardUtcOffsetMinutes: Int
  standardUtcOffsetMinutes_not: Int
  standardUtcOffsetMinutes_in: [Int!]
  standardUtcOffsetMinutes_not_in: [Int!]
  standardUtcOffsetMinutes_lt: Int
  standardUtcOffsetMinutes_lte: Int
  standardUtcOffsetMinutes_gt: Int
  standardUtcOffsetMinutes_gte: Int
  isActive: Boolean
  isActive_not: Boolean
  dstFromTimeUtc: DateTime
  dstFromTimeUtc_not: DateTime
  dstFromTimeUtc_in: [DateTime!]
  dstFromTimeUtc_not_in: [DateTime!]
  dstFromTimeUtc_lt: DateTime
  dstFromTimeUtc_lte: DateTime
  dstFromTimeUtc_gt: DateTime
  dstFromTimeUtc_gte: DateTime
  dstToTimeUtc: DateTime
  dstToTimeUtc_not: DateTime
  dstToTimeUtc_in: [DateTime!]
  dstToTimeUtc_not_in: [DateTime!]
  dstToTimeUtc_lt: DateTime
  dstToTimeUtc_lte: DateTime
  dstToTimeUtc_gt: DateTime
  dstToTimeUtc_gte: DateTime
  dstUtcOffset: Int
  dstUtcOffset_not: Int
  dstUtcOffset_in: [Int!]
  dstUtcOffset_not_in: [Int!]
  dstUtcOffset_lt: Int
  dstUtcOffset_lte: Int
  dstUtcOffset_gt: Int
  dstUtcOffset_gte: Int
  timezoneCode: String
  timezoneCode_not: String
  timezoneCode_in: [String!]
  timezoneCode_not_in: [String!]
  timezoneCode_lt: String
  timezoneCode_lte: String
  timezoneCode_gt: String
  timezoneCode_gte: String
  timezoneCode_contains: String
  timezoneCode_not_contains: String
  timezoneCode_starts_with: String
  timezoneCode_not_starts_with: String
  timezoneCode_ends_with: String
  timezoneCode_not_ends_with: String
  createdTimeUtc: DateTime
  createdTimeUtc_not: DateTime
  createdTimeUtc_in: [DateTime!]
  createdTimeUtc_not_in: [DateTime!]
  createdTimeUtc_lt: DateTime
  createdTimeUtc_lte: DateTime
  createdTimeUtc_gt: DateTime
  createdTimeUtc_gte: DateTime
  AND: [CTimezoneScalarWhereInput!]
  OR: [CTimezoneScalarWhereInput!]
  NOT: [CTimezoneScalarWhereInput!]
}

type CTimezoneSubscriptionPayload {
  mutation: MutationType!
  node: CTimezone
  updatedFields: [String!]
  previousValues: CTimezonePreviousValues
}

input CTimezoneSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CTimezoneWhereInput
  AND: [CTimezoneSubscriptionWhereInput!]
  OR: [CTimezoneSubscriptionWhereInput!]
  NOT: [CTimezoneSubscriptionWhereInput!]
}

input CTimezoneUpdateDataInput {
  coreId: String
  effectiveFromTimeUtc: DateTime
  effectiveToTimeUtc: DateTime
  standardUtcOffsetMinutes: Int
  isActive: Boolean
  dstFromTimeUtc: DateTime
  dstToTimeUtc: DateTime
  dstUtcOffset: Int
  timezoneCode: String
  createdTimeUtc: DateTime
}

input CTimezoneUpdateInput {
  coreId: String
  effectiveFromTimeUtc: DateTime
  effectiveToTimeUtc: DateTime
  standardUtcOffsetMinutes: Int
  isActive: Boolean
  dstFromTimeUtc: DateTime
  dstToTimeUtc: DateTime
  dstUtcOffset: Int
  timezoneCode: String
  createdTimeUtc: DateTime
}

input CTimezoneUpdateManyDataInput {
  coreId: String
  effectiveFromTimeUtc: DateTime
  effectiveToTimeUtc: DateTime
  standardUtcOffsetMinutes: Int
  isActive: Boolean
  dstFromTimeUtc: DateTime
  dstToTimeUtc: DateTime
  dstUtcOffset: Int
  timezoneCode: String
  createdTimeUtc: DateTime
}

input CTimezoneUpdateManyInput {
  create: [CTimezoneCreateInput!]
  update: [CTimezoneUpdateWithWhereUniqueNestedInput!]
  upsert: [CTimezoneUpsertWithWhereUniqueNestedInput!]
  delete: [CTimezoneWhereUniqueInput!]
  connect: [CTimezoneWhereUniqueInput!]
  set: [CTimezoneWhereUniqueInput!]
  disconnect: [CTimezoneWhereUniqueInput!]
  deleteMany: [CTimezoneScalarWhereInput!]
  updateMany: [CTimezoneUpdateManyWithWhereNestedInput!]
}

input CTimezoneUpdateManyMutationInput {
  coreId: String
  effectiveFromTimeUtc: DateTime
  effectiveToTimeUtc: DateTime
  standardUtcOffsetMinutes: Int
  isActive: Boolean
  dstFromTimeUtc: DateTime
  dstToTimeUtc: DateTime
  dstUtcOffset: Int
  timezoneCode: String
  createdTimeUtc: DateTime
}

input CTimezoneUpdateManyWithWhereNestedInput {
  where: CTimezoneScalarWhereInput!
  data: CTimezoneUpdateManyDataInput!
}

input CTimezoneUpdateWithWhereUniqueNestedInput {
  where: CTimezoneWhereUniqueInput!
  data: CTimezoneUpdateDataInput!
}

input CTimezoneUpsertWithWhereUniqueNestedInput {
  where: CTimezoneWhereUniqueInput!
  update: CTimezoneUpdateDataInput!
  create: CTimezoneCreateInput!
}

input CTimezoneWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  coreId: String
  coreId_not: String
  coreId_in: [String!]
  coreId_not_in: [String!]
  coreId_lt: String
  coreId_lte: String
  coreId_gt: String
  coreId_gte: String
  coreId_contains: String
  coreId_not_contains: String
  coreId_starts_with: String
  coreId_not_starts_with: String
  coreId_ends_with: String
  coreId_not_ends_with: String
  effectiveFromTimeUtc: DateTime
  effectiveFromTimeUtc_not: DateTime
  effectiveFromTimeUtc_in: [DateTime!]
  effectiveFromTimeUtc_not_in: [DateTime!]
  effectiveFromTimeUtc_lt: DateTime
  effectiveFromTimeUtc_lte: DateTime
  effectiveFromTimeUtc_gt: DateTime
  effectiveFromTimeUtc_gte: DateTime
  effectiveToTimeUtc: DateTime
  effectiveToTimeUtc_not: DateTime
  effectiveToTimeUtc_in: [DateTime!]
  effectiveToTimeUtc_not_in: [DateTime!]
  effectiveToTimeUtc_lt: DateTime
  effectiveToTimeUtc_lte: DateTime
  effectiveToTimeUtc_gt: DateTime
  effectiveToTimeUtc_gte: DateTime
  standardUtcOffsetMinutes: Int
  standardUtcOffsetMinutes_not: Int
  standardUtcOffsetMinutes_in: [Int!]
  standardUtcOffsetMinutes_not_in: [Int!]
  standardUtcOffsetMinutes_lt: Int
  standardUtcOffsetMinutes_lte: Int
  standardUtcOffsetMinutes_gt: Int
  standardUtcOffsetMinutes_gte: Int
  isActive: Boolean
  isActive_not: Boolean
  dstFromTimeUtc: DateTime
  dstFromTimeUtc_not: DateTime
  dstFromTimeUtc_in: [DateTime!]
  dstFromTimeUtc_not_in: [DateTime!]
  dstFromTimeUtc_lt: DateTime
  dstFromTimeUtc_lte: DateTime
  dstFromTimeUtc_gt: DateTime
  dstFromTimeUtc_gte: DateTime
  dstToTimeUtc: DateTime
  dstToTimeUtc_not: DateTime
  dstToTimeUtc_in: [DateTime!]
  dstToTimeUtc_not_in: [DateTime!]
  dstToTimeUtc_lt: DateTime
  dstToTimeUtc_lte: DateTime
  dstToTimeUtc_gt: DateTime
  dstToTimeUtc_gte: DateTime
  dstUtcOffset: Int
  dstUtcOffset_not: Int
  dstUtcOffset_in: [Int!]
  dstUtcOffset_not_in: [Int!]
  dstUtcOffset_lt: Int
  dstUtcOffset_lte: Int
  dstUtcOffset_gt: Int
  dstUtcOffset_gte: Int
  timezoneCode: String
  timezoneCode_not: String
  timezoneCode_in: [String!]
  timezoneCode_not_in: [String!]
  timezoneCode_lt: String
  timezoneCode_lte: String
  timezoneCode_gt: String
  timezoneCode_gte: String
  timezoneCode_contains: String
  timezoneCode_not_contains: String
  timezoneCode_starts_with: String
  timezoneCode_not_starts_with: String
  timezoneCode_ends_with: String
  timezoneCode_not_ends_with: String
  createdTimeUtc: DateTime
  createdTimeUtc_not: DateTime
  createdTimeUtc_in: [DateTime!]
  createdTimeUtc_not_in: [DateTime!]
  createdTimeUtc_lt: DateTime
  createdTimeUtc_lte: DateTime
  createdTimeUtc_gt: DateTime
  createdTimeUtc_gte: DateTime
  AND: [CTimezoneWhereInput!]
  OR: [CTimezoneWhereInput!]
  NOT: [CTimezoneWhereInput!]
}

input CTimezoneWhereUniqueInput {
  id: ID
  coreId: String
}

type Currency {
  id: ID!
  coreId: String!
  code: String
  symbol: String
  name: String
  isActive: Boolean
}

type CurrencyConnection {
  pageInfo: PageInfo!
  edges: [CurrencyEdge]!
  aggregate: AggregateCurrency!
}

input CurrencyCreateInput {
  coreId: String!
  code: String
  symbol: String
  name: String
  isActive: Boolean
}

input CurrencyCreateOneInput {
  create: CurrencyCreateInput
  connect: CurrencyWhereUniqueInput
}

type CurrencyEdge {
  node: Currency!
  cursor: String!
}

enum CurrencyOrderByInput {
  id_ASC
  id_DESC
  coreId_ASC
  coreId_DESC
  code_ASC
  code_DESC
  symbol_ASC
  symbol_DESC
  name_ASC
  name_DESC
  isActive_ASC
  isActive_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type CurrencyPreviousValues {
  id: ID!
  coreId: String!
  code: String
  symbol: String
  name: String
  isActive: Boolean
}

type CurrencySubscriptionPayload {
  mutation: MutationType!
  node: Currency
  updatedFields: [String!]
  previousValues: CurrencyPreviousValues
}

input CurrencySubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CurrencyWhereInput
  AND: [CurrencySubscriptionWhereInput!]
  OR: [CurrencySubscriptionWhereInput!]
  NOT: [CurrencySubscriptionWhereInput!]
}

input CurrencyUpdateDataInput {
  coreId: String
  code: String
  symbol: String
  name: String
  isActive: Boolean
}

input CurrencyUpdateInput {
  coreId: String
  code: String
  symbol: String
  name: String
  isActive: Boolean
}

input CurrencyUpdateManyMutationInput {
  coreId: String
  code: String
  symbol: String
  name: String
  isActive: Boolean
}

input CurrencyUpdateOneInput {
  create: CurrencyCreateInput
  update: CurrencyUpdateDataInput
  upsert: CurrencyUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: CurrencyWhereUniqueInput
}

input CurrencyUpsertNestedInput {
  update: CurrencyUpdateDataInput!
  create: CurrencyCreateInput!
}

input CurrencyWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  coreId: String
  coreId_not: String
  coreId_in: [String!]
  coreId_not_in: [String!]
  coreId_lt: String
  coreId_lte: String
  coreId_gt: String
  coreId_gte: String
  coreId_contains: String
  coreId_not_contains: String
  coreId_starts_with: String
  coreId_not_starts_with: String
  coreId_ends_with: String
  coreId_not_ends_with: String
  code: String
  code_not: String
  code_in: [String!]
  code_not_in: [String!]
  code_lt: String
  code_lte: String
  code_gt: String
  code_gte: String
  code_contains: String
  code_not_contains: String
  code_starts_with: String
  code_not_starts_with: String
  code_ends_with: String
  code_not_ends_with: String
  symbol: String
  symbol_not: String
  symbol_in: [String!]
  symbol_not_in: [String!]
  symbol_lt: String
  symbol_lte: String
  symbol_gt: String
  symbol_gte: String
  symbol_contains: String
  symbol_not_contains: String
  symbol_starts_with: String
  symbol_not_starts_with: String
  symbol_ends_with: String
  symbol_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  isActive: Boolean
  isActive_not: Boolean
  AND: [CurrencyWhereInput!]
  OR: [CurrencyWhereInput!]
  NOT: [CurrencyWhereInput!]
}

input CurrencyWhereUniqueInput {
  id: ID
  coreId: String
}

scalar DateTime

enum DayOfWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

type DayOfWeekValue {
  id: ID!
  dayOfWeek: DayOfWeek
  value: String!
}

type DayOfWeekValueConnection {
  pageInfo: PageInfo!
  edges: [DayOfWeekValueEdge]!
  aggregate: AggregateDayOfWeekValue!
}

input DayOfWeekValueCreateInput {
  dayOfWeek: DayOfWeek
  value: String!
}

type DayOfWeekValueEdge {
  node: DayOfWeekValue!
  cursor: String!
}

enum DayOfWeekValueOrderByInput {
  id_ASC
  id_DESC
  dayOfWeek_ASC
  dayOfWeek_DESC
  value_ASC
  value_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type DayOfWeekValuePreviousValues {
  id: ID!
  dayOfWeek: DayOfWeek
  value: String!
}

type DayOfWeekValueSubscriptionPayload {
  mutation: MutationType!
  node: DayOfWeekValue
  updatedFields: [String!]
  previousValues: DayOfWeekValuePreviousValues
}

input DayOfWeekValueSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: DayOfWeekValueWhereInput
  AND: [DayOfWeekValueSubscriptionWhereInput!]
  OR: [DayOfWeekValueSubscriptionWhereInput!]
  NOT: [DayOfWeekValueSubscriptionWhereInput!]
}

input DayOfWeekValueUpdateInput {
  dayOfWeek: DayOfWeek
  value: String
}

input DayOfWeekValueUpdateManyMutationInput {
  dayOfWeek: DayOfWeek
  value: String
}

input DayOfWeekValueWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  dayOfWeek: DayOfWeek
  dayOfWeek_not: DayOfWeek
  dayOfWeek_in: [DayOfWeek!]
  dayOfWeek_not_in: [DayOfWeek!]
  value: String
  value_not: String
  value_in: [String!]
  value_not_in: [String!]
  value_lt: String
  value_lte: String
  value_gt: String
  value_gte: String
  value_contains: String
  value_not_contains: String
  value_starts_with: String
  value_not_starts_with: String
  value_ends_with: String
  value_not_ends_with: String
  AND: [DayOfWeekValueWhereInput!]
  OR: [DayOfWeekValueWhereInput!]
  NOT: [DayOfWeekValueWhereInput!]
}

input DayOfWeekValueWhereUniqueInput {
  id: ID
  dayOfWeek: DayOfWeek
}

type DefaultProposal {
  id: ID!
  coreId: String!
  name: String
  documentName: String
  validFrom: DateTime
  validTo: DateTime
  draft: Boolean
  company: CCompany
  priceLists(where: CPriceListWhereInput, orderBy: CPriceListOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CPriceList!]
  priceItems(where: CPriceItemWhereInput, orderBy: CPriceItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CPriceItem!]
  airports(where: CAirportWhereInput, orderBy: CAirportOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CAirport!]
  createdBy: CPerson
  _createdAt: DateTime
  modifiedBy: CPerson
  modifiedAt: DateTime
  removed: Boolean
}

type DefaultProposalConnection {
  pageInfo: PageInfo!
  edges: [DefaultProposalEdge]!
  aggregate: AggregateDefaultProposal!
}

input DefaultProposalCreateInput {
  coreId: String!
  name: String
  documentName: String
  validFrom: DateTime
  validTo: DateTime
  draft: Boolean
  company: CCompanyCreateOneInput
  priceLists: CPriceListCreateManyInput
  priceItems: CPriceItemCreateManyInput
  airports: CAirportCreateManyInput
  createdBy: CPersonCreateOneInput
  _createdAt: DateTime
  modifiedBy: CPersonCreateOneInput
  modifiedAt: DateTime
  removed: Boolean
}

type DefaultProposalEdge {
  node: DefaultProposal!
  cursor: String!
}

enum DefaultProposalOrderByInput {
  id_ASC
  id_DESC
  coreId_ASC
  coreId_DESC
  name_ASC
  name_DESC
  documentName_ASC
  documentName_DESC
  validFrom_ASC
  validFrom_DESC
  validTo_ASC
  validTo_DESC
  draft_ASC
  draft_DESC
  _createdAt_ASC
  _createdAt_DESC
  modifiedAt_ASC
  modifiedAt_DESC
  removed_ASC
  removed_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type DefaultProposalPreviousValues {
  id: ID!
  coreId: String!
  name: String
  documentName: String
  validFrom: DateTime
  validTo: DateTime
  draft: Boolean
  _createdAt: DateTime
  modifiedAt: DateTime
  removed: Boolean
}

type DefaultProposalSubscriptionPayload {
  mutation: MutationType!
  node: DefaultProposal
  updatedFields: [String!]
  previousValues: DefaultProposalPreviousValues
}

input DefaultProposalSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: DefaultProposalWhereInput
  AND: [DefaultProposalSubscriptionWhereInput!]
  OR: [DefaultProposalSubscriptionWhereInput!]
  NOT: [DefaultProposalSubscriptionWhereInput!]
}

input DefaultProposalUpdateInput {
  coreId: String
  name: String
  documentName: String
  validFrom: DateTime
  validTo: DateTime
  draft: Boolean
  company: CCompanyUpdateOneInput
  priceLists: CPriceListUpdateManyInput
  priceItems: CPriceItemUpdateManyInput
  airports: CAirportUpdateManyInput
  createdBy: CPersonUpdateOneInput
  _createdAt: DateTime
  modifiedBy: CPersonUpdateOneInput
  modifiedAt: DateTime
  removed: Boolean
}

input DefaultProposalUpdateManyMutationInput {
  coreId: String
  name: String
  documentName: String
  validFrom: DateTime
  validTo: DateTime
  draft: Boolean
  _createdAt: DateTime
  modifiedAt: DateTime
  removed: Boolean
}

input DefaultProposalWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  coreId: String
  coreId_not: String
  coreId_in: [String!]
  coreId_not_in: [String!]
  coreId_lt: String
  coreId_lte: String
  coreId_gt: String
  coreId_gte: String
  coreId_contains: String
  coreId_not_contains: String
  coreId_starts_with: String
  coreId_not_starts_with: String
  coreId_ends_with: String
  coreId_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  documentName: String
  documentName_not: String
  documentName_in: [String!]
  documentName_not_in: [String!]
  documentName_lt: String
  documentName_lte: String
  documentName_gt: String
  documentName_gte: String
  documentName_contains: String
  documentName_not_contains: String
  documentName_starts_with: String
  documentName_not_starts_with: String
  documentName_ends_with: String
  documentName_not_ends_with: String
  validFrom: DateTime
  validFrom_not: DateTime
  validFrom_in: [DateTime!]
  validFrom_not_in: [DateTime!]
  validFrom_lt: DateTime
  validFrom_lte: DateTime
  validFrom_gt: DateTime
  validFrom_gte: DateTime
  validTo: DateTime
  validTo_not: DateTime
  validTo_in: [DateTime!]
  validTo_not_in: [DateTime!]
  validTo_lt: DateTime
  validTo_lte: DateTime
  validTo_gt: DateTime
  validTo_gte: DateTime
  draft: Boolean
  draft_not: Boolean
  company: CCompanyWhereInput
  priceLists_every: CPriceListWhereInput
  priceLists_some: CPriceListWhereInput
  priceLists_none: CPriceListWhereInput
  priceItems_every: CPriceItemWhereInput
  priceItems_some: CPriceItemWhereInput
  priceItems_none: CPriceItemWhereInput
  airports_every: CAirportWhereInput
  airports_some: CAirportWhereInput
  airports_none: CAirportWhereInput
  createdBy: CPersonWhereInput
  _createdAt: DateTime
  _createdAt_not: DateTime
  _createdAt_in: [DateTime!]
  _createdAt_not_in: [DateTime!]
  _createdAt_lt: DateTime
  _createdAt_lte: DateTime
  _createdAt_gt: DateTime
  _createdAt_gte: DateTime
  modifiedBy: CPersonWhereInput
  modifiedAt: DateTime
  modifiedAt_not: DateTime
  modifiedAt_in: [DateTime!]
  modifiedAt_not_in: [DateTime!]
  modifiedAt_lt: DateTime
  modifiedAt_lte: DateTime
  modifiedAt_gt: DateTime
  modifiedAt_gte: DateTime
  removed: Boolean
  removed_not: Boolean
  AND: [DefaultProposalWhereInput!]
  OR: [DefaultProposalWhereInput!]
  NOT: [DefaultProposalWhereInput!]
}

input DefaultProposalWhereUniqueInput {
  id: ID
  coreId: String
}

type Delivery {
  id: ID!
  coreId: String
  deliveryTime: DateTime
  handlingCharge: Int
  handlingCurrency: Currency
  deliveryCharge: Int
  deliveryCurrency: Currency
  deliveryChargeable: Boolean
  handlingChargeable: Boolean
  airport: CAirport
  specialNote: String
}

type DeliveryConnection {
  pageInfo: PageInfo!
  edges: [DeliveryEdge]!
  aggregate: AggregateDelivery!
}

input DeliveryCreateInput {
  coreId: String
  deliveryTime: DateTime
  handlingCharge: Int
  handlingCurrency: CurrencyCreateOneInput
  deliveryCharge: Int
  deliveryCurrency: CurrencyCreateOneInput
  deliveryChargeable: Boolean
  handlingChargeable: Boolean
  airport: CAirportCreateOneInput
  specialNote: String
}

input DeliveryCreateOneInput {
  create: DeliveryCreateInput
  connect: DeliveryWhereUniqueInput
}

type DeliveryEdge {
  node: Delivery!
  cursor: String!
}

enum DeliveryOrderByInput {
  id_ASC
  id_DESC
  coreId_ASC
  coreId_DESC
  deliveryTime_ASC
  deliveryTime_DESC
  handlingCharge_ASC
  handlingCharge_DESC
  deliveryCharge_ASC
  deliveryCharge_DESC
  deliveryChargeable_ASC
  deliveryChargeable_DESC
  handlingChargeable_ASC
  handlingChargeable_DESC
  specialNote_ASC
  specialNote_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type DeliveryPreviousValues {
  id: ID!
  coreId: String
  deliveryTime: DateTime
  handlingCharge: Int
  deliveryCharge: Int
  deliveryChargeable: Boolean
  handlingChargeable: Boolean
  specialNote: String
}

type DeliverySubscriptionPayload {
  mutation: MutationType!
  node: Delivery
  updatedFields: [String!]
  previousValues: DeliveryPreviousValues
}

input DeliverySubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: DeliveryWhereInput
  AND: [DeliverySubscriptionWhereInput!]
  OR: [DeliverySubscriptionWhereInput!]
  NOT: [DeliverySubscriptionWhereInput!]
}

input DeliveryUpdateDataInput {
  coreId: String
  deliveryTime: DateTime
  handlingCharge: Int
  handlingCurrency: CurrencyUpdateOneInput
  deliveryCharge: Int
  deliveryCurrency: CurrencyUpdateOneInput
  deliveryChargeable: Boolean
  handlingChargeable: Boolean
  airport: CAirportUpdateOneInput
  specialNote: String
}

input DeliveryUpdateInput {
  coreId: String
  deliveryTime: DateTime
  handlingCharge: Int
  handlingCurrency: CurrencyUpdateOneInput
  deliveryCharge: Int
  deliveryCurrency: CurrencyUpdateOneInput
  deliveryChargeable: Boolean
  handlingChargeable: Boolean
  airport: CAirportUpdateOneInput
  specialNote: String
}

input DeliveryUpdateManyMutationInput {
  coreId: String
  deliveryTime: DateTime
  handlingCharge: Int
  deliveryCharge: Int
  deliveryChargeable: Boolean
  handlingChargeable: Boolean
  specialNote: String
}

input DeliveryUpdateOneInput {
  create: DeliveryCreateInput
  update: DeliveryUpdateDataInput
  upsert: DeliveryUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: DeliveryWhereUniqueInput
}

input DeliveryUpsertNestedInput {
  update: DeliveryUpdateDataInput!
  create: DeliveryCreateInput!
}

input DeliveryWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  coreId: String
  coreId_not: String
  coreId_in: [String!]
  coreId_not_in: [String!]
  coreId_lt: String
  coreId_lte: String
  coreId_gt: String
  coreId_gte: String
  coreId_contains: String
  coreId_not_contains: String
  coreId_starts_with: String
  coreId_not_starts_with: String
  coreId_ends_with: String
  coreId_not_ends_with: String
  deliveryTime: DateTime
  deliveryTime_not: DateTime
  deliveryTime_in: [DateTime!]
  deliveryTime_not_in: [DateTime!]
  deliveryTime_lt: DateTime
  deliveryTime_lte: DateTime
  deliveryTime_gt: DateTime
  deliveryTime_gte: DateTime
  handlingCharge: Int
  handlingCharge_not: Int
  handlingCharge_in: [Int!]
  handlingCharge_not_in: [Int!]
  handlingCharge_lt: Int
  handlingCharge_lte: Int
  handlingCharge_gt: Int
  handlingCharge_gte: Int
  handlingCurrency: CurrencyWhereInput
  deliveryCharge: Int
  deliveryCharge_not: Int
  deliveryCharge_in: [Int!]
  deliveryCharge_not_in: [Int!]
  deliveryCharge_lt: Int
  deliveryCharge_lte: Int
  deliveryCharge_gt: Int
  deliveryCharge_gte: Int
  deliveryCurrency: CurrencyWhereInput
  deliveryChargeable: Boolean
  deliveryChargeable_not: Boolean
  handlingChargeable: Boolean
  handlingChargeable_not: Boolean
  airport: CAirportWhereInput
  specialNote: String
  specialNote_not: String
  specialNote_in: [String!]
  specialNote_not_in: [String!]
  specialNote_lt: String
  specialNote_lte: String
  specialNote_gt: String
  specialNote_gte: String
  specialNote_contains: String
  specialNote_not_contains: String
  specialNote_starts_with: String
  specialNote_not_starts_with: String
  specialNote_ends_with: String
  specialNote_not_ends_with: String
  AND: [DeliveryWhereInput!]
  OR: [DeliveryWhereInput!]
  NOT: [DeliveryWhereInput!]
}

input DeliveryWhereUniqueInput {
  id: ID
  coreId: String
}

type EmailAddress {
  id: ID!
  coreId: String!
  emailAddress: String
  person: CPerson
}

type EmailAddressConnection {
  pageInfo: PageInfo!
  edges: [EmailAddressEdge]!
  aggregate: AggregateEmailAddress!
}

input EmailAddressCreateInput {
  coreId: String!
  emailAddress: String
  person: CPersonCreateOneInput
}

type EmailAddressEdge {
  node: EmailAddress!
  cursor: String!
}

enum EmailAddressOrderByInput {
  id_ASC
  id_DESC
  coreId_ASC
  coreId_DESC
  emailAddress_ASC
  emailAddress_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type EmailAddressPreviousValues {
  id: ID!
  coreId: String!
  emailAddress: String
}

type EmailAddressSubscriptionPayload {
  mutation: MutationType!
  node: EmailAddress
  updatedFields: [String!]
  previousValues: EmailAddressPreviousValues
}

input EmailAddressSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: EmailAddressWhereInput
  AND: [EmailAddressSubscriptionWhereInput!]
  OR: [EmailAddressSubscriptionWhereInput!]
  NOT: [EmailAddressSubscriptionWhereInput!]
}

input EmailAddressUpdateInput {
  coreId: String
  emailAddress: String
  person: CPersonUpdateOneInput
}

input EmailAddressUpdateManyMutationInput {
  coreId: String
  emailAddress: String
}

input EmailAddressWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  coreId: String
  coreId_not: String
  coreId_in: [String!]
  coreId_not_in: [String!]
  coreId_lt: String
  coreId_lte: String
  coreId_gt: String
  coreId_gte: String
  coreId_contains: String
  coreId_not_contains: String
  coreId_starts_with: String
  coreId_not_starts_with: String
  coreId_ends_with: String
  coreId_not_ends_with: String
  emailAddress: String
  emailAddress_not: String
  emailAddress_in: [String!]
  emailAddress_not_in: [String!]
  emailAddress_lt: String
  emailAddress_lte: String
  emailAddress_gt: String
  emailAddress_gte: String
  emailAddress_contains: String
  emailAddress_not_contains: String
  emailAddress_starts_with: String
  emailAddress_not_starts_with: String
  emailAddress_ends_with: String
  emailAddress_not_ends_with: String
  person: CPersonWhereInput
  AND: [EmailAddressWhereInput!]
  OR: [EmailAddressWhereInput!]
  NOT: [EmailAddressWhereInput!]
}

input EmailAddressWhereUniqueInput {
  id: ID
  coreId: String
}

type FlightFileProposal {
  id: ID!
  coreId: String!
  proposalDocument: ProposalDocument
  sender: CPerson
  sentAt: DateTime
}

type FlightFileProposalConnection {
  pageInfo: PageInfo!
  edges: [FlightFileProposalEdge]!
  aggregate: AggregateFlightFileProposal!
}

input FlightFileProposalCreateInput {
  coreId: String!
  proposalDocument: ProposalDocumentCreateOneWithoutFlightFileProposalInput
  sender: CPersonCreateOneInput
  sentAt: DateTime
}

input FlightFileProposalCreateOneWithoutProposalDocumentInput {
  create: FlightFileProposalCreateWithoutProposalDocumentInput
  connect: FlightFileProposalWhereUniqueInput
}

input FlightFileProposalCreateWithoutProposalDocumentInput {
  coreId: String!
  sender: CPersonCreateOneInput
  sentAt: DateTime
}

type FlightFileProposalEdge {
  node: FlightFileProposal!
  cursor: String!
}

enum FlightFileProposalOrderByInput {
  id_ASC
  id_DESC
  coreId_ASC
  coreId_DESC
  sentAt_ASC
  sentAt_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type FlightFileProposalPreviousValues {
  id: ID!
  coreId: String!
  sentAt: DateTime
}

type FlightFileProposalSubscriptionPayload {
  mutation: MutationType!
  node: FlightFileProposal
  updatedFields: [String!]
  previousValues: FlightFileProposalPreviousValues
}

input FlightFileProposalSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: FlightFileProposalWhereInput
  AND: [FlightFileProposalSubscriptionWhereInput!]
  OR: [FlightFileProposalSubscriptionWhereInput!]
  NOT: [FlightFileProposalSubscriptionWhereInput!]
}

input FlightFileProposalUpdateInput {
  coreId: String
  proposalDocument: ProposalDocumentUpdateOneWithoutFlightFileProposalInput
  sender: CPersonUpdateOneInput
  sentAt: DateTime
}

input FlightFileProposalUpdateManyMutationInput {
  coreId: String
  sentAt: DateTime
}

input FlightFileProposalUpdateOneWithoutProposalDocumentInput {
  create: FlightFileProposalCreateWithoutProposalDocumentInput
  update: FlightFileProposalUpdateWithoutProposalDocumentDataInput
  upsert: FlightFileProposalUpsertWithoutProposalDocumentInput
  delete: Boolean
  disconnect: Boolean
  connect: FlightFileProposalWhereUniqueInput
}

input FlightFileProposalUpdateWithoutProposalDocumentDataInput {
  coreId: String
  sender: CPersonUpdateOneInput
  sentAt: DateTime
}

input FlightFileProposalUpsertWithoutProposalDocumentInput {
  update: FlightFileProposalUpdateWithoutProposalDocumentDataInput!
  create: FlightFileProposalCreateWithoutProposalDocumentInput!
}

input FlightFileProposalWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  coreId: String
  coreId_not: String
  coreId_in: [String!]
  coreId_not_in: [String!]
  coreId_lt: String
  coreId_lte: String
  coreId_gt: String
  coreId_gte: String
  coreId_contains: String
  coreId_not_contains: String
  coreId_starts_with: String
  coreId_not_starts_with: String
  coreId_ends_with: String
  coreId_not_ends_with: String
  proposalDocument: ProposalDocumentWhereInput
  sender: CPersonWhereInput
  sentAt: DateTime
  sentAt_not: DateTime
  sentAt_in: [DateTime!]
  sentAt_not_in: [DateTime!]
  sentAt_lt: DateTime
  sentAt_lte: DateTime
  sentAt_gt: DateTime
  sentAt_gte: DateTime
  AND: [FlightFileProposalWhereInput!]
  OR: [FlightFileProposalWhereInput!]
  NOT: [FlightFileProposalWhereInput!]
}

input FlightFileProposalWhereUniqueInput {
  id: ID
  coreId: String
}

type LegBusinessType {
  id: ID!
  coreId: String!
  description: String
  name: String
  displayName: String
  isActive: Boolean
}

type LegBusinessTypeConnection {
  pageInfo: PageInfo!
  edges: [LegBusinessTypeEdge]!
  aggregate: AggregateLegBusinessType!
}

input LegBusinessTypeCreateInput {
  coreId: String!
  description: String
  name: String
  displayName: String
  isActive: Boolean
}

input LegBusinessTypeCreateOneInput {
  create: LegBusinessTypeCreateInput
  connect: LegBusinessTypeWhereUniqueInput
}

type LegBusinessTypeEdge {
  node: LegBusinessType!
  cursor: String!
}

enum LegBusinessTypeOrderByInput {
  id_ASC
  id_DESC
  coreId_ASC
  coreId_DESC
  description_ASC
  description_DESC
  name_ASC
  name_DESC
  displayName_ASC
  displayName_DESC
  isActive_ASC
  isActive_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type LegBusinessTypePreviousValues {
  id: ID!
  coreId: String!
  description: String
  name: String
  displayName: String
  isActive: Boolean
}

type LegBusinessTypeSubscriptionPayload {
  mutation: MutationType!
  node: LegBusinessType
  updatedFields: [String!]
  previousValues: LegBusinessTypePreviousValues
}

input LegBusinessTypeSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: LegBusinessTypeWhereInput
  AND: [LegBusinessTypeSubscriptionWhereInput!]
  OR: [LegBusinessTypeSubscriptionWhereInput!]
  NOT: [LegBusinessTypeSubscriptionWhereInput!]
}

input LegBusinessTypeUpdateDataInput {
  coreId: String
  description: String
  name: String
  displayName: String
  isActive: Boolean
}

input LegBusinessTypeUpdateInput {
  coreId: String
  description: String
  name: String
  displayName: String
  isActive: Boolean
}

input LegBusinessTypeUpdateManyMutationInput {
  coreId: String
  description: String
  name: String
  displayName: String
  isActive: Boolean
}

input LegBusinessTypeUpdateOneInput {
  create: LegBusinessTypeCreateInput
  update: LegBusinessTypeUpdateDataInput
  upsert: LegBusinessTypeUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: LegBusinessTypeWhereUniqueInput
}

input LegBusinessTypeUpsertNestedInput {
  update: LegBusinessTypeUpdateDataInput!
  create: LegBusinessTypeCreateInput!
}

input LegBusinessTypeWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  coreId: String
  coreId_not: String
  coreId_in: [String!]
  coreId_not_in: [String!]
  coreId_lt: String
  coreId_lte: String
  coreId_gt: String
  coreId_gte: String
  coreId_contains: String
  coreId_not_contains: String
  coreId_starts_with: String
  coreId_not_starts_with: String
  coreId_ends_with: String
  coreId_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  displayName: String
  displayName_not: String
  displayName_in: [String!]
  displayName_not_in: [String!]
  displayName_lt: String
  displayName_lte: String
  displayName_gt: String
  displayName_gte: String
  displayName_contains: String
  displayName_not_contains: String
  displayName_starts_with: String
  displayName_not_starts_with: String
  displayName_ends_with: String
  displayName_not_ends_with: String
  isActive: Boolean
  isActive_not: Boolean
  AND: [LegBusinessTypeWhereInput!]
  OR: [LegBusinessTypeWhereInput!]
  NOT: [LegBusinessTypeWhereInput!]
}

input LegBusinessTypeWhereUniqueInput {
  id: ID
  coreId: String
}

type LegOperationalStatus {
  id: ID!
  coreId: String!
  name: String
  description: String
  isActive: Boolean
}

type LegOperationalStatusConnection {
  pageInfo: PageInfo!
  edges: [LegOperationalStatusEdge]!
  aggregate: AggregateLegOperationalStatus!
}

input LegOperationalStatusCreateInput {
  coreId: String!
  name: String
  description: String
  isActive: Boolean
}

input LegOperationalStatusCreateOneInput {
  create: LegOperationalStatusCreateInput
  connect: LegOperationalStatusWhereUniqueInput
}

type LegOperationalStatusEdge {
  node: LegOperationalStatus!
  cursor: String!
}

enum LegOperationalStatusOrderByInput {
  id_ASC
  id_DESC
  coreId_ASC
  coreId_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  isActive_ASC
  isActive_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type LegOperationalStatusPreviousValues {
  id: ID!
  coreId: String!
  name: String
  description: String
  isActive: Boolean
}

type LegOperationalStatusSubscriptionPayload {
  mutation: MutationType!
  node: LegOperationalStatus
  updatedFields: [String!]
  previousValues: LegOperationalStatusPreviousValues
}

input LegOperationalStatusSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: LegOperationalStatusWhereInput
  AND: [LegOperationalStatusSubscriptionWhereInput!]
  OR: [LegOperationalStatusSubscriptionWhereInput!]
  NOT: [LegOperationalStatusSubscriptionWhereInput!]
}

input LegOperationalStatusUpdateDataInput {
  coreId: String
  name: String
  description: String
  isActive: Boolean
}

input LegOperationalStatusUpdateInput {
  coreId: String
  name: String
  description: String
  isActive: Boolean
}

input LegOperationalStatusUpdateManyMutationInput {
  coreId: String
  name: String
  description: String
  isActive: Boolean
}

input LegOperationalStatusUpdateOneInput {
  create: LegOperationalStatusCreateInput
  update: LegOperationalStatusUpdateDataInput
  upsert: LegOperationalStatusUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: LegOperationalStatusWhereUniqueInput
}

input LegOperationalStatusUpsertNestedInput {
  update: LegOperationalStatusUpdateDataInput!
  create: LegOperationalStatusCreateInput!
}

input LegOperationalStatusWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  coreId: String
  coreId_not: String
  coreId_in: [String!]
  coreId_not_in: [String!]
  coreId_lt: String
  coreId_lte: String
  coreId_gt: String
  coreId_gte: String
  coreId_contains: String
  coreId_not_contains: String
  coreId_starts_with: String
  coreId_not_starts_with: String
  coreId_ends_with: String
  coreId_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  isActive: Boolean
  isActive_not: Boolean
  AND: [LegOperationalStatusWhereInput!]
  OR: [LegOperationalStatusWhereInput!]
  NOT: [LegOperationalStatusWhereInput!]
}

input LegOperationalStatusWhereUniqueInput {
  id: ID
  coreId: String
}

type LegOperationalType {
  id: ID!
  coreId: String!
  name: String
  description: String
  isActive: Boolean
}

type LegOperationalTypeConnection {
  pageInfo: PageInfo!
  edges: [LegOperationalTypeEdge]!
  aggregate: AggregateLegOperationalType!
}

input LegOperationalTypeCreateInput {
  coreId: String!
  name: String
  description: String
  isActive: Boolean
}

input LegOperationalTypeCreateOneInput {
  create: LegOperationalTypeCreateInput
  connect: LegOperationalTypeWhereUniqueInput
}

type LegOperationalTypeEdge {
  node: LegOperationalType!
  cursor: String!
}

enum LegOperationalTypeOrderByInput {
  id_ASC
  id_DESC
  coreId_ASC
  coreId_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  isActive_ASC
  isActive_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type LegOperationalTypePreviousValues {
  id: ID!
  coreId: String!
  name: String
  description: String
  isActive: Boolean
}

type LegOperationalTypeSubscriptionPayload {
  mutation: MutationType!
  node: LegOperationalType
  updatedFields: [String!]
  previousValues: LegOperationalTypePreviousValues
}

input LegOperationalTypeSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: LegOperationalTypeWhereInput
  AND: [LegOperationalTypeSubscriptionWhereInput!]
  OR: [LegOperationalTypeSubscriptionWhereInput!]
  NOT: [LegOperationalTypeSubscriptionWhereInput!]
}

input LegOperationalTypeUpdateDataInput {
  coreId: String
  name: String
  description: String
  isActive: Boolean
}

input LegOperationalTypeUpdateInput {
  coreId: String
  name: String
  description: String
  isActive: Boolean
}

input LegOperationalTypeUpdateManyMutationInput {
  coreId: String
  name: String
  description: String
  isActive: Boolean
}

input LegOperationalTypeUpdateOneInput {
  create: LegOperationalTypeCreateInput
  update: LegOperationalTypeUpdateDataInput
  upsert: LegOperationalTypeUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: LegOperationalTypeWhereUniqueInput
}

input LegOperationalTypeUpsertNestedInput {
  update: LegOperationalTypeUpdateDataInput!
  create: LegOperationalTypeCreateInput!
}

input LegOperationalTypeWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  coreId: String
  coreId_not: String
  coreId_in: [String!]
  coreId_not_in: [String!]
  coreId_lt: String
  coreId_lte: String
  coreId_gt: String
  coreId_gte: String
  coreId_contains: String
  coreId_not_contains: String
  coreId_starts_with: String
  coreId_not_starts_with: String
  coreId_ends_with: String
  coreId_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  isActive: Boolean
  isActive_not: Boolean
  AND: [LegOperationalTypeWhereInput!]
  OR: [LegOperationalTypeWhereInput!]
  NOT: [LegOperationalTypeWhereInput!]
}

input LegOperationalTypeWhereUniqueInput {
  id: ID
  coreId: String
}

scalar Long

type MsTask {
  id: ID!
  coreId: String!
  task: CateringTask
  deadline: Int
  fileLink: String
  note: String
  status: String
  createdBy: CPerson
  _createdAt: DateTime
  removed: Boolean
}

type MsTaskConnection {
  pageInfo: PageInfo!
  edges: [MsTaskEdge]!
  aggregate: AggregateMsTask!
}

input MsTaskCreateInput {
  coreId: String!
  task: CateringTaskCreateOneWithoutMsTasksInput
  deadline: Int
  fileLink: String
  note: String
  status: String
  createdBy: CPersonCreateOneInput
  _createdAt: DateTime
  removed: Boolean
}

input MsTaskCreateManyWithoutTaskInput {
  create: [MsTaskCreateWithoutTaskInput!]
  connect: [MsTaskWhereUniqueInput!]
}

input MsTaskCreateWithoutTaskInput {
  coreId: String!
  deadline: Int
  fileLink: String
  note: String
  status: String
  createdBy: CPersonCreateOneInput
  _createdAt: DateTime
  removed: Boolean
}

type MsTaskEdge {
  node: MsTask!
  cursor: String!
}

enum MsTaskOrderByInput {
  id_ASC
  id_DESC
  coreId_ASC
  coreId_DESC
  deadline_ASC
  deadline_DESC
  fileLink_ASC
  fileLink_DESC
  note_ASC
  note_DESC
  status_ASC
  status_DESC
  _createdAt_ASC
  _createdAt_DESC
  removed_ASC
  removed_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type MsTaskPreviousValues {
  id: ID!
  coreId: String!
  deadline: Int
  fileLink: String
  note: String
  status: String
  _createdAt: DateTime
  removed: Boolean
}

input MsTaskScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  coreId: String
  coreId_not: String
  coreId_in: [String!]
  coreId_not_in: [String!]
  coreId_lt: String
  coreId_lte: String
  coreId_gt: String
  coreId_gte: String
  coreId_contains: String
  coreId_not_contains: String
  coreId_starts_with: String
  coreId_not_starts_with: String
  coreId_ends_with: String
  coreId_not_ends_with: String
  deadline: Int
  deadline_not: Int
  deadline_in: [Int!]
  deadline_not_in: [Int!]
  deadline_lt: Int
  deadline_lte: Int
  deadline_gt: Int
  deadline_gte: Int
  fileLink: String
  fileLink_not: String
  fileLink_in: [String!]
  fileLink_not_in: [String!]
  fileLink_lt: String
  fileLink_lte: String
  fileLink_gt: String
  fileLink_gte: String
  fileLink_contains: String
  fileLink_not_contains: String
  fileLink_starts_with: String
  fileLink_not_starts_with: String
  fileLink_ends_with: String
  fileLink_not_ends_with: String
  note: String
  note_not: String
  note_in: [String!]
  note_not_in: [String!]
  note_lt: String
  note_lte: String
  note_gt: String
  note_gte: String
  note_contains: String
  note_not_contains: String
  note_starts_with: String
  note_not_starts_with: String
  note_ends_with: String
  note_not_ends_with: String
  status: String
  status_not: String
  status_in: [String!]
  status_not_in: [String!]
  status_lt: String
  status_lte: String
  status_gt: String
  status_gte: String
  status_contains: String
  status_not_contains: String
  status_starts_with: String
  status_not_starts_with: String
  status_ends_with: String
  status_not_ends_with: String
  _createdAt: DateTime
  _createdAt_not: DateTime
  _createdAt_in: [DateTime!]
  _createdAt_not_in: [DateTime!]
  _createdAt_lt: DateTime
  _createdAt_lte: DateTime
  _createdAt_gt: DateTime
  _createdAt_gte: DateTime
  removed: Boolean
  removed_not: Boolean
  AND: [MsTaskScalarWhereInput!]
  OR: [MsTaskScalarWhereInput!]
  NOT: [MsTaskScalarWhereInput!]
}

type MsTaskSubscriptionPayload {
  mutation: MutationType!
  node: MsTask
  updatedFields: [String!]
  previousValues: MsTaskPreviousValues
}

input MsTaskSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: MsTaskWhereInput
  AND: [MsTaskSubscriptionWhereInput!]
  OR: [MsTaskSubscriptionWhereInput!]
  NOT: [MsTaskSubscriptionWhereInput!]
}

input MsTaskUpdateInput {
  coreId: String
  task: CateringTaskUpdateOneWithoutMsTasksInput
  deadline: Int
  fileLink: String
  note: String
  status: String
  createdBy: CPersonUpdateOneInput
  _createdAt: DateTime
  removed: Boolean
}

input MsTaskUpdateManyDataInput {
  coreId: String
  deadline: Int
  fileLink: String
  note: String
  status: String
  _createdAt: DateTime
  removed: Boolean
}

input MsTaskUpdateManyMutationInput {
  coreId: String
  deadline: Int
  fileLink: String
  note: String
  status: String
  _createdAt: DateTime
  removed: Boolean
}

input MsTaskUpdateManyWithoutTaskInput {
  create: [MsTaskCreateWithoutTaskInput!]
  delete: [MsTaskWhereUniqueInput!]
  connect: [MsTaskWhereUniqueInput!]
  set: [MsTaskWhereUniqueInput!]
  disconnect: [MsTaskWhereUniqueInput!]
  update: [MsTaskUpdateWithWhereUniqueWithoutTaskInput!]
  upsert: [MsTaskUpsertWithWhereUniqueWithoutTaskInput!]
  deleteMany: [MsTaskScalarWhereInput!]
  updateMany: [MsTaskUpdateManyWithWhereNestedInput!]
}

input MsTaskUpdateManyWithWhereNestedInput {
  where: MsTaskScalarWhereInput!
  data: MsTaskUpdateManyDataInput!
}

input MsTaskUpdateWithoutTaskDataInput {
  coreId: String
  deadline: Int
  fileLink: String
  note: String
  status: String
  createdBy: CPersonUpdateOneInput
  _createdAt: DateTime
  removed: Boolean
}

input MsTaskUpdateWithWhereUniqueWithoutTaskInput {
  where: MsTaskWhereUniqueInput!
  data: MsTaskUpdateWithoutTaskDataInput!
}

input MsTaskUpsertWithWhereUniqueWithoutTaskInput {
  where: MsTaskWhereUniqueInput!
  update: MsTaskUpdateWithoutTaskDataInput!
  create: MsTaskCreateWithoutTaskInput!
}

input MsTaskWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  coreId: String
  coreId_not: String
  coreId_in: [String!]
  coreId_not_in: [String!]
  coreId_lt: String
  coreId_lte: String
  coreId_gt: String
  coreId_gte: String
  coreId_contains: String
  coreId_not_contains: String
  coreId_starts_with: String
  coreId_not_starts_with: String
  coreId_ends_with: String
  coreId_not_ends_with: String
  task: CateringTaskWhereInput
  deadline: Int
  deadline_not: Int
  deadline_in: [Int!]
  deadline_not_in: [Int!]
  deadline_lt: Int
  deadline_lte: Int
  deadline_gt: Int
  deadline_gte: Int
  fileLink: String
  fileLink_not: String
  fileLink_in: [String!]
  fileLink_not_in: [String!]
  fileLink_lt: String
  fileLink_lte: String
  fileLink_gt: String
  fileLink_gte: String
  fileLink_contains: String
  fileLink_not_contains: String
  fileLink_starts_with: String
  fileLink_not_starts_with: String
  fileLink_ends_with: String
  fileLink_not_ends_with: String
  note: String
  note_not: String
  note_in: [String!]
  note_not_in: [String!]
  note_lt: String
  note_lte: String
  note_gt: String
  note_gte: String
  note_contains: String
  note_not_contains: String
  note_starts_with: String
  note_not_starts_with: String
  note_ends_with: String
  note_not_ends_with: String
  status: String
  status_not: String
  status_in: [String!]
  status_not_in: [String!]
  status_lt: String
  status_lte: String
  status_gt: String
  status_gte: String
  status_contains: String
  status_not_contains: String
  status_starts_with: String
  status_not_starts_with: String
  status_ends_with: String
  status_not_ends_with: String
  createdBy: CPersonWhereInput
  _createdAt: DateTime
  _createdAt_not: DateTime
  _createdAt_in: [DateTime!]
  _createdAt_not_in: [DateTime!]
  _createdAt_lt: DateTime
  _createdAt_lte: DateTime
  _createdAt_gt: DateTime
  _createdAt_gte: DateTime
  removed: Boolean
  removed_not: Boolean
  AND: [MsTaskWhereInput!]
  OR: [MsTaskWhereInput!]
  NOT: [MsTaskWhereInput!]
}

input MsTaskWhereUniqueInput {
  id: ID
  coreId: String
}

type Mutation {
  createCAccount(data: CAccountCreateInput!): CAccount!
  updateCAccount(data: CAccountUpdateInput!, where: CAccountWhereUniqueInput!): CAccount
  updateManyCAccounts(data: CAccountUpdateManyMutationInput!, where: CAccountWhereInput): BatchPayload!
  upsertCAccount(where: CAccountWhereUniqueInput!, create: CAccountCreateInput!, update: CAccountUpdateInput!): CAccount!
  deleteCAccount(where: CAccountWhereUniqueInput!): CAccount
  deleteManyCAccounts(where: CAccountWhereInput): BatchPayload!
  createCAircraft(data: CAircraftCreateInput!): CAircraft!
  updateCAircraft(data: CAircraftUpdateInput!, where: CAircraftWhereUniqueInput!): CAircraft
  updateManyCAircrafts(data: CAircraftUpdateManyMutationInput!, where: CAircraftWhereInput): BatchPayload!
  upsertCAircraft(where: CAircraftWhereUniqueInput!, create: CAircraftCreateInput!, update: CAircraftUpdateInput!): CAircraft!
  deleteCAircraft(where: CAircraftWhereUniqueInput!): CAircraft
  deleteManyCAircrafts(where: CAircraftWhereInput): BatchPayload!
  createCAircraftType(data: CAircraftTypeCreateInput!): CAircraftType!
  updateCAircraftType(data: CAircraftTypeUpdateInput!, where: CAircraftTypeWhereUniqueInput!): CAircraftType
  updateManyCAircraftTypes(data: CAircraftTypeUpdateManyMutationInput!, where: CAircraftTypeWhereInput): BatchPayload!
  upsertCAircraftType(where: CAircraftTypeWhereUniqueInput!, create: CAircraftTypeCreateInput!, update: CAircraftTypeUpdateInput!): CAircraftType!
  deleteCAircraftType(where: CAircraftTypeWhereUniqueInput!): CAircraftType
  deleteManyCAircraftTypes(where: CAircraftTypeWhereInput): BatchPayload!
  createCAirport(data: CAirportCreateInput!): CAirport!
  updateCAirport(data: CAirportUpdateInput!, where: CAirportWhereUniqueInput!): CAirport
  updateManyCAirports(data: CAirportUpdateManyMutationInput!, where: CAirportWhereInput): BatchPayload!
  upsertCAirport(where: CAirportWhereUniqueInput!, create: CAirportCreateInput!, update: CAirportUpdateInput!): CAirport!
  deleteCAirport(where: CAirportWhereUniqueInput!): CAirport
  deleteManyCAirports(where: CAirportWhereInput): BatchPayload!
  createCAlert(data: CAlertCreateInput!): CAlert!
  updateCAlert(data: CAlertUpdateInput!, where: CAlertWhereUniqueInput!): CAlert
  updateManyCAlerts(data: CAlertUpdateManyMutationInput!, where: CAlertWhereInput): BatchPayload!
  upsertCAlert(where: CAlertWhereUniqueInput!, create: CAlertCreateInput!, update: CAlertUpdateInput!): CAlert!
  deleteCAlert(where: CAlertWhereUniqueInput!): CAlert
  deleteManyCAlerts(where: CAlertWhereInput): BatchPayload!
  createCCompany(data: CCompanyCreateInput!): CCompany!
  updateCCompany(data: CCompanyUpdateInput!, where: CCompanyWhereUniqueInput!): CCompany
  updateManyCCompanies(data: CCompanyUpdateManyMutationInput!, where: CCompanyWhereInput): BatchPayload!
  upsertCCompany(where: CCompanyWhereUniqueInput!, create: CCompanyCreateInput!, update: CCompanyUpdateInput!): CCompany!
  deleteCCompany(where: CCompanyWhereUniqueInput!): CCompany
  deleteManyCCompanies(where: CCompanyWhereInput): BatchPayload!
  createCContract(data: CContractCreateInput!): CContract!
  updateCContract(data: CContractUpdateInput!, where: CContractWhereUniqueInput!): CContract
  updateManyCContracts(data: CContractUpdateManyMutationInput!, where: CContractWhereInput): BatchPayload!
  upsertCContract(where: CContractWhereUniqueInput!, create: CContractCreateInput!, update: CContractUpdateInput!): CContract!
  deleteCContract(where: CContractWhereUniqueInput!): CContract
  deleteManyCContracts(where: CContractWhereInput): BatchPayload!
  createCCrew(data: CCrewCreateInput!): CCrew!
  updateCCrew(data: CCrewUpdateInput!, where: CCrewWhereUniqueInput!): CCrew
  updateManyCCrews(data: CCrewUpdateManyMutationInput!, where: CCrewWhereInput): BatchPayload!
  upsertCCrew(where: CCrewWhereUniqueInput!, create: CCrewCreateInput!, update: CCrewUpdateInput!): CCrew!
  deleteCCrew(where: CCrewWhereUniqueInput!): CCrew
  deleteManyCCrews(where: CCrewWhereInput): BatchPayload!
  createCCrewRole(data: CCrewRoleCreateInput!): CCrewRole!
  updateCCrewRole(data: CCrewRoleUpdateInput!, where: CCrewRoleWhereUniqueInput!): CCrewRole
  updateManyCCrewRoles(data: CCrewRoleUpdateManyMutationInput!, where: CCrewRoleWhereInput): BatchPayload!
  upsertCCrewRole(where: CCrewRoleWhereUniqueInput!, create: CCrewRoleCreateInput!, update: CCrewRoleUpdateInput!): CCrewRole!
  deleteCCrewRole(where: CCrewRoleWhereUniqueInput!): CCrewRole
  deleteManyCCrewRoles(where: CCrewRoleWhereInput): BatchPayload!
  createCFboServiceProvider(data: CFboServiceProviderCreateInput!): CFboServiceProvider!
  updateCFboServiceProvider(data: CFboServiceProviderUpdateInput!, where: CFboServiceProviderWhereUniqueInput!): CFboServiceProvider
  updateManyCFboServiceProviders(data: CFboServiceProviderUpdateManyMutationInput!, where: CFboServiceProviderWhereInput): BatchPayload!
  upsertCFboServiceProvider(where: CFboServiceProviderWhereUniqueInput!, create: CFboServiceProviderCreateInput!, update: CFboServiceProviderUpdateInput!): CFboServiceProvider!
  deleteCFboServiceProvider(where: CFboServiceProviderWhereUniqueInput!): CFboServiceProvider
  deleteManyCFboServiceProviders(where: CFboServiceProviderWhereInput): BatchPayload!
  createCFlightLeg(data: CFlightLegCreateInput!): CFlightLeg!
  updateCFlightLeg(data: CFlightLegUpdateInput!, where: CFlightLegWhereUniqueInput!): CFlightLeg
  updateManyCFlightLegs(data: CFlightLegUpdateManyMutationInput!, where: CFlightLegWhereInput): BatchPayload!
  upsertCFlightLeg(where: CFlightLegWhereUniqueInput!, create: CFlightLegCreateInput!, update: CFlightLegUpdateInput!): CFlightLeg!
  deleteCFlightLeg(where: CFlightLegWhereUniqueInput!): CFlightLeg
  deleteManyCFlightLegs(where: CFlightLegWhereInput): BatchPayload!
  createCFxRate(data: CFxRateCreateInput!): CFxRate!
  updateCFxRate(data: CFxRateUpdateInput!, where: CFxRateWhereUniqueInput!): CFxRate
  updateManyCFxRates(data: CFxRateUpdateManyMutationInput!, where: CFxRateWhereInput): BatchPayload!
  upsertCFxRate(where: CFxRateWhereUniqueInput!, create: CFxRateCreateInput!, update: CFxRateUpdateInput!): CFxRate!
  deleteCFxRate(where: CFxRateWhereUniqueInput!): CFxRate
  deleteManyCFxRates(where: CFxRateWhereInput): BatchPayload!
  createCPerson(data: CPersonCreateInput!): CPerson!
  updateCPerson(data: CPersonUpdateInput!, where: CPersonWhereUniqueInput!): CPerson
  updateManyCPersons(data: CPersonUpdateManyMutationInput!, where: CPersonWhereInput): BatchPayload!
  upsertCPerson(where: CPersonWhereUniqueInput!, create: CPersonCreateInput!, update: CPersonUpdateInput!): CPerson!
  deleteCPerson(where: CPersonWhereUniqueInput!): CPerson
  deleteManyCPersons(where: CPersonWhereInput): BatchPayload!
  createCPlace(data: CPlaceCreateInput!): CPlace!
  updateCPlace(data: CPlaceUpdateInput!, where: CPlaceWhereUniqueInput!): CPlace
  updateManyCPlaces(data: CPlaceUpdateManyMutationInput!, where: CPlaceWhereInput): BatchPayload!
  upsertCPlace(where: CPlaceWhereUniqueInput!, create: CPlaceCreateInput!, update: CPlaceUpdateInput!): CPlace!
  deleteCPlace(where: CPlaceWhereUniqueInput!): CPlace
  deleteManyCPlaces(where: CPlaceWhereInput): BatchPayload!
  createCPriceItem(data: CPriceItemCreateInput!): CPriceItem!
  updateCPriceItem(data: CPriceItemUpdateInput!, where: CPriceItemWhereUniqueInput!): CPriceItem
  updateManyCPriceItems(data: CPriceItemUpdateManyMutationInput!, where: CPriceItemWhereInput): BatchPayload!
  upsertCPriceItem(where: CPriceItemWhereUniqueInput!, create: CPriceItemCreateInput!, update: CPriceItemUpdateInput!): CPriceItem!
  deleteCPriceItem(where: CPriceItemWhereUniqueInput!): CPriceItem
  deleteManyCPriceItems(where: CPriceItemWhereInput): BatchPayload!
  createCPriceList(data: CPriceListCreateInput!): CPriceList!
  updateCPriceList(data: CPriceListUpdateInput!, where: CPriceListWhereUniqueInput!): CPriceList
  updateManyCPriceLists(data: CPriceListUpdateManyMutationInput!, where: CPriceListWhereInput): BatchPayload!
  upsertCPriceList(where: CPriceListWhereUniqueInput!, create: CPriceListCreateInput!, update: CPriceListUpdateInput!): CPriceList!
  deleteCPriceList(where: CPriceListWhereUniqueInput!): CPriceList
  deleteManyCPriceLists(where: CPriceListWhereInput): BatchPayload!
  createCServiceProvider(data: CServiceProviderCreateInput!): CServiceProvider!
  updateCServiceProvider(data: CServiceProviderUpdateInput!, where: CServiceProviderWhereUniqueInput!): CServiceProvider
  updateManyCServiceProviders(data: CServiceProviderUpdateManyMutationInput!, where: CServiceProviderWhereInput): BatchPayload!
  upsertCServiceProvider(where: CServiceProviderWhereUniqueInput!, create: CServiceProviderCreateInput!, update: CServiceProviderUpdateInput!): CServiceProvider!
  deleteCServiceProvider(where: CServiceProviderWhereUniqueInput!): CServiceProvider
  deleteManyCServiceProviders(where: CServiceProviderWhereInput): BatchPayload!
  createCServiceType(data: CServiceTypeCreateInput!): CServiceType!
  updateCServiceType(data: CServiceTypeUpdateInput!, where: CServiceTypeWhereUniqueInput!): CServiceType
  updateManyCServiceTypes(data: CServiceTypeUpdateManyMutationInput!, where: CServiceTypeWhereInput): BatchPayload!
  upsertCServiceType(where: CServiceTypeWhereUniqueInput!, create: CServiceTypeCreateInput!, update: CServiceTypeUpdateInput!): CServiceType!
  deleteCServiceType(where: CServiceTypeWhereUniqueInput!): CServiceType
  deleteManyCServiceTypes(where: CServiceTypeWhereInput): BatchPayload!
  createCTimezone(data: CTimezoneCreateInput!): CTimezone!
  updateCTimezone(data: CTimezoneUpdateInput!, where: CTimezoneWhereUniqueInput!): CTimezone
  updateManyCTimezones(data: CTimezoneUpdateManyMutationInput!, where: CTimezoneWhereInput): BatchPayload!
  upsertCTimezone(where: CTimezoneWhereUniqueInput!, create: CTimezoneCreateInput!, update: CTimezoneUpdateInput!): CTimezone!
  deleteCTimezone(where: CTimezoneWhereUniqueInput!): CTimezone
  deleteManyCTimezones(where: CTimezoneWhereInput): BatchPayload!
  createCateringCategory(data: CateringCategoryCreateInput!): CateringCategory!
  updateCateringCategory(data: CateringCategoryUpdateInput!, where: CateringCategoryWhereUniqueInput!): CateringCategory
  updateManyCateringCategories(data: CateringCategoryUpdateManyMutationInput!, where: CateringCategoryWhereInput): BatchPayload!
  upsertCateringCategory(where: CateringCategoryWhereUniqueInput!, create: CateringCategoryCreateInput!, update: CateringCategoryUpdateInput!): CateringCategory!
  deleteCateringCategory(where: CateringCategoryWhereUniqueInput!): CateringCategory
  deleteManyCateringCategories(where: CateringCategoryWhereInput): BatchPayload!
  createCateringCompanyEmail(data: CateringCompanyEmailCreateInput!): CateringCompanyEmail!
  updateCateringCompanyEmail(data: CateringCompanyEmailUpdateInput!, where: CateringCompanyEmailWhereUniqueInput!): CateringCompanyEmail
  updateManyCateringCompanyEmails(data: CateringCompanyEmailUpdateManyMutationInput!, where: CateringCompanyEmailWhereInput): BatchPayload!
  upsertCateringCompanyEmail(where: CateringCompanyEmailWhereUniqueInput!, create: CateringCompanyEmailCreateInput!, update: CateringCompanyEmailUpdateInput!): CateringCompanyEmail!
  deleteCateringCompanyEmail(where: CateringCompanyEmailWhereUniqueInput!): CateringCompanyEmail
  deleteManyCateringCompanyEmails(where: CateringCompanyEmailWhereInput): BatchPayload!
  createCateringCompanyEmailType(data: CateringCompanyEmailTypeCreateInput!): CateringCompanyEmailType!
  updateCateringCompanyEmailType(data: CateringCompanyEmailTypeUpdateInput!, where: CateringCompanyEmailTypeWhereUniqueInput!): CateringCompanyEmailType
  updateManyCateringCompanyEmailTypes(data: CateringCompanyEmailTypeUpdateManyMutationInput!, where: CateringCompanyEmailTypeWhereInput): BatchPayload!
  upsertCateringCompanyEmailType(where: CateringCompanyEmailTypeWhereUniqueInput!, create: CateringCompanyEmailTypeCreateInput!, update: CateringCompanyEmailTypeUpdateInput!): CateringCompanyEmailType!
  deleteCateringCompanyEmailType(where: CateringCompanyEmailTypeWhereUniqueInput!): CateringCompanyEmailType
  deleteManyCateringCompanyEmailTypes(where: CateringCompanyEmailTypeWhereInput): BatchPayload!
  createCateringCompanyPhoneNumber(data: CateringCompanyPhoneNumberCreateInput!): CateringCompanyPhoneNumber!
  updateCateringCompanyPhoneNumber(data: CateringCompanyPhoneNumberUpdateInput!, where: CateringCompanyPhoneNumberWhereUniqueInput!): CateringCompanyPhoneNumber
  updateManyCateringCompanyPhoneNumbers(data: CateringCompanyPhoneNumberUpdateManyMutationInput!, where: CateringCompanyPhoneNumberWhereInput): BatchPayload!
  upsertCateringCompanyPhoneNumber(where: CateringCompanyPhoneNumberWhereUniqueInput!, create: CateringCompanyPhoneNumberCreateInput!, update: CateringCompanyPhoneNumberUpdateInput!): CateringCompanyPhoneNumber!
  deleteCateringCompanyPhoneNumber(where: CateringCompanyPhoneNumberWhereUniqueInput!): CateringCompanyPhoneNumber
  deleteManyCateringCompanyPhoneNumbers(where: CateringCompanyPhoneNumberWhereInput): BatchPayload!
  createCateringCompanyPhoneNumberType(data: CateringCompanyPhoneNumberTypeCreateInput!): CateringCompanyPhoneNumberType!
  updateCateringCompanyPhoneNumberType(data: CateringCompanyPhoneNumberTypeUpdateInput!, where: CateringCompanyPhoneNumberTypeWhereUniqueInput!): CateringCompanyPhoneNumberType
  updateManyCateringCompanyPhoneNumberTypes(data: CateringCompanyPhoneNumberTypeUpdateManyMutationInput!, where: CateringCompanyPhoneNumberTypeWhereInput): BatchPayload!
  upsertCateringCompanyPhoneNumberType(where: CateringCompanyPhoneNumberTypeWhereUniqueInput!, create: CateringCompanyPhoneNumberTypeCreateInput!, update: CateringCompanyPhoneNumberTypeUpdateInput!): CateringCompanyPhoneNumberType!
  deleteCateringCompanyPhoneNumberType(where: CateringCompanyPhoneNumberTypeWhereUniqueInput!): CateringCompanyPhoneNumberType
  deleteManyCateringCompanyPhoneNumberTypes(where: CateringCompanyPhoneNumberTypeWhereInput): BatchPayload!
  createCateringCosts(data: CateringCostsCreateInput!): CateringCosts!
  updateCateringCosts(data: CateringCostsUpdateInput!, where: CateringCostsWhereUniqueInput!): CateringCosts
  updateManyCateringCostses(data: CateringCostsUpdateManyMutationInput!, where: CateringCostsWhereInput): BatchPayload!
  upsertCateringCosts(where: CateringCostsWhereUniqueInput!, create: CateringCostsCreateInput!, update: CateringCostsUpdateInput!): CateringCosts!
  deleteCateringCosts(where: CateringCostsWhereUniqueInput!): CateringCosts
  deleteManyCateringCostses(where: CateringCostsWhereInput): BatchPayload!
  createCateringCountry(data: CateringCountryCreateInput!): CateringCountry!
  updateCateringCountry(data: CateringCountryUpdateInput!, where: CateringCountryWhereUniqueInput!): CateringCountry
  updateManyCateringCountries(data: CateringCountryUpdateManyMutationInput!, where: CateringCountryWhereInput): BatchPayload!
  upsertCateringCountry(where: CateringCountryWhereUniqueInput!, create: CateringCountryCreateInput!, update: CateringCountryUpdateInput!): CateringCountry!
  deleteCateringCountry(where: CateringCountryWhereUniqueInput!): CateringCountry
  deleteManyCateringCountries(where: CateringCountryWhereInput): BatchPayload!
  createCateringCuisine(data: CateringCuisineCreateInput!): CateringCuisine!
  updateCateringCuisine(data: CateringCuisineUpdateInput!, where: CateringCuisineWhereUniqueInput!): CateringCuisine
  updateManyCateringCuisines(data: CateringCuisineUpdateManyMutationInput!, where: CateringCuisineWhereInput): BatchPayload!
  upsertCateringCuisine(where: CateringCuisineWhereUniqueInput!, create: CateringCuisineCreateInput!, update: CateringCuisineUpdateInput!): CateringCuisine!
  deleteCateringCuisine(where: CateringCuisineWhereUniqueInput!): CateringCuisine
  deleteManyCateringCuisines(where: CateringCuisineWhereInput): BatchPayload!
  createCateringDietaryPreference(data: CateringDietaryPreferenceCreateInput!): CateringDietaryPreference!
  updateCateringDietaryPreference(data: CateringDietaryPreferenceUpdateInput!, where: CateringDietaryPreferenceWhereUniqueInput!): CateringDietaryPreference
  updateManyCateringDietaryPreferences(data: CateringDietaryPreferenceUpdateManyMutationInput!, where: CateringDietaryPreferenceWhereInput): BatchPayload!
  upsertCateringDietaryPreference(where: CateringDietaryPreferenceWhereUniqueInput!, create: CateringDietaryPreferenceCreateInput!, update: CateringDietaryPreferenceUpdateInput!): CateringDietaryPreference!
  deleteCateringDietaryPreference(where: CateringDietaryPreferenceWhereUniqueInput!): CateringDietaryPreference
  deleteManyCateringDietaryPreferences(where: CateringDietaryPreferenceWhereInput): BatchPayload!
  createCateringIngredient(data: CateringIngredientCreateInput!): CateringIngredient!
  updateCateringIngredient(data: CateringIngredientUpdateInput!, where: CateringIngredientWhereUniqueInput!): CateringIngredient
  updateManyCateringIngredients(data: CateringIngredientUpdateManyMutationInput!, where: CateringIngredientWhereInput): BatchPayload!
  upsertCateringIngredient(where: CateringIngredientWhereUniqueInput!, create: CateringIngredientCreateInput!, update: CateringIngredientUpdateInput!): CateringIngredient!
  deleteCateringIngredient(where: CateringIngredientWhereUniqueInput!): CateringIngredient
  deleteManyCateringIngredients(where: CateringIngredientWhereInput): BatchPayload!
  createCateringNotification(data: CateringNotificationCreateInput!): CateringNotification!
  updateCateringNotification(data: CateringNotificationUpdateInput!, where: CateringNotificationWhereUniqueInput!): CateringNotification
  updateManyCateringNotifications(data: CateringNotificationUpdateManyMutationInput!, where: CateringNotificationWhereInput): BatchPayload!
  upsertCateringNotification(where: CateringNotificationWhereUniqueInput!, create: CateringNotificationCreateInput!, update: CateringNotificationUpdateInput!): CateringNotification!
  deleteCateringNotification(where: CateringNotificationWhereUniqueInput!): CateringNotification
  deleteManyCateringNotifications(where: CateringNotificationWhereInput): BatchPayload!
  createCateringPersonEmail(data: CateringPersonEmailCreateInput!): CateringPersonEmail!
  updateCateringPersonEmail(data: CateringPersonEmailUpdateInput!, where: CateringPersonEmailWhereUniqueInput!): CateringPersonEmail
  updateManyCateringPersonEmails(data: CateringPersonEmailUpdateManyMutationInput!, where: CateringPersonEmailWhereInput): BatchPayload!
  upsertCateringPersonEmail(where: CateringPersonEmailWhereUniqueInput!, create: CateringPersonEmailCreateInput!, update: CateringPersonEmailUpdateInput!): CateringPersonEmail!
  deleteCateringPersonEmail(where: CateringPersonEmailWhereUniqueInput!): CateringPersonEmail
  deleteManyCateringPersonEmails(where: CateringPersonEmailWhereInput): BatchPayload!
  createCateringPersonEmailType(data: CateringPersonEmailTypeCreateInput!): CateringPersonEmailType!
  updateCateringPersonEmailType(data: CateringPersonEmailTypeUpdateInput!, where: CateringPersonEmailTypeWhereUniqueInput!): CateringPersonEmailType
  updateManyCateringPersonEmailTypes(data: CateringPersonEmailTypeUpdateManyMutationInput!, where: CateringPersonEmailTypeWhereInput): BatchPayload!
  upsertCateringPersonEmailType(where: CateringPersonEmailTypeWhereUniqueInput!, create: CateringPersonEmailTypeCreateInput!, update: CateringPersonEmailTypeUpdateInput!): CateringPersonEmailType!
  deleteCateringPersonEmailType(where: CateringPersonEmailTypeWhereUniqueInput!): CateringPersonEmailType
  deleteManyCateringPersonEmailTypes(where: CateringPersonEmailTypeWhereInput): BatchPayload!
  createCateringPersonNationality(data: CateringPersonNationalityCreateInput!): CateringPersonNationality!
  updateCateringPersonNationality(data: CateringPersonNationalityUpdateInput!, where: CateringPersonNationalityWhereUniqueInput!): CateringPersonNationality
  updateManyCateringPersonNationalities(data: CateringPersonNationalityUpdateManyMutationInput!, where: CateringPersonNationalityWhereInput): BatchPayload!
  upsertCateringPersonNationality(where: CateringPersonNationalityWhereUniqueInput!, create: CateringPersonNationalityCreateInput!, update: CateringPersonNationalityUpdateInput!): CateringPersonNationality!
  deleteCateringPersonNationality(where: CateringPersonNationalityWhereUniqueInput!): CateringPersonNationality
  deleteManyCateringPersonNationalities(where: CateringPersonNationalityWhereInput): BatchPayload!
  createCateringPersonPhoneNumber(data: CateringPersonPhoneNumberCreateInput!): CateringPersonPhoneNumber!
  updateCateringPersonPhoneNumber(data: CateringPersonPhoneNumberUpdateInput!, where: CateringPersonPhoneNumberWhereUniqueInput!): CateringPersonPhoneNumber
  updateManyCateringPersonPhoneNumbers(data: CateringPersonPhoneNumberUpdateManyMutationInput!, where: CateringPersonPhoneNumberWhereInput): BatchPayload!
  upsertCateringPersonPhoneNumber(where: CateringPersonPhoneNumberWhereUniqueInput!, create: CateringPersonPhoneNumberCreateInput!, update: CateringPersonPhoneNumberUpdateInput!): CateringPersonPhoneNumber!
  deleteCateringPersonPhoneNumber(where: CateringPersonPhoneNumberWhereUniqueInput!): CateringPersonPhoneNumber
  deleteManyCateringPersonPhoneNumbers(where: CateringPersonPhoneNumberWhereInput): BatchPayload!
  createCateringPersonPhoneNumberType(data: CateringPersonPhoneNumberTypeCreateInput!): CateringPersonPhoneNumberType!
  updateCateringPersonPhoneNumberType(data: CateringPersonPhoneNumberTypeUpdateInput!, where: CateringPersonPhoneNumberTypeWhereUniqueInput!): CateringPersonPhoneNumberType
  updateManyCateringPersonPhoneNumberTypes(data: CateringPersonPhoneNumberTypeUpdateManyMutationInput!, where: CateringPersonPhoneNumberTypeWhereInput): BatchPayload!
  upsertCateringPersonPhoneNumberType(where: CateringPersonPhoneNumberTypeWhereUniqueInput!, create: CateringPersonPhoneNumberTypeCreateInput!, update: CateringPersonPhoneNumberTypeUpdateInput!): CateringPersonPhoneNumberType!
  deleteCateringPersonPhoneNumberType(where: CateringPersonPhoneNumberTypeWhereUniqueInput!): CateringPersonPhoneNumberType
  deleteManyCateringPersonPhoneNumberTypes(where: CateringPersonPhoneNumberTypeWhereInput): BatchPayload!
  createCateringPreference(data: CateringPreferenceCreateInput!): CateringPreference!
  updateCateringPreference(data: CateringPreferenceUpdateInput!, where: CateringPreferenceWhereUniqueInput!): CateringPreference
  updateManyCateringPreferences(data: CateringPreferenceUpdateManyMutationInput!, where: CateringPreferenceWhereInput): BatchPayload!
  upsertCateringPreference(where: CateringPreferenceWhereUniqueInput!, create: CateringPreferenceCreateInput!, update: CateringPreferenceUpdateInput!): CateringPreference!
  deleteCateringPreference(where: CateringPreferenceWhereUniqueInput!): CateringPreference
  deleteManyCateringPreferences(where: CateringPreferenceWhereInput): BatchPayload!
  createCateringPreferenceCategory(data: CateringPreferenceCategoryCreateInput!): CateringPreferenceCategory!
  updateCateringPreferenceCategory(data: CateringPreferenceCategoryUpdateInput!, where: CateringPreferenceCategoryWhereUniqueInput!): CateringPreferenceCategory
  updateManyCateringPreferenceCategories(data: CateringPreferenceCategoryUpdateManyMutationInput!, where: CateringPreferenceCategoryWhereInput): BatchPayload!
  upsertCateringPreferenceCategory(where: CateringPreferenceCategoryWhereUniqueInput!, create: CateringPreferenceCategoryCreateInput!, update: CateringPreferenceCategoryUpdateInput!): CateringPreferenceCategory!
  deleteCateringPreferenceCategory(where: CateringPreferenceCategoryWhereUniqueInput!): CateringPreferenceCategory
  deleteManyCateringPreferenceCategories(where: CateringPreferenceCategoryWhereInput): BatchPayload!
  createCateringProposalSubscriber(data: CateringProposalSubscriberCreateInput!): CateringProposalSubscriber!
  updateCateringProposalSubscriber(data: CateringProposalSubscriberUpdateInput!, where: CateringProposalSubscriberWhereUniqueInput!): CateringProposalSubscriber
  updateManyCateringProposalSubscribers(data: CateringProposalSubscriberUpdateManyMutationInput!, where: CateringProposalSubscriberWhereInput): BatchPayload!
  upsertCateringProposalSubscriber(where: CateringProposalSubscriberWhereUniqueInput!, create: CateringProposalSubscriberCreateInput!, update: CateringProposalSubscriberUpdateInput!): CateringProposalSubscriber!
  deleteCateringProposalSubscriber(where: CateringProposalSubscriberWhereUniqueInput!): CateringProposalSubscriber
  deleteManyCateringProposalSubscribers(where: CateringProposalSubscriberWhereInput): BatchPayload!
  createCateringPurchaseOrder(data: CateringPurchaseOrderCreateInput!): CateringPurchaseOrder!
  updateCateringPurchaseOrder(data: CateringPurchaseOrderUpdateInput!, where: CateringPurchaseOrderWhereUniqueInput!): CateringPurchaseOrder
  updateManyCateringPurchaseOrders(data: CateringPurchaseOrderUpdateManyMutationInput!, where: CateringPurchaseOrderWhereInput): BatchPayload!
  upsertCateringPurchaseOrder(where: CateringPurchaseOrderWhereUniqueInput!, create: CateringPurchaseOrderCreateInput!, update: CateringPurchaseOrderUpdateInput!): CateringPurchaseOrder!
  deleteCateringPurchaseOrder(where: CateringPurchaseOrderWhereUniqueInput!): CateringPurchaseOrder
  deleteManyCateringPurchaseOrders(where: CateringPurchaseOrderWhereInput): BatchPayload!
  createCateringTask(data: CateringTaskCreateInput!): CateringTask!
  updateCateringTask(data: CateringTaskUpdateInput!, where: CateringTaskWhereUniqueInput!): CateringTask
  updateManyCateringTasks(data: CateringTaskUpdateManyMutationInput!, where: CateringTaskWhereInput): BatchPayload!
  upsertCateringTask(where: CateringTaskWhereUniqueInput!, create: CateringTaskCreateInput!, update: CateringTaskUpdateInput!): CateringTask!
  deleteCateringTask(where: CateringTaskWhereUniqueInput!): CateringTask
  deleteManyCateringTasks(where: CateringTaskWhereInput): BatchPayload!
  createCateringTaskNote(data: CateringTaskNoteCreateInput!): CateringTaskNote!
  updateCateringTaskNote(data: CateringTaskNoteUpdateInput!, where: CateringTaskNoteWhereUniqueInput!): CateringTaskNote
  updateManyCateringTaskNotes(data: CateringTaskNoteUpdateManyMutationInput!, where: CateringTaskNoteWhereInput): BatchPayload!
  upsertCateringTaskNote(where: CateringTaskNoteWhereUniqueInput!, create: CateringTaskNoteCreateInput!, update: CateringTaskNoteUpdateInput!): CateringTaskNote!
  deleteCateringTaskNote(where: CateringTaskNoteWhereUniqueInput!): CateringTaskNote
  deleteManyCateringTaskNotes(where: CateringTaskNoteWhereInput): BatchPayload!
  createCateringUnit(data: CateringUnitCreateInput!): CateringUnit!
  updateCateringUnit(data: CateringUnitUpdateInput!, where: CateringUnitWhereUniqueInput!): CateringUnit
  updateManyCateringUnits(data: CateringUnitUpdateManyMutationInput!, where: CateringUnitWhereInput): BatchPayload!
  upsertCateringUnit(where: CateringUnitWhereUniqueInput!, create: CateringUnitCreateInput!, update: CateringUnitUpdateInput!): CateringUnit!
  deleteCateringUnit(where: CateringUnitWhereUniqueInput!): CateringUnit
  deleteManyCateringUnits(where: CateringUnitWhereInput): BatchPayload!
  createCateringWFTransition(data: CateringWFTransitionCreateInput!): CateringWFTransition!
  updateCateringWFTransition(data: CateringWFTransitionUpdateInput!, where: CateringWFTransitionWhereUniqueInput!): CateringWFTransition
  updateManyCateringWFTransitions(data: CateringWFTransitionUpdateManyMutationInput!, where: CateringWFTransitionWhereInput): BatchPayload!
  upsertCateringWFTransition(where: CateringWFTransitionWhereUniqueInput!, create: CateringWFTransitionCreateInput!, update: CateringWFTransitionUpdateInput!): CateringWFTransition!
  deleteCateringWFTransition(where: CateringWFTransitionWhereUniqueInput!): CateringWFTransition
  deleteManyCateringWFTransitions(where: CateringWFTransitionWhereInput): BatchPayload!
  createCurrency(data: CurrencyCreateInput!): Currency!
  updateCurrency(data: CurrencyUpdateInput!, where: CurrencyWhereUniqueInput!): Currency
  updateManyCurrencies(data: CurrencyUpdateManyMutationInput!, where: CurrencyWhereInput): BatchPayload!
  upsertCurrency(where: CurrencyWhereUniqueInput!, create: CurrencyCreateInput!, update: CurrencyUpdateInput!): Currency!
  deleteCurrency(where: CurrencyWhereUniqueInput!): Currency
  deleteManyCurrencies(where: CurrencyWhereInput): BatchPayload!
  createDayOfWeekValue(data: DayOfWeekValueCreateInput!): DayOfWeekValue!
  updateDayOfWeekValue(data: DayOfWeekValueUpdateInput!, where: DayOfWeekValueWhereUniqueInput!): DayOfWeekValue
  updateManyDayOfWeekValues(data: DayOfWeekValueUpdateManyMutationInput!, where: DayOfWeekValueWhereInput): BatchPayload!
  upsertDayOfWeekValue(where: DayOfWeekValueWhereUniqueInput!, create: DayOfWeekValueCreateInput!, update: DayOfWeekValueUpdateInput!): DayOfWeekValue!
  deleteDayOfWeekValue(where: DayOfWeekValueWhereUniqueInput!): DayOfWeekValue
  deleteManyDayOfWeekValues(where: DayOfWeekValueWhereInput): BatchPayload!
  createDefaultProposal(data: DefaultProposalCreateInput!): DefaultProposal!
  updateDefaultProposal(data: DefaultProposalUpdateInput!, where: DefaultProposalWhereUniqueInput!): DefaultProposal
  updateManyDefaultProposals(data: DefaultProposalUpdateManyMutationInput!, where: DefaultProposalWhereInput): BatchPayload!
  upsertDefaultProposal(where: DefaultProposalWhereUniqueInput!, create: DefaultProposalCreateInput!, update: DefaultProposalUpdateInput!): DefaultProposal!
  deleteDefaultProposal(where: DefaultProposalWhereUniqueInput!): DefaultProposal
  deleteManyDefaultProposals(where: DefaultProposalWhereInput): BatchPayload!
  createDelivery(data: DeliveryCreateInput!): Delivery!
  updateDelivery(data: DeliveryUpdateInput!, where: DeliveryWhereUniqueInput!): Delivery
  updateManyDeliveries(data: DeliveryUpdateManyMutationInput!, where: DeliveryWhereInput): BatchPayload!
  upsertDelivery(where: DeliveryWhereUniqueInput!, create: DeliveryCreateInput!, update: DeliveryUpdateInput!): Delivery!
  deleteDelivery(where: DeliveryWhereUniqueInput!): Delivery
  deleteManyDeliveries(where: DeliveryWhereInput): BatchPayload!
  createEmailAddress(data: EmailAddressCreateInput!): EmailAddress!
  updateEmailAddress(data: EmailAddressUpdateInput!, where: EmailAddressWhereUniqueInput!): EmailAddress
  updateManyEmailAddresses(data: EmailAddressUpdateManyMutationInput!, where: EmailAddressWhereInput): BatchPayload!
  upsertEmailAddress(where: EmailAddressWhereUniqueInput!, create: EmailAddressCreateInput!, update: EmailAddressUpdateInput!): EmailAddress!
  deleteEmailAddress(where: EmailAddressWhereUniqueInput!): EmailAddress
  deleteManyEmailAddresses(where: EmailAddressWhereInput): BatchPayload!
  createFlightFileProposal(data: FlightFileProposalCreateInput!): FlightFileProposal!
  updateFlightFileProposal(data: FlightFileProposalUpdateInput!, where: FlightFileProposalWhereUniqueInput!): FlightFileProposal
  updateManyFlightFileProposals(data: FlightFileProposalUpdateManyMutationInput!, where: FlightFileProposalWhereInput): BatchPayload!
  upsertFlightFileProposal(where: FlightFileProposalWhereUniqueInput!, create: FlightFileProposalCreateInput!, update: FlightFileProposalUpdateInput!): FlightFileProposal!
  deleteFlightFileProposal(where: FlightFileProposalWhereUniqueInput!): FlightFileProposal
  deleteManyFlightFileProposals(where: FlightFileProposalWhereInput): BatchPayload!
  createLegBusinessType(data: LegBusinessTypeCreateInput!): LegBusinessType!
  updateLegBusinessType(data: LegBusinessTypeUpdateInput!, where: LegBusinessTypeWhereUniqueInput!): LegBusinessType
  updateManyLegBusinessTypes(data: LegBusinessTypeUpdateManyMutationInput!, where: LegBusinessTypeWhereInput): BatchPayload!
  upsertLegBusinessType(where: LegBusinessTypeWhereUniqueInput!, create: LegBusinessTypeCreateInput!, update: LegBusinessTypeUpdateInput!): LegBusinessType!
  deleteLegBusinessType(where: LegBusinessTypeWhereUniqueInput!): LegBusinessType
  deleteManyLegBusinessTypes(where: LegBusinessTypeWhereInput): BatchPayload!
  createLegOperationalStatus(data: LegOperationalStatusCreateInput!): LegOperationalStatus!
  updateLegOperationalStatus(data: LegOperationalStatusUpdateInput!, where: LegOperationalStatusWhereUniqueInput!): LegOperationalStatus
  updateManyLegOperationalStatuses(data: LegOperationalStatusUpdateManyMutationInput!, where: LegOperationalStatusWhereInput): BatchPayload!
  upsertLegOperationalStatus(where: LegOperationalStatusWhereUniqueInput!, create: LegOperationalStatusCreateInput!, update: LegOperationalStatusUpdateInput!): LegOperationalStatus!
  deleteLegOperationalStatus(where: LegOperationalStatusWhereUniqueInput!): LegOperationalStatus
  deleteManyLegOperationalStatuses(where: LegOperationalStatusWhereInput): BatchPayload!
  createLegOperationalType(data: LegOperationalTypeCreateInput!): LegOperationalType!
  updateLegOperationalType(data: LegOperationalTypeUpdateInput!, where: LegOperationalTypeWhereUniqueInput!): LegOperationalType
  updateManyLegOperationalTypes(data: LegOperationalTypeUpdateManyMutationInput!, where: LegOperationalTypeWhereInput): BatchPayload!
  upsertLegOperationalType(where: LegOperationalTypeWhereUniqueInput!, create: LegOperationalTypeCreateInput!, update: LegOperationalTypeUpdateInput!): LegOperationalType!
  deleteLegOperationalType(where: LegOperationalTypeWhereUniqueInput!): LegOperationalType
  deleteManyLegOperationalTypes(where: LegOperationalTypeWhereInput): BatchPayload!
  createMsTask(data: MsTaskCreateInput!): MsTask!
  updateMsTask(data: MsTaskUpdateInput!, where: MsTaskWhereUniqueInput!): MsTask
  updateManyMsTasks(data: MsTaskUpdateManyMutationInput!, where: MsTaskWhereInput): BatchPayload!
  upsertMsTask(where: MsTaskWhereUniqueInput!, create: MsTaskCreateInput!, update: MsTaskUpdateInput!): MsTask!
  deleteMsTask(where: MsTaskWhereUniqueInput!): MsTask
  deleteManyMsTasks(where: MsTaskWhereInput): BatchPayload!
  createOpeningHour(data: OpeningHourCreateInput!): OpeningHour!
  updateOpeningHour(data: OpeningHourUpdateInput!, where: OpeningHourWhereUniqueInput!): OpeningHour
  updateManyOpeningHours(data: OpeningHourUpdateManyMutationInput!, where: OpeningHourWhereInput): BatchPayload!
  upsertOpeningHour(where: OpeningHourWhereUniqueInput!, create: OpeningHourCreateInput!, update: OpeningHourUpdateInput!): OpeningHour!
  deleteOpeningHour(where: OpeningHourWhereUniqueInput!): OpeningHour
  deleteManyOpeningHours(where: OpeningHourWhereInput): BatchPayload!
  createOrderBusinessType(data: OrderBusinessTypeCreateInput!): OrderBusinessType!
  updateOrderBusinessType(data: OrderBusinessTypeUpdateInput!, where: OrderBusinessTypeWhereUniqueInput!): OrderBusinessType
  updateManyOrderBusinessTypes(data: OrderBusinessTypeUpdateManyMutationInput!, where: OrderBusinessTypeWhereInput): BatchPayload!
  upsertOrderBusinessType(where: OrderBusinessTypeWhereUniqueInput!, create: OrderBusinessTypeCreateInput!, update: OrderBusinessTypeUpdateInput!): OrderBusinessType!
  deleteOrderBusinessType(where: OrderBusinessTypeWhereUniqueInput!): OrderBusinessType
  deleteManyOrderBusinessTypes(where: OrderBusinessTypeWhereInput): BatchPayload!
  createOverBudget(data: OverBudgetCreateInput!): OverBudget!
  updateOverBudget(data: OverBudgetUpdateInput!, where: OverBudgetWhereUniqueInput!): OverBudget
  updateManyOverBudgets(data: OverBudgetUpdateManyMutationInput!, where: OverBudgetWhereInput): BatchPayload!
  upsertOverBudget(where: OverBudgetWhereUniqueInput!, create: OverBudgetCreateInput!, update: OverBudgetUpdateInput!): OverBudget!
  deleteOverBudget(where: OverBudgetWhereUniqueInput!): OverBudget
  deleteManyOverBudgets(where: OverBudgetWhereInput): BatchPayload!
  createOverBudgetNote(data: OverBudgetNoteCreateInput!): OverBudgetNote!
  updateOverBudgetNote(data: OverBudgetNoteUpdateInput!, where: OverBudgetNoteWhereUniqueInput!): OverBudgetNote
  updateManyOverBudgetNotes(data: OverBudgetNoteUpdateManyMutationInput!, where: OverBudgetNoteWhereInput): BatchPayload!
  upsertOverBudgetNote(where: OverBudgetNoteWhereUniqueInput!, create: OverBudgetNoteCreateInput!, update: OverBudgetNoteUpdateInput!): OverBudgetNote!
  deleteOverBudgetNote(where: OverBudgetNoteWhereUniqueInput!): OverBudgetNote
  deleteManyOverBudgetNotes(where: OverBudgetNoteWhereInput): BatchPayload!
  createPassenger(data: PassengerCreateInput!): Passenger!
  updatePassenger(data: PassengerUpdateInput!, where: PassengerWhereUniqueInput!): Passenger
  updateManyPassengers(data: PassengerUpdateManyMutationInput!, where: PassengerWhereInput): BatchPayload!
  upsertPassenger(where: PassengerWhereUniqueInput!, create: PassengerCreateInput!, update: PassengerUpdateInput!): Passenger!
  deletePassenger(where: PassengerWhereUniqueInput!): Passenger
  deleteManyPassengers(where: PassengerWhereInput): BatchPayload!
  createProposal(data: ProposalCreateInput!): Proposal!
  updateProposal(data: ProposalUpdateInput!, where: ProposalWhereUniqueInput!): Proposal
  updateManyProposals(data: ProposalUpdateManyMutationInput!, where: ProposalWhereInput): BatchPayload!
  upsertProposal(where: ProposalWhereUniqueInput!, create: ProposalCreateInput!, update: ProposalUpdateInput!): Proposal!
  deleteProposal(where: ProposalWhereUniqueInput!): Proposal
  deleteManyProposals(where: ProposalWhereInput): BatchPayload!
  createProposalDocument(data: ProposalDocumentCreateInput!): ProposalDocument!
  updateProposalDocument(data: ProposalDocumentUpdateInput!, where: ProposalDocumentWhereUniqueInput!): ProposalDocument
  updateManyProposalDocuments(data: ProposalDocumentUpdateManyMutationInput!, where: ProposalDocumentWhereInput): BatchPayload!
  upsertProposalDocument(where: ProposalDocumentWhereUniqueInput!, create: ProposalDocumentCreateInput!, update: ProposalDocumentUpdateInput!): ProposalDocument!
  deleteProposalDocument(where: ProposalDocumentWhereUniqueInput!): ProposalDocument
  deleteManyProposalDocuments(where: ProposalDocumentWhereInput): BatchPayload!
  createProposalItem(data: ProposalItemCreateInput!): ProposalItem!
  updateProposalItem(data: ProposalItemUpdateInput!, where: ProposalItemWhereUniqueInput!): ProposalItem
  updateManyProposalItems(data: ProposalItemUpdateManyMutationInput!, where: ProposalItemWhereInput): BatchPayload!
  upsertProposalItem(where: ProposalItemWhereUniqueInput!, create: ProposalItemCreateInput!, update: ProposalItemUpdateInput!): ProposalItem!
  deleteProposalItem(where: ProposalItemWhereUniqueInput!): ProposalItem
  deleteManyProposalItems(where: ProposalItemWhereInput): BatchPayload!
  createPurchaseOrderDocument(data: PurchaseOrderDocumentCreateInput!): PurchaseOrderDocument!
  updatePurchaseOrderDocument(data: PurchaseOrderDocumentUpdateInput!, where: PurchaseOrderDocumentWhereUniqueInput!): PurchaseOrderDocument
  updateManyPurchaseOrderDocuments(data: PurchaseOrderDocumentUpdateManyMutationInput!, where: PurchaseOrderDocumentWhereInput): BatchPayload!
  upsertPurchaseOrderDocument(where: PurchaseOrderDocumentWhereUniqueInput!, create: PurchaseOrderDocumentCreateInput!, update: PurchaseOrderDocumentUpdateInput!): PurchaseOrderDocument!
  deletePurchaseOrderDocument(where: PurchaseOrderDocumentWhereUniqueInput!): PurchaseOrderDocument
  deleteManyPurchaseOrderDocuments(where: PurchaseOrderDocumentWhereInput): BatchPayload!
  createPurchaseOrderItem(data: PurchaseOrderItemCreateInput!): PurchaseOrderItem!
  updatePurchaseOrderItem(data: PurchaseOrderItemUpdateInput!, where: PurchaseOrderItemWhereUniqueInput!): PurchaseOrderItem
  updateManyPurchaseOrderItems(data: PurchaseOrderItemUpdateManyMutationInput!, where: PurchaseOrderItemWhereInput): BatchPayload!
  upsertPurchaseOrderItem(where: PurchaseOrderItemWhereUniqueInput!, create: PurchaseOrderItemCreateInput!, update: PurchaseOrderItemUpdateInput!): PurchaseOrderItem!
  deletePurchaseOrderItem(where: PurchaseOrderItemWhereUniqueInput!): PurchaseOrderItem
  deleteManyPurchaseOrderItems(where: PurchaseOrderItemWhereInput): BatchPayload!
  createQualityControl(data: QualityControlCreateInput!): QualityControl!
  updateQualityControl(data: QualityControlUpdateInput!, where: QualityControlWhereUniqueInput!): QualityControl
  updateManyQualityControls(data: QualityControlUpdateManyMutationInput!, where: QualityControlWhereInput): BatchPayload!
  upsertQualityControl(where: QualityControlWhereUniqueInput!, create: QualityControlCreateInput!, update: QualityControlUpdateInput!): QualityControl!
  deleteQualityControl(where: QualityControlWhereUniqueInput!): QualityControl
  deleteManyQualityControls(where: QualityControlWhereInput): BatchPayload!
  createQualityNote(data: QualityNoteCreateInput!): QualityNote!
  updateQualityNote(data: QualityNoteUpdateInput!, where: QualityNoteWhereUniqueInput!): QualityNote
  updateManyQualityNotes(data: QualityNoteUpdateManyMutationInput!, where: QualityNoteWhereInput): BatchPayload!
  upsertQualityNote(where: QualityNoteWhereUniqueInput!, create: QualityNoteCreateInput!, update: QualityNoteUpdateInput!): QualityNote!
  deleteQualityNote(where: QualityNoteWhereUniqueInput!): QualityNote
  deleteManyQualityNotes(where: QualityNoteWhereInput): BatchPayload!
  createServiceProviderEmail(data: ServiceProviderEmailCreateInput!): ServiceProviderEmail!
  updateServiceProviderEmail(data: ServiceProviderEmailUpdateInput!, where: ServiceProviderEmailWhereUniqueInput!): ServiceProviderEmail
  updateManyServiceProviderEmails(data: ServiceProviderEmailUpdateManyMutationInput!, where: ServiceProviderEmailWhereInput): BatchPayload!
  upsertServiceProviderEmail(where: ServiceProviderEmailWhereUniqueInput!, create: ServiceProviderEmailCreateInput!, update: ServiceProviderEmailUpdateInput!): ServiceProviderEmail!
  deleteServiceProviderEmail(where: ServiceProviderEmailWhereUniqueInput!): ServiceProviderEmail
  deleteManyServiceProviderEmails(where: ServiceProviderEmailWhereInput): BatchPayload!
  createServiceProviderPhoneNumber(data: ServiceProviderPhoneNumberCreateInput!): ServiceProviderPhoneNumber!
  updateServiceProviderPhoneNumber(data: ServiceProviderPhoneNumberUpdateInput!, where: ServiceProviderPhoneNumberWhereUniqueInput!): ServiceProviderPhoneNumber
  updateManyServiceProviderPhoneNumbers(data: ServiceProviderPhoneNumberUpdateManyMutationInput!, where: ServiceProviderPhoneNumberWhereInput): BatchPayload!
  upsertServiceProviderPhoneNumber(where: ServiceProviderPhoneNumberWhereUniqueInput!, create: ServiceProviderPhoneNumberCreateInput!, update: ServiceProviderPhoneNumberUpdateInput!): ServiceProviderPhoneNumber!
  deleteServiceProviderPhoneNumber(where: ServiceProviderPhoneNumberWhereUniqueInput!): ServiceProviderPhoneNumber
  deleteManyServiceProviderPhoneNumbers(where: ServiceProviderPhoneNumberWhereInput): BatchPayload!
  createUserPreferences(data: UserPreferencesCreateInput!): UserPreferences!
  updateUserPreferences(data: UserPreferencesUpdateInput!, where: UserPreferencesWhereUniqueInput!): UserPreferences
  updateManyUserPreferenceses(data: UserPreferencesUpdateManyMutationInput!, where: UserPreferencesWhereInput): BatchPayload!
  upsertUserPreferences(where: UserPreferencesWhereUniqueInput!, create: UserPreferencesCreateInput!, update: UserPreferencesUpdateInput!): UserPreferences!
  deleteUserPreferences(where: UserPreferencesWhereUniqueInput!): UserPreferences
  deleteManyUserPreferenceses(where: UserPreferencesWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type OpeningHour {
  id: ID!
  coreId: String!
  serviceProvider: CServiceProvider
  dayOfWeek: DayOfWeek
  startTime: DateTime
  endTime: DateTime
  selected: Boolean
}

type OpeningHourConnection {
  pageInfo: PageInfo!
  edges: [OpeningHourEdge]!
  aggregate: AggregateOpeningHour!
}

input OpeningHourCreateInput {
  coreId: String!
  serviceProvider: CServiceProviderCreateOneWithoutOpeningHoursInput
  dayOfWeek: DayOfWeek
  startTime: DateTime
  endTime: DateTime
  selected: Boolean
}

input OpeningHourCreateManyWithoutServiceProviderInput {
  create: [OpeningHourCreateWithoutServiceProviderInput!]
  connect: [OpeningHourWhereUniqueInput!]
}

input OpeningHourCreateWithoutServiceProviderInput {
  coreId: String!
  dayOfWeek: DayOfWeek
  startTime: DateTime
  endTime: DateTime
  selected: Boolean
}

type OpeningHourEdge {
  node: OpeningHour!
  cursor: String!
}

enum OpeningHourOrderByInput {
  id_ASC
  id_DESC
  coreId_ASC
  coreId_DESC
  dayOfWeek_ASC
  dayOfWeek_DESC
  startTime_ASC
  startTime_DESC
  endTime_ASC
  endTime_DESC
  selected_ASC
  selected_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type OpeningHourPreviousValues {
  id: ID!
  coreId: String!
  dayOfWeek: DayOfWeek
  startTime: DateTime
  endTime: DateTime
  selected: Boolean
}

input OpeningHourScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  coreId: String
  coreId_not: String
  coreId_in: [String!]
  coreId_not_in: [String!]
  coreId_lt: String
  coreId_lte: String
  coreId_gt: String
  coreId_gte: String
  coreId_contains: String
  coreId_not_contains: String
  coreId_starts_with: String
  coreId_not_starts_with: String
  coreId_ends_with: String
  coreId_not_ends_with: String
  dayOfWeek: DayOfWeek
  dayOfWeek_not: DayOfWeek
  dayOfWeek_in: [DayOfWeek!]
  dayOfWeek_not_in: [DayOfWeek!]
  startTime: DateTime
  startTime_not: DateTime
  startTime_in: [DateTime!]
  startTime_not_in: [DateTime!]
  startTime_lt: DateTime
  startTime_lte: DateTime
  startTime_gt: DateTime
  startTime_gte: DateTime
  endTime: DateTime
  endTime_not: DateTime
  endTime_in: [DateTime!]
  endTime_not_in: [DateTime!]
  endTime_lt: DateTime
  endTime_lte: DateTime
  endTime_gt: DateTime
  endTime_gte: DateTime
  selected: Boolean
  selected_not: Boolean
  AND: [OpeningHourScalarWhereInput!]
  OR: [OpeningHourScalarWhereInput!]
  NOT: [OpeningHourScalarWhereInput!]
}

type OpeningHourSubscriptionPayload {
  mutation: MutationType!
  node: OpeningHour
  updatedFields: [String!]
  previousValues: OpeningHourPreviousValues
}

input OpeningHourSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: OpeningHourWhereInput
  AND: [OpeningHourSubscriptionWhereInput!]
  OR: [OpeningHourSubscriptionWhereInput!]
  NOT: [OpeningHourSubscriptionWhereInput!]
}

input OpeningHourUpdateInput {
  coreId: String
  serviceProvider: CServiceProviderUpdateOneWithoutOpeningHoursInput
  dayOfWeek: DayOfWeek
  startTime: DateTime
  endTime: DateTime
  selected: Boolean
}

input OpeningHourUpdateManyDataInput {
  coreId: String
  dayOfWeek: DayOfWeek
  startTime: DateTime
  endTime: DateTime
  selected: Boolean
}

input OpeningHourUpdateManyMutationInput {
  coreId: String
  dayOfWeek: DayOfWeek
  startTime: DateTime
  endTime: DateTime
  selected: Boolean
}

input OpeningHourUpdateManyWithoutServiceProviderInput {
  create: [OpeningHourCreateWithoutServiceProviderInput!]
  delete: [OpeningHourWhereUniqueInput!]
  connect: [OpeningHourWhereUniqueInput!]
  set: [OpeningHourWhereUniqueInput!]
  disconnect: [OpeningHourWhereUniqueInput!]
  update: [OpeningHourUpdateWithWhereUniqueWithoutServiceProviderInput!]
  upsert: [OpeningHourUpsertWithWhereUniqueWithoutServiceProviderInput!]
  deleteMany: [OpeningHourScalarWhereInput!]
  updateMany: [OpeningHourUpdateManyWithWhereNestedInput!]
}

input OpeningHourUpdateManyWithWhereNestedInput {
  where: OpeningHourScalarWhereInput!
  data: OpeningHourUpdateManyDataInput!
}

input OpeningHourUpdateWithoutServiceProviderDataInput {
  coreId: String
  dayOfWeek: DayOfWeek
  startTime: DateTime
  endTime: DateTime
  selected: Boolean
}

input OpeningHourUpdateWithWhereUniqueWithoutServiceProviderInput {
  where: OpeningHourWhereUniqueInput!
  data: OpeningHourUpdateWithoutServiceProviderDataInput!
}

input OpeningHourUpsertWithWhereUniqueWithoutServiceProviderInput {
  where: OpeningHourWhereUniqueInput!
  update: OpeningHourUpdateWithoutServiceProviderDataInput!
  create: OpeningHourCreateWithoutServiceProviderInput!
}

input OpeningHourWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  coreId: String
  coreId_not: String
  coreId_in: [String!]
  coreId_not_in: [String!]
  coreId_lt: String
  coreId_lte: String
  coreId_gt: String
  coreId_gte: String
  coreId_contains: String
  coreId_not_contains: String
  coreId_starts_with: String
  coreId_not_starts_with: String
  coreId_ends_with: String
  coreId_not_ends_with: String
  serviceProvider: CServiceProviderWhereInput
  dayOfWeek: DayOfWeek
  dayOfWeek_not: DayOfWeek
  dayOfWeek_in: [DayOfWeek!]
  dayOfWeek_not_in: [DayOfWeek!]
  startTime: DateTime
  startTime_not: DateTime
  startTime_in: [DateTime!]
  startTime_not_in: [DateTime!]
  startTime_lt: DateTime
  startTime_lte: DateTime
  startTime_gt: DateTime
  startTime_gte: DateTime
  endTime: DateTime
  endTime_not: DateTime
  endTime_in: [DateTime!]
  endTime_not_in: [DateTime!]
  endTime_lt: DateTime
  endTime_lte: DateTime
  endTime_gt: DateTime
  endTime_gte: DateTime
  selected: Boolean
  selected_not: Boolean
  AND: [OpeningHourWhereInput!]
  OR: [OpeningHourWhereInput!]
  NOT: [OpeningHourWhereInput!]
}

input OpeningHourWhereUniqueInput {
  id: ID
  coreId: String
}

type OrderBusinessType {
  id: ID!
  coreId: String!
  description: String
  name: String
  isActive: Boolean
}

type OrderBusinessTypeConnection {
  pageInfo: PageInfo!
  edges: [OrderBusinessTypeEdge]!
  aggregate: AggregateOrderBusinessType!
}

input OrderBusinessTypeCreateInput {
  coreId: String!
  description: String
  name: String
  isActive: Boolean
}

input OrderBusinessTypeCreateOneInput {
  create: OrderBusinessTypeCreateInput
  connect: OrderBusinessTypeWhereUniqueInput
}

type OrderBusinessTypeEdge {
  node: OrderBusinessType!
  cursor: String!
}

enum OrderBusinessTypeOrderByInput {
  id_ASC
  id_DESC
  coreId_ASC
  coreId_DESC
  description_ASC
  description_DESC
  name_ASC
  name_DESC
  isActive_ASC
  isActive_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type OrderBusinessTypePreviousValues {
  id: ID!
  coreId: String!
  description: String
  name: String
  isActive: Boolean
}

type OrderBusinessTypeSubscriptionPayload {
  mutation: MutationType!
  node: OrderBusinessType
  updatedFields: [String!]
  previousValues: OrderBusinessTypePreviousValues
}

input OrderBusinessTypeSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: OrderBusinessTypeWhereInput
  AND: [OrderBusinessTypeSubscriptionWhereInput!]
  OR: [OrderBusinessTypeSubscriptionWhereInput!]
  NOT: [OrderBusinessTypeSubscriptionWhereInput!]
}

input OrderBusinessTypeUpdateDataInput {
  coreId: String
  description: String
  name: String
  isActive: Boolean
}

input OrderBusinessTypeUpdateInput {
  coreId: String
  description: String
  name: String
  isActive: Boolean
}

input OrderBusinessTypeUpdateManyMutationInput {
  coreId: String
  description: String
  name: String
  isActive: Boolean
}

input OrderBusinessTypeUpdateOneInput {
  create: OrderBusinessTypeCreateInput
  update: OrderBusinessTypeUpdateDataInput
  upsert: OrderBusinessTypeUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: OrderBusinessTypeWhereUniqueInput
}

input OrderBusinessTypeUpsertNestedInput {
  update: OrderBusinessTypeUpdateDataInput!
  create: OrderBusinessTypeCreateInput!
}

input OrderBusinessTypeWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  coreId: String
  coreId_not: String
  coreId_in: [String!]
  coreId_not_in: [String!]
  coreId_lt: String
  coreId_lte: String
  coreId_gt: String
  coreId_gte: String
  coreId_contains: String
  coreId_not_contains: String
  coreId_starts_with: String
  coreId_not_starts_with: String
  coreId_ends_with: String
  coreId_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  isActive: Boolean
  isActive_not: Boolean
  AND: [OrderBusinessTypeWhereInput!]
  OR: [OrderBusinessTypeWhereInput!]
  NOT: [OrderBusinessTypeWhereInput!]
}

input OrderBusinessTypeWhereUniqueInput {
  id: ID
  coreId: String
}

type OverBudget {
  id: ID!
  coreId: String
  status: String
  isCustomerPaying: Boolean
  overBudgetAmount: Float
  adjustedAmount: Float
  type: String
  notes(where: OverBudgetNoteWhereInput, orderBy: OverBudgetNoteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [OverBudgetNote!]
}

type OverBudgetConnection {
  pageInfo: PageInfo!
  edges: [OverBudgetEdge]!
  aggregate: AggregateOverBudget!
}

input OverBudgetCreateInput {
  coreId: String
  status: String
  isCustomerPaying: Boolean
  overBudgetAmount: Float
  adjustedAmount: Float
  type: String
  notes: OverBudgetNoteCreateManyWithoutOverBudgetInput
}

input OverBudgetCreateOneInput {
  create: OverBudgetCreateInput
  connect: OverBudgetWhereUniqueInput
}

input OverBudgetCreateOneWithoutNotesInput {
  create: OverBudgetCreateWithoutNotesInput
  connect: OverBudgetWhereUniqueInput
}

input OverBudgetCreateWithoutNotesInput {
  coreId: String
  status: String
  isCustomerPaying: Boolean
  overBudgetAmount: Float
  adjustedAmount: Float
  type: String
}

type OverBudgetEdge {
  node: OverBudget!
  cursor: String!
}

type OverBudgetNote {
  id: ID!
  coreId: String!
  note: String
  overBudget: OverBudget
  createdBy: CPerson
  _createdAt: DateTime
}

type OverBudgetNoteConnection {
  pageInfo: PageInfo!
  edges: [OverBudgetNoteEdge]!
  aggregate: AggregateOverBudgetNote!
}

input OverBudgetNoteCreateInput {
  coreId: String!
  note: String
  overBudget: OverBudgetCreateOneWithoutNotesInput
  createdBy: CPersonCreateOneInput
  _createdAt: DateTime
}

input OverBudgetNoteCreateManyWithoutOverBudgetInput {
  create: [OverBudgetNoteCreateWithoutOverBudgetInput!]
  connect: [OverBudgetNoteWhereUniqueInput!]
}

input OverBudgetNoteCreateWithoutOverBudgetInput {
  coreId: String!
  note: String
  createdBy: CPersonCreateOneInput
  _createdAt: DateTime
}

type OverBudgetNoteEdge {
  node: OverBudgetNote!
  cursor: String!
}

enum OverBudgetNoteOrderByInput {
  id_ASC
  id_DESC
  coreId_ASC
  coreId_DESC
  note_ASC
  note_DESC
  _createdAt_ASC
  _createdAt_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type OverBudgetNotePreviousValues {
  id: ID!
  coreId: String!
  note: String
  _createdAt: DateTime
}

input OverBudgetNoteScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  coreId: String
  coreId_not: String
  coreId_in: [String!]
  coreId_not_in: [String!]
  coreId_lt: String
  coreId_lte: String
  coreId_gt: String
  coreId_gte: String
  coreId_contains: String
  coreId_not_contains: String
  coreId_starts_with: String
  coreId_not_starts_with: String
  coreId_ends_with: String
  coreId_not_ends_with: String
  note: String
  note_not: String
  note_in: [String!]
  note_not_in: [String!]
  note_lt: String
  note_lte: String
  note_gt: String
  note_gte: String
  note_contains: String
  note_not_contains: String
  note_starts_with: String
  note_not_starts_with: String
  note_ends_with: String
  note_not_ends_with: String
  _createdAt: DateTime
  _createdAt_not: DateTime
  _createdAt_in: [DateTime!]
  _createdAt_not_in: [DateTime!]
  _createdAt_lt: DateTime
  _createdAt_lte: DateTime
  _createdAt_gt: DateTime
  _createdAt_gte: DateTime
  AND: [OverBudgetNoteScalarWhereInput!]
  OR: [OverBudgetNoteScalarWhereInput!]
  NOT: [OverBudgetNoteScalarWhereInput!]
}

type OverBudgetNoteSubscriptionPayload {
  mutation: MutationType!
  node: OverBudgetNote
  updatedFields: [String!]
  previousValues: OverBudgetNotePreviousValues
}

input OverBudgetNoteSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: OverBudgetNoteWhereInput
  AND: [OverBudgetNoteSubscriptionWhereInput!]
  OR: [OverBudgetNoteSubscriptionWhereInput!]
  NOT: [OverBudgetNoteSubscriptionWhereInput!]
}

input OverBudgetNoteUpdateInput {
  coreId: String
  note: String
  overBudget: OverBudgetUpdateOneWithoutNotesInput
  createdBy: CPersonUpdateOneInput
  _createdAt: DateTime
}

input OverBudgetNoteUpdateManyDataInput {
  coreId: String
  note: String
  _createdAt: DateTime
}

input OverBudgetNoteUpdateManyMutationInput {
  coreId: String
  note: String
  _createdAt: DateTime
}

input OverBudgetNoteUpdateManyWithoutOverBudgetInput {
  create: [OverBudgetNoteCreateWithoutOverBudgetInput!]
  delete: [OverBudgetNoteWhereUniqueInput!]
  connect: [OverBudgetNoteWhereUniqueInput!]
  set: [OverBudgetNoteWhereUniqueInput!]
  disconnect: [OverBudgetNoteWhereUniqueInput!]
  update: [OverBudgetNoteUpdateWithWhereUniqueWithoutOverBudgetInput!]
  upsert: [OverBudgetNoteUpsertWithWhereUniqueWithoutOverBudgetInput!]
  deleteMany: [OverBudgetNoteScalarWhereInput!]
  updateMany: [OverBudgetNoteUpdateManyWithWhereNestedInput!]
}

input OverBudgetNoteUpdateManyWithWhereNestedInput {
  where: OverBudgetNoteScalarWhereInput!
  data: OverBudgetNoteUpdateManyDataInput!
}

input OverBudgetNoteUpdateWithoutOverBudgetDataInput {
  coreId: String
  note: String
  createdBy: CPersonUpdateOneInput
  _createdAt: DateTime
}

input OverBudgetNoteUpdateWithWhereUniqueWithoutOverBudgetInput {
  where: OverBudgetNoteWhereUniqueInput!
  data: OverBudgetNoteUpdateWithoutOverBudgetDataInput!
}

input OverBudgetNoteUpsertWithWhereUniqueWithoutOverBudgetInput {
  where: OverBudgetNoteWhereUniqueInput!
  update: OverBudgetNoteUpdateWithoutOverBudgetDataInput!
  create: OverBudgetNoteCreateWithoutOverBudgetInput!
}

input OverBudgetNoteWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  coreId: String
  coreId_not: String
  coreId_in: [String!]
  coreId_not_in: [String!]
  coreId_lt: String
  coreId_lte: String
  coreId_gt: String
  coreId_gte: String
  coreId_contains: String
  coreId_not_contains: String
  coreId_starts_with: String
  coreId_not_starts_with: String
  coreId_ends_with: String
  coreId_not_ends_with: String
  note: String
  note_not: String
  note_in: [String!]
  note_not_in: [String!]
  note_lt: String
  note_lte: String
  note_gt: String
  note_gte: String
  note_contains: String
  note_not_contains: String
  note_starts_with: String
  note_not_starts_with: String
  note_ends_with: String
  note_not_ends_with: String
  overBudget: OverBudgetWhereInput
  createdBy: CPersonWhereInput
  _createdAt: DateTime
  _createdAt_not: DateTime
  _createdAt_in: [DateTime!]
  _createdAt_not_in: [DateTime!]
  _createdAt_lt: DateTime
  _createdAt_lte: DateTime
  _createdAt_gt: DateTime
  _createdAt_gte: DateTime
  AND: [OverBudgetNoteWhereInput!]
  OR: [OverBudgetNoteWhereInput!]
  NOT: [OverBudgetNoteWhereInput!]
}

input OverBudgetNoteWhereUniqueInput {
  id: ID
  coreId: String
}

enum OverBudgetOrderByInput {
  id_ASC
  id_DESC
  coreId_ASC
  coreId_DESC
  status_ASC
  status_DESC
  isCustomerPaying_ASC
  isCustomerPaying_DESC
  overBudgetAmount_ASC
  overBudgetAmount_DESC
  adjustedAmount_ASC
  adjustedAmount_DESC
  type_ASC
  type_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type OverBudgetPreviousValues {
  id: ID!
  coreId: String
  status: String
  isCustomerPaying: Boolean
  overBudgetAmount: Float
  adjustedAmount: Float
  type: String
}

type OverBudgetSubscriptionPayload {
  mutation: MutationType!
  node: OverBudget
  updatedFields: [String!]
  previousValues: OverBudgetPreviousValues
}

input OverBudgetSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: OverBudgetWhereInput
  AND: [OverBudgetSubscriptionWhereInput!]
  OR: [OverBudgetSubscriptionWhereInput!]
  NOT: [OverBudgetSubscriptionWhereInput!]
}

input OverBudgetUpdateDataInput {
  coreId: String
  status: String
  isCustomerPaying: Boolean
  overBudgetAmount: Float
  adjustedAmount: Float
  type: String
  notes: OverBudgetNoteUpdateManyWithoutOverBudgetInput
}

input OverBudgetUpdateInput {
  coreId: String
  status: String
  isCustomerPaying: Boolean
  overBudgetAmount: Float
  adjustedAmount: Float
  type: String
  notes: OverBudgetNoteUpdateManyWithoutOverBudgetInput
}

input OverBudgetUpdateManyMutationInput {
  coreId: String
  status: String
  isCustomerPaying: Boolean
  overBudgetAmount: Float
  adjustedAmount: Float
  type: String
}

input OverBudgetUpdateOneInput {
  create: OverBudgetCreateInput
  update: OverBudgetUpdateDataInput
  upsert: OverBudgetUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: OverBudgetWhereUniqueInput
}

input OverBudgetUpdateOneWithoutNotesInput {
  create: OverBudgetCreateWithoutNotesInput
  update: OverBudgetUpdateWithoutNotesDataInput
  upsert: OverBudgetUpsertWithoutNotesInput
  delete: Boolean
  disconnect: Boolean
  connect: OverBudgetWhereUniqueInput
}

input OverBudgetUpdateWithoutNotesDataInput {
  coreId: String
  status: String
  isCustomerPaying: Boolean
  overBudgetAmount: Float
  adjustedAmount: Float
  type: String
}

input OverBudgetUpsertNestedInput {
  update: OverBudgetUpdateDataInput!
  create: OverBudgetCreateInput!
}

input OverBudgetUpsertWithoutNotesInput {
  update: OverBudgetUpdateWithoutNotesDataInput!
  create: OverBudgetCreateWithoutNotesInput!
}

input OverBudgetWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  coreId: String
  coreId_not: String
  coreId_in: [String!]
  coreId_not_in: [String!]
  coreId_lt: String
  coreId_lte: String
  coreId_gt: String
  coreId_gte: String
  coreId_contains: String
  coreId_not_contains: String
  coreId_starts_with: String
  coreId_not_starts_with: String
  coreId_ends_with: String
  coreId_not_ends_with: String
  status: String
  status_not: String
  status_in: [String!]
  status_not_in: [String!]
  status_lt: String
  status_lte: String
  status_gt: String
  status_gte: String
  status_contains: String
  status_not_contains: String
  status_starts_with: String
  status_not_starts_with: String
  status_ends_with: String
  status_not_ends_with: String
  isCustomerPaying: Boolean
  isCustomerPaying_not: Boolean
  overBudgetAmount: Float
  overBudgetAmount_not: Float
  overBudgetAmount_in: [Float!]
  overBudgetAmount_not_in: [Float!]
  overBudgetAmount_lt: Float
  overBudgetAmount_lte: Float
  overBudgetAmount_gt: Float
  overBudgetAmount_gte: Float
  adjustedAmount: Float
  adjustedAmount_not: Float
  adjustedAmount_in: [Float!]
  adjustedAmount_not_in: [Float!]
  adjustedAmount_lt: Float
  adjustedAmount_lte: Float
  adjustedAmount_gt: Float
  adjustedAmount_gte: Float
  type: String
  type_not: String
  type_in: [String!]
  type_not_in: [String!]
  type_lt: String
  type_lte: String
  type_gt: String
  type_gte: String
  type_contains: String
  type_not_contains: String
  type_starts_with: String
  type_not_starts_with: String
  type_ends_with: String
  type_not_ends_with: String
  notes_every: OverBudgetNoteWhereInput
  notes_some: OverBudgetNoteWhereInput
  notes_none: OverBudgetNoteWhereInput
  AND: [OverBudgetWhereInput!]
  OR: [OverBudgetWhereInput!]
  NOT: [OverBudgetWhereInput!]
}

input OverBudgetWhereUniqueInput {
  id: ID
  coreId: String
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Passenger {
  id: ID!
  coreId: String!
  person: CPerson
  isLead: Boolean
}

type PassengerConnection {
  pageInfo: PageInfo!
  edges: [PassengerEdge]!
  aggregate: AggregatePassenger!
}

input PassengerCreateInput {
  coreId: String!
  person: CPersonCreateOneInput
  isLead: Boolean
}

input PassengerCreateManyInput {
  create: [PassengerCreateInput!]
  connect: [PassengerWhereUniqueInput!]
}

type PassengerEdge {
  node: Passenger!
  cursor: String!
}

enum PassengerOrderByInput {
  id_ASC
  id_DESC
  coreId_ASC
  coreId_DESC
  isLead_ASC
  isLead_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type PassengerPreviousValues {
  id: ID!
  coreId: String!
  isLead: Boolean
}

input PassengerScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  coreId: String
  coreId_not: String
  coreId_in: [String!]
  coreId_not_in: [String!]
  coreId_lt: String
  coreId_lte: String
  coreId_gt: String
  coreId_gte: String
  coreId_contains: String
  coreId_not_contains: String
  coreId_starts_with: String
  coreId_not_starts_with: String
  coreId_ends_with: String
  coreId_not_ends_with: String
  isLead: Boolean
  isLead_not: Boolean
  AND: [PassengerScalarWhereInput!]
  OR: [PassengerScalarWhereInput!]
  NOT: [PassengerScalarWhereInput!]
}

type PassengerSubscriptionPayload {
  mutation: MutationType!
  node: Passenger
  updatedFields: [String!]
  previousValues: PassengerPreviousValues
}

input PassengerSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PassengerWhereInput
  AND: [PassengerSubscriptionWhereInput!]
  OR: [PassengerSubscriptionWhereInput!]
  NOT: [PassengerSubscriptionWhereInput!]
}

input PassengerUpdateDataInput {
  coreId: String
  person: CPersonUpdateOneInput
  isLead: Boolean
}

input PassengerUpdateInput {
  coreId: String
  person: CPersonUpdateOneInput
  isLead: Boolean
}

input PassengerUpdateManyDataInput {
  coreId: String
  isLead: Boolean
}

input PassengerUpdateManyInput {
  create: [PassengerCreateInput!]
  update: [PassengerUpdateWithWhereUniqueNestedInput!]
  upsert: [PassengerUpsertWithWhereUniqueNestedInput!]
  delete: [PassengerWhereUniqueInput!]
  connect: [PassengerWhereUniqueInput!]
  set: [PassengerWhereUniqueInput!]
  disconnect: [PassengerWhereUniqueInput!]
  deleteMany: [PassengerScalarWhereInput!]
  updateMany: [PassengerUpdateManyWithWhereNestedInput!]
}

input PassengerUpdateManyMutationInput {
  coreId: String
  isLead: Boolean
}

input PassengerUpdateManyWithWhereNestedInput {
  where: PassengerScalarWhereInput!
  data: PassengerUpdateManyDataInput!
}

input PassengerUpdateWithWhereUniqueNestedInput {
  where: PassengerWhereUniqueInput!
  data: PassengerUpdateDataInput!
}

input PassengerUpsertWithWhereUniqueNestedInput {
  where: PassengerWhereUniqueInput!
  update: PassengerUpdateDataInput!
  create: PassengerCreateInput!
}

input PassengerWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  coreId: String
  coreId_not: String
  coreId_in: [String!]
  coreId_not_in: [String!]
  coreId_lt: String
  coreId_lte: String
  coreId_gt: String
  coreId_gte: String
  coreId_contains: String
  coreId_not_contains: String
  coreId_starts_with: String
  coreId_not_starts_with: String
  coreId_ends_with: String
  coreId_not_ends_with: String
  person: CPersonWhereInput
  isLead: Boolean
  isLead_not: Boolean
  AND: [PassengerWhereInput!]
  OR: [PassengerWhereInput!]
  NOT: [PassengerWhereInput!]
}

input PassengerWhereUniqueInput {
  id: ID
  coreId: String
}

type Proposal {
  id: ID!
  coreId: String!
  task: CateringTask
  totalAmount: Float
  currency: Currency
  proposalItems(where: ProposalItemWhereInput, orderBy: ProposalItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ProposalItem!]
  purchaseOrders(where: CateringPurchaseOrderWhereInput, orderBy: CateringPurchaseOrderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CateringPurchaseOrder!]
  documents(where: ProposalDocumentWhereInput, orderBy: ProposalDocumentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ProposalDocument!]
  overBudget: OverBudget
  qualityControl: QualityControl
  createdBy: CPerson
  _createdAt: DateTime
  modifiedBy: CPerson
  modifiedAt: DateTime
  removed: Boolean
}

type ProposalConnection {
  pageInfo: PageInfo!
  edges: [ProposalEdge]!
  aggregate: AggregateProposal!
}

input ProposalCreateInput {
  coreId: String!
  task: CateringTaskCreateOneWithoutProposalInput
  totalAmount: Float
  currency: CurrencyCreateOneInput
  proposalItems: ProposalItemCreateManyInput
  purchaseOrders: CateringPurchaseOrderCreateManyWithoutProposalInput
  documents: ProposalDocumentCreateManyInput
  overBudget: OverBudgetCreateOneInput
  qualityControl: QualityControlCreateOneWithoutProposalInput
  createdBy: CPersonCreateOneInput
  _createdAt: DateTime
  modifiedBy: CPersonCreateOneInput
  modifiedAt: DateTime
  removed: Boolean
}

input ProposalCreateOneWithoutPurchaseOrdersInput {
  create: ProposalCreateWithoutPurchaseOrdersInput
  connect: ProposalWhereUniqueInput
}

input ProposalCreateOneWithoutQualityControlInput {
  create: ProposalCreateWithoutQualityControlInput
  connect: ProposalWhereUniqueInput
}

input ProposalCreateOneWithoutTaskInput {
  create: ProposalCreateWithoutTaskInput
  connect: ProposalWhereUniqueInput
}

input ProposalCreateWithoutPurchaseOrdersInput {
  coreId: String!
  task: CateringTaskCreateOneWithoutProposalInput
  totalAmount: Float
  currency: CurrencyCreateOneInput
  proposalItems: ProposalItemCreateManyInput
  documents: ProposalDocumentCreateManyInput
  overBudget: OverBudgetCreateOneInput
  qualityControl: QualityControlCreateOneWithoutProposalInput
  createdBy: CPersonCreateOneInput
  _createdAt: DateTime
  modifiedBy: CPersonCreateOneInput
  modifiedAt: DateTime
  removed: Boolean
}

input ProposalCreateWithoutQualityControlInput {
  coreId: String!
  task: CateringTaskCreateOneWithoutProposalInput
  totalAmount: Float
  currency: CurrencyCreateOneInput
  proposalItems: ProposalItemCreateManyInput
  purchaseOrders: CateringPurchaseOrderCreateManyWithoutProposalInput
  documents: ProposalDocumentCreateManyInput
  overBudget: OverBudgetCreateOneInput
  createdBy: CPersonCreateOneInput
  _createdAt: DateTime
  modifiedBy: CPersonCreateOneInput
  modifiedAt: DateTime
  removed: Boolean
}

input ProposalCreateWithoutTaskInput {
  coreId: String!
  totalAmount: Float
  currency: CurrencyCreateOneInput
  proposalItems: ProposalItemCreateManyInput
  purchaseOrders: CateringPurchaseOrderCreateManyWithoutProposalInput
  documents: ProposalDocumentCreateManyInput
  overBudget: OverBudgetCreateOneInput
  qualityControl: QualityControlCreateOneWithoutProposalInput
  createdBy: CPersonCreateOneInput
  _createdAt: DateTime
  modifiedBy: CPersonCreateOneInput
  modifiedAt: DateTime
  removed: Boolean
}

type ProposalDocument {
  id: ID!
  coreId: String!
  documentType: String
  fileLink: String
  metadata: String
  createdBy: CPerson
  _createdAt: DateTime
  flightFileProposal: FlightFileProposal
}

type ProposalDocumentConnection {
  pageInfo: PageInfo!
  edges: [ProposalDocumentEdge]!
  aggregate: AggregateProposalDocument!
}

input ProposalDocumentCreateInput {
  coreId: String!
  documentType: String
  fileLink: String
  metadata: String
  createdBy: CPersonCreateOneInput
  _createdAt: DateTime
  flightFileProposal: FlightFileProposalCreateOneWithoutProposalDocumentInput
}

input ProposalDocumentCreateManyInput {
  create: [ProposalDocumentCreateInput!]
  connect: [ProposalDocumentWhereUniqueInput!]
}

input ProposalDocumentCreateOneWithoutFlightFileProposalInput {
  create: ProposalDocumentCreateWithoutFlightFileProposalInput
  connect: ProposalDocumentWhereUniqueInput
}

input ProposalDocumentCreateWithoutFlightFileProposalInput {
  coreId: String!
  documentType: String
  fileLink: String
  metadata: String
  createdBy: CPersonCreateOneInput
  _createdAt: DateTime
}

type ProposalDocumentEdge {
  node: ProposalDocument!
  cursor: String!
}

enum ProposalDocumentOrderByInput {
  id_ASC
  id_DESC
  coreId_ASC
  coreId_DESC
  documentType_ASC
  documentType_DESC
  fileLink_ASC
  fileLink_DESC
  metadata_ASC
  metadata_DESC
  _createdAt_ASC
  _createdAt_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ProposalDocumentPreviousValues {
  id: ID!
  coreId: String!
  documentType: String
  fileLink: String
  metadata: String
  _createdAt: DateTime
}

input ProposalDocumentScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  coreId: String
  coreId_not: String
  coreId_in: [String!]
  coreId_not_in: [String!]
  coreId_lt: String
  coreId_lte: String
  coreId_gt: String
  coreId_gte: String
  coreId_contains: String
  coreId_not_contains: String
  coreId_starts_with: String
  coreId_not_starts_with: String
  coreId_ends_with: String
  coreId_not_ends_with: String
  documentType: String
  documentType_not: String
  documentType_in: [String!]
  documentType_not_in: [String!]
  documentType_lt: String
  documentType_lte: String
  documentType_gt: String
  documentType_gte: String
  documentType_contains: String
  documentType_not_contains: String
  documentType_starts_with: String
  documentType_not_starts_with: String
  documentType_ends_with: String
  documentType_not_ends_with: String
  fileLink: String
  fileLink_not: String
  fileLink_in: [String!]
  fileLink_not_in: [String!]
  fileLink_lt: String
  fileLink_lte: String
  fileLink_gt: String
  fileLink_gte: String
  fileLink_contains: String
  fileLink_not_contains: String
  fileLink_starts_with: String
  fileLink_not_starts_with: String
  fileLink_ends_with: String
  fileLink_not_ends_with: String
  metadata: String
  metadata_not: String
  metadata_in: [String!]
  metadata_not_in: [String!]
  metadata_lt: String
  metadata_lte: String
  metadata_gt: String
  metadata_gte: String
  metadata_contains: String
  metadata_not_contains: String
  metadata_starts_with: String
  metadata_not_starts_with: String
  metadata_ends_with: String
  metadata_not_ends_with: String
  _createdAt: DateTime
  _createdAt_not: DateTime
  _createdAt_in: [DateTime!]
  _createdAt_not_in: [DateTime!]
  _createdAt_lt: DateTime
  _createdAt_lte: DateTime
  _createdAt_gt: DateTime
  _createdAt_gte: DateTime
  AND: [ProposalDocumentScalarWhereInput!]
  OR: [ProposalDocumentScalarWhereInput!]
  NOT: [ProposalDocumentScalarWhereInput!]
}

type ProposalDocumentSubscriptionPayload {
  mutation: MutationType!
  node: ProposalDocument
  updatedFields: [String!]
  previousValues: ProposalDocumentPreviousValues
}

input ProposalDocumentSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ProposalDocumentWhereInput
  AND: [ProposalDocumentSubscriptionWhereInput!]
  OR: [ProposalDocumentSubscriptionWhereInput!]
  NOT: [ProposalDocumentSubscriptionWhereInput!]
}

input ProposalDocumentUpdateDataInput {
  coreId: String
  documentType: String
  fileLink: String
  metadata: String
  createdBy: CPersonUpdateOneInput
  _createdAt: DateTime
  flightFileProposal: FlightFileProposalUpdateOneWithoutProposalDocumentInput
}

input ProposalDocumentUpdateInput {
  coreId: String
  documentType: String
  fileLink: String
  metadata: String
  createdBy: CPersonUpdateOneInput
  _createdAt: DateTime
  flightFileProposal: FlightFileProposalUpdateOneWithoutProposalDocumentInput
}

input ProposalDocumentUpdateManyDataInput {
  coreId: String
  documentType: String
  fileLink: String
  metadata: String
  _createdAt: DateTime
}

input ProposalDocumentUpdateManyInput {
  create: [ProposalDocumentCreateInput!]
  update: [ProposalDocumentUpdateWithWhereUniqueNestedInput!]
  upsert: [ProposalDocumentUpsertWithWhereUniqueNestedInput!]
  delete: [ProposalDocumentWhereUniqueInput!]
  connect: [ProposalDocumentWhereUniqueInput!]
  set: [ProposalDocumentWhereUniqueInput!]
  disconnect: [ProposalDocumentWhereUniqueInput!]
  deleteMany: [ProposalDocumentScalarWhereInput!]
  updateMany: [ProposalDocumentUpdateManyWithWhereNestedInput!]
}

input ProposalDocumentUpdateManyMutationInput {
  coreId: String
  documentType: String
  fileLink: String
  metadata: String
  _createdAt: DateTime
}

input ProposalDocumentUpdateManyWithWhereNestedInput {
  where: ProposalDocumentScalarWhereInput!
  data: ProposalDocumentUpdateManyDataInput!
}

input ProposalDocumentUpdateOneWithoutFlightFileProposalInput {
  create: ProposalDocumentCreateWithoutFlightFileProposalInput
  update: ProposalDocumentUpdateWithoutFlightFileProposalDataInput
  upsert: ProposalDocumentUpsertWithoutFlightFileProposalInput
  delete: Boolean
  disconnect: Boolean
  connect: ProposalDocumentWhereUniqueInput
}

input ProposalDocumentUpdateWithoutFlightFileProposalDataInput {
  coreId: String
  documentType: String
  fileLink: String
  metadata: String
  createdBy: CPersonUpdateOneInput
  _createdAt: DateTime
}

input ProposalDocumentUpdateWithWhereUniqueNestedInput {
  where: ProposalDocumentWhereUniqueInput!
  data: ProposalDocumentUpdateDataInput!
}

input ProposalDocumentUpsertWithoutFlightFileProposalInput {
  update: ProposalDocumentUpdateWithoutFlightFileProposalDataInput!
  create: ProposalDocumentCreateWithoutFlightFileProposalInput!
}

input ProposalDocumentUpsertWithWhereUniqueNestedInput {
  where: ProposalDocumentWhereUniqueInput!
  update: ProposalDocumentUpdateDataInput!
  create: ProposalDocumentCreateInput!
}

input ProposalDocumentWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  coreId: String
  coreId_not: String
  coreId_in: [String!]
  coreId_not_in: [String!]
  coreId_lt: String
  coreId_lte: String
  coreId_gt: String
  coreId_gte: String
  coreId_contains: String
  coreId_not_contains: String
  coreId_starts_with: String
  coreId_not_starts_with: String
  coreId_ends_with: String
  coreId_not_ends_with: String
  documentType: String
  documentType_not: String
  documentType_in: [String!]
  documentType_not_in: [String!]
  documentType_lt: String
  documentType_lte: String
  documentType_gt: String
  documentType_gte: String
  documentType_contains: String
  documentType_not_contains: String
  documentType_starts_with: String
  documentType_not_starts_with: String
  documentType_ends_with: String
  documentType_not_ends_with: String
  fileLink: String
  fileLink_not: String
  fileLink_in: [String!]
  fileLink_not_in: [String!]
  fileLink_lt: String
  fileLink_lte: String
  fileLink_gt: String
  fileLink_gte: String
  fileLink_contains: String
  fileLink_not_contains: String
  fileLink_starts_with: String
  fileLink_not_starts_with: String
  fileLink_ends_with: String
  fileLink_not_ends_with: String
  metadata: String
  metadata_not: String
  metadata_in: [String!]
  metadata_not_in: [String!]
  metadata_lt: String
  metadata_lte: String
  metadata_gt: String
  metadata_gte: String
  metadata_contains: String
  metadata_not_contains: String
  metadata_starts_with: String
  metadata_not_starts_with: String
  metadata_ends_with: String
  metadata_not_ends_with: String
  createdBy: CPersonWhereInput
  _createdAt: DateTime
  _createdAt_not: DateTime
  _createdAt_in: [DateTime!]
  _createdAt_not_in: [DateTime!]
  _createdAt_lt: DateTime
  _createdAt_lte: DateTime
  _createdAt_gt: DateTime
  _createdAt_gte: DateTime
  flightFileProposal: FlightFileProposalWhereInput
  AND: [ProposalDocumentWhereInput!]
  OR: [ProposalDocumentWhereInput!]
  NOT: [ProposalDocumentWhereInput!]
}

input ProposalDocumentWhereUniqueInput {
  id: ID
  coreId: String
}

type ProposalEdge {
  node: Proposal!
  cursor: String!
}

type ProposalItem {
  id: ID!
  coreId: String!
  originalPriceItem: CPriceItem
  hidden: Boolean
  quantity: Int
  service: String
  unit: CateringUnit
  price: Float
  currency: Currency
  name: String
  description: String
  note: String
  cateringCategory: CateringCategory
  deliveryAirport: CAirport
  deliveryServiceProvider: CServiceProvider
  chargeable: Boolean
  ingredients(where: CateringIngredientWhereInput, orderBy: CateringIngredientOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CateringIngredient!]
  cuisine: CateringCuisine
  dietaryPreferences(where: CateringDietaryPreferenceWhereInput, orderBy: CateringDietaryPreferenceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CateringDietaryPreference!]
  flightLegId: String
  standard: Boolean
  orderCategory: Int
  orderItem: Int
}

type ProposalItemConnection {
  pageInfo: PageInfo!
  edges: [ProposalItemEdge]!
  aggregate: AggregateProposalItem!
}

input ProposalItemCreateInput {
  coreId: String!
  originalPriceItem: CPriceItemCreateOneInput
  hidden: Boolean
  quantity: Int
  service: String
  unit: CateringUnitCreateOneInput
  price: Float
  currency: CurrencyCreateOneInput
  name: String
  description: String
  note: String
  cateringCategory: CateringCategoryCreateOneInput
  deliveryAirport: CAirportCreateOneInput
  deliveryServiceProvider: CServiceProviderCreateOneInput
  chargeable: Boolean
  ingredients: CateringIngredientCreateManyInput
  cuisine: CateringCuisineCreateOneInput
  dietaryPreferences: CateringDietaryPreferenceCreateManyInput
  flightLegId: String
  standard: Boolean
  orderCategory: Int
  orderItem: Int
}

input ProposalItemCreateManyInput {
  create: [ProposalItemCreateInput!]
  connect: [ProposalItemWhereUniqueInput!]
}

input ProposalItemCreateOneInput {
  create: ProposalItemCreateInput
  connect: ProposalItemWhereUniqueInput
}

type ProposalItemEdge {
  node: ProposalItem!
  cursor: String!
}

enum ProposalItemOrderByInput {
  id_ASC
  id_DESC
  coreId_ASC
  coreId_DESC
  hidden_ASC
  hidden_DESC
  quantity_ASC
  quantity_DESC
  service_ASC
  service_DESC
  price_ASC
  price_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  note_ASC
  note_DESC
  chargeable_ASC
  chargeable_DESC
  flightLegId_ASC
  flightLegId_DESC
  standard_ASC
  standard_DESC
  orderCategory_ASC
  orderCategory_DESC
  orderItem_ASC
  orderItem_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ProposalItemPreviousValues {
  id: ID!
  coreId: String!
  hidden: Boolean
  quantity: Int
  service: String
  price: Float
  name: String
  description: String
  note: String
  chargeable: Boolean
  flightLegId: String
  standard: Boolean
  orderCategory: Int
  orderItem: Int
}

input ProposalItemScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  coreId: String
  coreId_not: String
  coreId_in: [String!]
  coreId_not_in: [String!]
  coreId_lt: String
  coreId_lte: String
  coreId_gt: String
  coreId_gte: String
  coreId_contains: String
  coreId_not_contains: String
  coreId_starts_with: String
  coreId_not_starts_with: String
  coreId_ends_with: String
  coreId_not_ends_with: String
  hidden: Boolean
  hidden_not: Boolean
  quantity: Int
  quantity_not: Int
  quantity_in: [Int!]
  quantity_not_in: [Int!]
  quantity_lt: Int
  quantity_lte: Int
  quantity_gt: Int
  quantity_gte: Int
  service: String
  service_not: String
  service_in: [String!]
  service_not_in: [String!]
  service_lt: String
  service_lte: String
  service_gt: String
  service_gte: String
  service_contains: String
  service_not_contains: String
  service_starts_with: String
  service_not_starts_with: String
  service_ends_with: String
  service_not_ends_with: String
  price: Float
  price_not: Float
  price_in: [Float!]
  price_not_in: [Float!]
  price_lt: Float
  price_lte: Float
  price_gt: Float
  price_gte: Float
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  note: String
  note_not: String
  note_in: [String!]
  note_not_in: [String!]
  note_lt: String
  note_lte: String
  note_gt: String
  note_gte: String
  note_contains: String
  note_not_contains: String
  note_starts_with: String
  note_not_starts_with: String
  note_ends_with: String
  note_not_ends_with: String
  chargeable: Boolean
  chargeable_not: Boolean
  flightLegId: String
  flightLegId_not: String
  flightLegId_in: [String!]
  flightLegId_not_in: [String!]
  flightLegId_lt: String
  flightLegId_lte: String
  flightLegId_gt: String
  flightLegId_gte: String
  flightLegId_contains: String
  flightLegId_not_contains: String
  flightLegId_starts_with: String
  flightLegId_not_starts_with: String
  flightLegId_ends_with: String
  flightLegId_not_ends_with: String
  standard: Boolean
  standard_not: Boolean
  orderCategory: Int
  orderCategory_not: Int
  orderCategory_in: [Int!]
  orderCategory_not_in: [Int!]
  orderCategory_lt: Int
  orderCategory_lte: Int
  orderCategory_gt: Int
  orderCategory_gte: Int
  orderItem: Int
  orderItem_not: Int
  orderItem_in: [Int!]
  orderItem_not_in: [Int!]
  orderItem_lt: Int
  orderItem_lte: Int
  orderItem_gt: Int
  orderItem_gte: Int
  AND: [ProposalItemScalarWhereInput!]
  OR: [ProposalItemScalarWhereInput!]
  NOT: [ProposalItemScalarWhereInput!]
}

type ProposalItemSubscriptionPayload {
  mutation: MutationType!
  node: ProposalItem
  updatedFields: [String!]
  previousValues: ProposalItemPreviousValues
}

input ProposalItemSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ProposalItemWhereInput
  AND: [ProposalItemSubscriptionWhereInput!]
  OR: [ProposalItemSubscriptionWhereInput!]
  NOT: [ProposalItemSubscriptionWhereInput!]
}

input ProposalItemUpdateDataInput {
  coreId: String
  originalPriceItem: CPriceItemUpdateOneInput
  hidden: Boolean
  quantity: Int
  service: String
  unit: CateringUnitUpdateOneInput
  price: Float
  currency: CurrencyUpdateOneInput
  name: String
  description: String
  note: String
  cateringCategory: CateringCategoryUpdateOneInput
  deliveryAirport: CAirportUpdateOneInput
  deliveryServiceProvider: CServiceProviderUpdateOneInput
  chargeable: Boolean
  ingredients: CateringIngredientUpdateManyInput
  cuisine: CateringCuisineUpdateOneInput
  dietaryPreferences: CateringDietaryPreferenceUpdateManyInput
  flightLegId: String
  standard: Boolean
  orderCategory: Int
  orderItem: Int
}

input ProposalItemUpdateInput {
  coreId: String
  originalPriceItem: CPriceItemUpdateOneInput
  hidden: Boolean
  quantity: Int
  service: String
  unit: CateringUnitUpdateOneInput
  price: Float
  currency: CurrencyUpdateOneInput
  name: String
  description: String
  note: String
  cateringCategory: CateringCategoryUpdateOneInput
  deliveryAirport: CAirportUpdateOneInput
  deliveryServiceProvider: CServiceProviderUpdateOneInput
  chargeable: Boolean
  ingredients: CateringIngredientUpdateManyInput
  cuisine: CateringCuisineUpdateOneInput
  dietaryPreferences: CateringDietaryPreferenceUpdateManyInput
  flightLegId: String
  standard: Boolean
  orderCategory: Int
  orderItem: Int
}

input ProposalItemUpdateManyDataInput {
  coreId: String
  hidden: Boolean
  quantity: Int
  service: String
  price: Float
  name: String
  description: String
  note: String
  chargeable: Boolean
  flightLegId: String
  standard: Boolean
  orderCategory: Int
  orderItem: Int
}

input ProposalItemUpdateManyInput {
  create: [ProposalItemCreateInput!]
  update: [ProposalItemUpdateWithWhereUniqueNestedInput!]
  upsert: [ProposalItemUpsertWithWhereUniqueNestedInput!]
  delete: [ProposalItemWhereUniqueInput!]
  connect: [ProposalItemWhereUniqueInput!]
  set: [ProposalItemWhereUniqueInput!]
  disconnect: [ProposalItemWhereUniqueInput!]
  deleteMany: [ProposalItemScalarWhereInput!]
  updateMany: [ProposalItemUpdateManyWithWhereNestedInput!]
}

input ProposalItemUpdateManyMutationInput {
  coreId: String
  hidden: Boolean
  quantity: Int
  service: String
  price: Float
  name: String
  description: String
  note: String
  chargeable: Boolean
  flightLegId: String
  standard: Boolean
  orderCategory: Int
  orderItem: Int
}

input ProposalItemUpdateManyWithWhereNestedInput {
  where: ProposalItemScalarWhereInput!
  data: ProposalItemUpdateManyDataInput!
}

input ProposalItemUpdateOneInput {
  create: ProposalItemCreateInput
  update: ProposalItemUpdateDataInput
  upsert: ProposalItemUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: ProposalItemWhereUniqueInput
}

input ProposalItemUpdateWithWhereUniqueNestedInput {
  where: ProposalItemWhereUniqueInput!
  data: ProposalItemUpdateDataInput!
}

input ProposalItemUpsertNestedInput {
  update: ProposalItemUpdateDataInput!
  create: ProposalItemCreateInput!
}

input ProposalItemUpsertWithWhereUniqueNestedInput {
  where: ProposalItemWhereUniqueInput!
  update: ProposalItemUpdateDataInput!
  create: ProposalItemCreateInput!
}

input ProposalItemWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  coreId: String
  coreId_not: String
  coreId_in: [String!]
  coreId_not_in: [String!]
  coreId_lt: String
  coreId_lte: String
  coreId_gt: String
  coreId_gte: String
  coreId_contains: String
  coreId_not_contains: String
  coreId_starts_with: String
  coreId_not_starts_with: String
  coreId_ends_with: String
  coreId_not_ends_with: String
  originalPriceItem: CPriceItemWhereInput
  hidden: Boolean
  hidden_not: Boolean
  quantity: Int
  quantity_not: Int
  quantity_in: [Int!]
  quantity_not_in: [Int!]
  quantity_lt: Int
  quantity_lte: Int
  quantity_gt: Int
  quantity_gte: Int
  service: String
  service_not: String
  service_in: [String!]
  service_not_in: [String!]
  service_lt: String
  service_lte: String
  service_gt: String
  service_gte: String
  service_contains: String
  service_not_contains: String
  service_starts_with: String
  service_not_starts_with: String
  service_ends_with: String
  service_not_ends_with: String
  unit: CateringUnitWhereInput
  price: Float
  price_not: Float
  price_in: [Float!]
  price_not_in: [Float!]
  price_lt: Float
  price_lte: Float
  price_gt: Float
  price_gte: Float
  currency: CurrencyWhereInput
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  note: String
  note_not: String
  note_in: [String!]
  note_not_in: [String!]
  note_lt: String
  note_lte: String
  note_gt: String
  note_gte: String
  note_contains: String
  note_not_contains: String
  note_starts_with: String
  note_not_starts_with: String
  note_ends_with: String
  note_not_ends_with: String
  cateringCategory: CateringCategoryWhereInput
  deliveryAirport: CAirportWhereInput
  deliveryServiceProvider: CServiceProviderWhereInput
  chargeable: Boolean
  chargeable_not: Boolean
  ingredients_every: CateringIngredientWhereInput
  ingredients_some: CateringIngredientWhereInput
  ingredients_none: CateringIngredientWhereInput
  cuisine: CateringCuisineWhereInput
  dietaryPreferences_every: CateringDietaryPreferenceWhereInput
  dietaryPreferences_some: CateringDietaryPreferenceWhereInput
  dietaryPreferences_none: CateringDietaryPreferenceWhereInput
  flightLegId: String
  flightLegId_not: String
  flightLegId_in: [String!]
  flightLegId_not_in: [String!]
  flightLegId_lt: String
  flightLegId_lte: String
  flightLegId_gt: String
  flightLegId_gte: String
  flightLegId_contains: String
  flightLegId_not_contains: String
  flightLegId_starts_with: String
  flightLegId_not_starts_with: String
  flightLegId_ends_with: String
  flightLegId_not_ends_with: String
  standard: Boolean
  standard_not: Boolean
  orderCategory: Int
  orderCategory_not: Int
  orderCategory_in: [Int!]
  orderCategory_not_in: [Int!]
  orderCategory_lt: Int
  orderCategory_lte: Int
  orderCategory_gt: Int
  orderCategory_gte: Int
  orderItem: Int
  orderItem_not: Int
  orderItem_in: [Int!]
  orderItem_not_in: [Int!]
  orderItem_lt: Int
  orderItem_lte: Int
  orderItem_gt: Int
  orderItem_gte: Int
  AND: [ProposalItemWhereInput!]
  OR: [ProposalItemWhereInput!]
  NOT: [ProposalItemWhereInput!]
}

input ProposalItemWhereUniqueInput {
  id: ID
  coreId: String
}

enum ProposalOrderByInput {
  id_ASC
  id_DESC
  coreId_ASC
  coreId_DESC
  totalAmount_ASC
  totalAmount_DESC
  _createdAt_ASC
  _createdAt_DESC
  modifiedAt_ASC
  modifiedAt_DESC
  removed_ASC
  removed_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ProposalPreviousValues {
  id: ID!
  coreId: String!
  totalAmount: Float
  _createdAt: DateTime
  modifiedAt: DateTime
  removed: Boolean
}

type ProposalSubscriptionPayload {
  mutation: MutationType!
  node: Proposal
  updatedFields: [String!]
  previousValues: ProposalPreviousValues
}

input ProposalSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ProposalWhereInput
  AND: [ProposalSubscriptionWhereInput!]
  OR: [ProposalSubscriptionWhereInput!]
  NOT: [ProposalSubscriptionWhereInput!]
}

input ProposalUpdateInput {
  coreId: String
  task: CateringTaskUpdateOneWithoutProposalInput
  totalAmount: Float
  currency: CurrencyUpdateOneInput
  proposalItems: ProposalItemUpdateManyInput
  purchaseOrders: CateringPurchaseOrderUpdateManyWithoutProposalInput
  documents: ProposalDocumentUpdateManyInput
  overBudget: OverBudgetUpdateOneInput
  qualityControl: QualityControlUpdateOneWithoutProposalInput
  createdBy: CPersonUpdateOneInput
  _createdAt: DateTime
  modifiedBy: CPersonUpdateOneInput
  modifiedAt: DateTime
  removed: Boolean
}

input ProposalUpdateManyMutationInput {
  coreId: String
  totalAmount: Float
  _createdAt: DateTime
  modifiedAt: DateTime
  removed: Boolean
}

input ProposalUpdateOneWithoutPurchaseOrdersInput {
  create: ProposalCreateWithoutPurchaseOrdersInput
  update: ProposalUpdateWithoutPurchaseOrdersDataInput
  upsert: ProposalUpsertWithoutPurchaseOrdersInput
  delete: Boolean
  disconnect: Boolean
  connect: ProposalWhereUniqueInput
}

input ProposalUpdateOneWithoutQualityControlInput {
  create: ProposalCreateWithoutQualityControlInput
  update: ProposalUpdateWithoutQualityControlDataInput
  upsert: ProposalUpsertWithoutQualityControlInput
  delete: Boolean
  disconnect: Boolean
  connect: ProposalWhereUniqueInput
}

input ProposalUpdateOneWithoutTaskInput {
  create: ProposalCreateWithoutTaskInput
  update: ProposalUpdateWithoutTaskDataInput
  upsert: ProposalUpsertWithoutTaskInput
  delete: Boolean
  disconnect: Boolean
  connect: ProposalWhereUniqueInput
}

input ProposalUpdateWithoutPurchaseOrdersDataInput {
  coreId: String
  task: CateringTaskUpdateOneWithoutProposalInput
  totalAmount: Float
  currency: CurrencyUpdateOneInput
  proposalItems: ProposalItemUpdateManyInput
  documents: ProposalDocumentUpdateManyInput
  overBudget: OverBudgetUpdateOneInput
  qualityControl: QualityControlUpdateOneWithoutProposalInput
  createdBy: CPersonUpdateOneInput
  _createdAt: DateTime
  modifiedBy: CPersonUpdateOneInput
  modifiedAt: DateTime
  removed: Boolean
}

input ProposalUpdateWithoutQualityControlDataInput {
  coreId: String
  task: CateringTaskUpdateOneWithoutProposalInput
  totalAmount: Float
  currency: CurrencyUpdateOneInput
  proposalItems: ProposalItemUpdateManyInput
  purchaseOrders: CateringPurchaseOrderUpdateManyWithoutProposalInput
  documents: ProposalDocumentUpdateManyInput
  overBudget: OverBudgetUpdateOneInput
  createdBy: CPersonUpdateOneInput
  _createdAt: DateTime
  modifiedBy: CPersonUpdateOneInput
  modifiedAt: DateTime
  removed: Boolean
}

input ProposalUpdateWithoutTaskDataInput {
  coreId: String
  totalAmount: Float
  currency: CurrencyUpdateOneInput
  proposalItems: ProposalItemUpdateManyInput
  purchaseOrders: CateringPurchaseOrderUpdateManyWithoutProposalInput
  documents: ProposalDocumentUpdateManyInput
  overBudget: OverBudgetUpdateOneInput
  qualityControl: QualityControlUpdateOneWithoutProposalInput
  createdBy: CPersonUpdateOneInput
  _createdAt: DateTime
  modifiedBy: CPersonUpdateOneInput
  modifiedAt: DateTime
  removed: Boolean
}

input ProposalUpsertWithoutPurchaseOrdersInput {
  update: ProposalUpdateWithoutPurchaseOrdersDataInput!
  create: ProposalCreateWithoutPurchaseOrdersInput!
}

input ProposalUpsertWithoutQualityControlInput {
  update: ProposalUpdateWithoutQualityControlDataInput!
  create: ProposalCreateWithoutQualityControlInput!
}

input ProposalUpsertWithoutTaskInput {
  update: ProposalUpdateWithoutTaskDataInput!
  create: ProposalCreateWithoutTaskInput!
}

input ProposalWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  coreId: String
  coreId_not: String
  coreId_in: [String!]
  coreId_not_in: [String!]
  coreId_lt: String
  coreId_lte: String
  coreId_gt: String
  coreId_gte: String
  coreId_contains: String
  coreId_not_contains: String
  coreId_starts_with: String
  coreId_not_starts_with: String
  coreId_ends_with: String
  coreId_not_ends_with: String
  task: CateringTaskWhereInput
  totalAmount: Float
  totalAmount_not: Float
  totalAmount_in: [Float!]
  totalAmount_not_in: [Float!]
  totalAmount_lt: Float
  totalAmount_lte: Float
  totalAmount_gt: Float
  totalAmount_gte: Float
  currency: CurrencyWhereInput
  proposalItems_every: ProposalItemWhereInput
  proposalItems_some: ProposalItemWhereInput
  proposalItems_none: ProposalItemWhereInput
  purchaseOrders_every: CateringPurchaseOrderWhereInput
  purchaseOrders_some: CateringPurchaseOrderWhereInput
  purchaseOrders_none: CateringPurchaseOrderWhereInput
  documents_every: ProposalDocumentWhereInput
  documents_some: ProposalDocumentWhereInput
  documents_none: ProposalDocumentWhereInput
  overBudget: OverBudgetWhereInput
  qualityControl: QualityControlWhereInput
  createdBy: CPersonWhereInput
  _createdAt: DateTime
  _createdAt_not: DateTime
  _createdAt_in: [DateTime!]
  _createdAt_not_in: [DateTime!]
  _createdAt_lt: DateTime
  _createdAt_lte: DateTime
  _createdAt_gt: DateTime
  _createdAt_gte: DateTime
  modifiedBy: CPersonWhereInput
  modifiedAt: DateTime
  modifiedAt_not: DateTime
  modifiedAt_in: [DateTime!]
  modifiedAt_not_in: [DateTime!]
  modifiedAt_lt: DateTime
  modifiedAt_lte: DateTime
  modifiedAt_gt: DateTime
  modifiedAt_gte: DateTime
  removed: Boolean
  removed_not: Boolean
  AND: [ProposalWhereInput!]
  OR: [ProposalWhereInput!]
  NOT: [ProposalWhereInput!]
}

input ProposalWhereUniqueInput {
  id: ID
  coreId: String
}

type PurchaseOrderDocument {
  id: ID!
  coreId: String!
  documentType: String
  fileLink: String
  metadata: String
  purchaseOrderItems(where: PurchaseOrderItemWhereInput, orderBy: PurchaseOrderItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PurchaseOrderItem!]
  deliveryTime: DateTime
  airportId: String
  aircraftId: String
  cabinHostess: String
  createdBy: CPerson
  _createdAt: DateTime
}

type PurchaseOrderDocumentConnection {
  pageInfo: PageInfo!
  edges: [PurchaseOrderDocumentEdge]!
  aggregate: AggregatePurchaseOrderDocument!
}

input PurchaseOrderDocumentCreateInput {
  coreId: String!
  documentType: String
  fileLink: String
  metadata: String
  purchaseOrderItems: PurchaseOrderItemCreateManyInput
  deliveryTime: DateTime
  airportId: String
  aircraftId: String
  cabinHostess: String
  createdBy: CPersonCreateOneInput
  _createdAt: DateTime
}

input PurchaseOrderDocumentCreateManyInput {
  create: [PurchaseOrderDocumentCreateInput!]
  connect: [PurchaseOrderDocumentWhereUniqueInput!]
}

type PurchaseOrderDocumentEdge {
  node: PurchaseOrderDocument!
  cursor: String!
}

enum PurchaseOrderDocumentOrderByInput {
  id_ASC
  id_DESC
  coreId_ASC
  coreId_DESC
  documentType_ASC
  documentType_DESC
  fileLink_ASC
  fileLink_DESC
  metadata_ASC
  metadata_DESC
  deliveryTime_ASC
  deliveryTime_DESC
  airportId_ASC
  airportId_DESC
  aircraftId_ASC
  aircraftId_DESC
  cabinHostess_ASC
  cabinHostess_DESC
  _createdAt_ASC
  _createdAt_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type PurchaseOrderDocumentPreviousValues {
  id: ID!
  coreId: String!
  documentType: String
  fileLink: String
  metadata: String
  deliveryTime: DateTime
  airportId: String
  aircraftId: String
  cabinHostess: String
  _createdAt: DateTime
}

input PurchaseOrderDocumentScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  coreId: String
  coreId_not: String
  coreId_in: [String!]
  coreId_not_in: [String!]
  coreId_lt: String
  coreId_lte: String
  coreId_gt: String
  coreId_gte: String
  coreId_contains: String
  coreId_not_contains: String
  coreId_starts_with: String
  coreId_not_starts_with: String
  coreId_ends_with: String
  coreId_not_ends_with: String
  documentType: String
  documentType_not: String
  documentType_in: [String!]
  documentType_not_in: [String!]
  documentType_lt: String
  documentType_lte: String
  documentType_gt: String
  documentType_gte: String
  documentType_contains: String
  documentType_not_contains: String
  documentType_starts_with: String
  documentType_not_starts_with: String
  documentType_ends_with: String
  documentType_not_ends_with: String
  fileLink: String
  fileLink_not: String
  fileLink_in: [String!]
  fileLink_not_in: [String!]
  fileLink_lt: String
  fileLink_lte: String
  fileLink_gt: String
  fileLink_gte: String
  fileLink_contains: String
  fileLink_not_contains: String
  fileLink_starts_with: String
  fileLink_not_starts_with: String
  fileLink_ends_with: String
  fileLink_not_ends_with: String
  metadata: String
  metadata_not: String
  metadata_in: [String!]
  metadata_not_in: [String!]
  metadata_lt: String
  metadata_lte: String
  metadata_gt: String
  metadata_gte: String
  metadata_contains: String
  metadata_not_contains: String
  metadata_starts_with: String
  metadata_not_starts_with: String
  metadata_ends_with: String
  metadata_not_ends_with: String
  deliveryTime: DateTime
  deliveryTime_not: DateTime
  deliveryTime_in: [DateTime!]
  deliveryTime_not_in: [DateTime!]
  deliveryTime_lt: DateTime
  deliveryTime_lte: DateTime
  deliveryTime_gt: DateTime
  deliveryTime_gte: DateTime
  airportId: String
  airportId_not: String
  airportId_in: [String!]
  airportId_not_in: [String!]
  airportId_lt: String
  airportId_lte: String
  airportId_gt: String
  airportId_gte: String
  airportId_contains: String
  airportId_not_contains: String
  airportId_starts_with: String
  airportId_not_starts_with: String
  airportId_ends_with: String
  airportId_not_ends_with: String
  aircraftId: String
  aircraftId_not: String
  aircraftId_in: [String!]
  aircraftId_not_in: [String!]
  aircraftId_lt: String
  aircraftId_lte: String
  aircraftId_gt: String
  aircraftId_gte: String
  aircraftId_contains: String
  aircraftId_not_contains: String
  aircraftId_starts_with: String
  aircraftId_not_starts_with: String
  aircraftId_ends_with: String
  aircraftId_not_ends_with: String
  cabinHostess: String
  cabinHostess_not: String
  cabinHostess_in: [String!]
  cabinHostess_not_in: [String!]
  cabinHostess_lt: String
  cabinHostess_lte: String
  cabinHostess_gt: String
  cabinHostess_gte: String
  cabinHostess_contains: String
  cabinHostess_not_contains: String
  cabinHostess_starts_with: String
  cabinHostess_not_starts_with: String
  cabinHostess_ends_with: String
  cabinHostess_not_ends_with: String
  _createdAt: DateTime
  _createdAt_not: DateTime
  _createdAt_in: [DateTime!]
  _createdAt_not_in: [DateTime!]
  _createdAt_lt: DateTime
  _createdAt_lte: DateTime
  _createdAt_gt: DateTime
  _createdAt_gte: DateTime
  AND: [PurchaseOrderDocumentScalarWhereInput!]
  OR: [PurchaseOrderDocumentScalarWhereInput!]
  NOT: [PurchaseOrderDocumentScalarWhereInput!]
}

type PurchaseOrderDocumentSubscriptionPayload {
  mutation: MutationType!
  node: PurchaseOrderDocument
  updatedFields: [String!]
  previousValues: PurchaseOrderDocumentPreviousValues
}

input PurchaseOrderDocumentSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PurchaseOrderDocumentWhereInput
  AND: [PurchaseOrderDocumentSubscriptionWhereInput!]
  OR: [PurchaseOrderDocumentSubscriptionWhereInput!]
  NOT: [PurchaseOrderDocumentSubscriptionWhereInput!]
}

input PurchaseOrderDocumentUpdateDataInput {
  coreId: String
  documentType: String
  fileLink: String
  metadata: String
  purchaseOrderItems: PurchaseOrderItemUpdateManyInput
  deliveryTime: DateTime
  airportId: String
  aircraftId: String
  cabinHostess: String
  createdBy: CPersonUpdateOneInput
  _createdAt: DateTime
}

input PurchaseOrderDocumentUpdateInput {
  coreId: String
  documentType: String
  fileLink: String
  metadata: String
  purchaseOrderItems: PurchaseOrderItemUpdateManyInput
  deliveryTime: DateTime
  airportId: String
  aircraftId: String
  cabinHostess: String
  createdBy: CPersonUpdateOneInput
  _createdAt: DateTime
}

input PurchaseOrderDocumentUpdateManyDataInput {
  coreId: String
  documentType: String
  fileLink: String
  metadata: String
  deliveryTime: DateTime
  airportId: String
  aircraftId: String
  cabinHostess: String
  _createdAt: DateTime
}

input PurchaseOrderDocumentUpdateManyInput {
  create: [PurchaseOrderDocumentCreateInput!]
  update: [PurchaseOrderDocumentUpdateWithWhereUniqueNestedInput!]
  upsert: [PurchaseOrderDocumentUpsertWithWhereUniqueNestedInput!]
  delete: [PurchaseOrderDocumentWhereUniqueInput!]
  connect: [PurchaseOrderDocumentWhereUniqueInput!]
  set: [PurchaseOrderDocumentWhereUniqueInput!]
  disconnect: [PurchaseOrderDocumentWhereUniqueInput!]
  deleteMany: [PurchaseOrderDocumentScalarWhereInput!]
  updateMany: [PurchaseOrderDocumentUpdateManyWithWhereNestedInput!]
}

input PurchaseOrderDocumentUpdateManyMutationInput {
  coreId: String
  documentType: String
  fileLink: String
  metadata: String
  deliveryTime: DateTime
  airportId: String
  aircraftId: String
  cabinHostess: String
  _createdAt: DateTime
}

input PurchaseOrderDocumentUpdateManyWithWhereNestedInput {
  where: PurchaseOrderDocumentScalarWhereInput!
  data: PurchaseOrderDocumentUpdateManyDataInput!
}

input PurchaseOrderDocumentUpdateWithWhereUniqueNestedInput {
  where: PurchaseOrderDocumentWhereUniqueInput!
  data: PurchaseOrderDocumentUpdateDataInput!
}

input PurchaseOrderDocumentUpsertWithWhereUniqueNestedInput {
  where: PurchaseOrderDocumentWhereUniqueInput!
  update: PurchaseOrderDocumentUpdateDataInput!
  create: PurchaseOrderDocumentCreateInput!
}

input PurchaseOrderDocumentWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  coreId: String
  coreId_not: String
  coreId_in: [String!]
  coreId_not_in: [String!]
  coreId_lt: String
  coreId_lte: String
  coreId_gt: String
  coreId_gte: String
  coreId_contains: String
  coreId_not_contains: String
  coreId_starts_with: String
  coreId_not_starts_with: String
  coreId_ends_with: String
  coreId_not_ends_with: String
  documentType: String
  documentType_not: String
  documentType_in: [String!]
  documentType_not_in: [String!]
  documentType_lt: String
  documentType_lte: String
  documentType_gt: String
  documentType_gte: String
  documentType_contains: String
  documentType_not_contains: String
  documentType_starts_with: String
  documentType_not_starts_with: String
  documentType_ends_with: String
  documentType_not_ends_with: String
  fileLink: String
  fileLink_not: String
  fileLink_in: [String!]
  fileLink_not_in: [String!]
  fileLink_lt: String
  fileLink_lte: String
  fileLink_gt: String
  fileLink_gte: String
  fileLink_contains: String
  fileLink_not_contains: String
  fileLink_starts_with: String
  fileLink_not_starts_with: String
  fileLink_ends_with: String
  fileLink_not_ends_with: String
  metadata: String
  metadata_not: String
  metadata_in: [String!]
  metadata_not_in: [String!]
  metadata_lt: String
  metadata_lte: String
  metadata_gt: String
  metadata_gte: String
  metadata_contains: String
  metadata_not_contains: String
  metadata_starts_with: String
  metadata_not_starts_with: String
  metadata_ends_with: String
  metadata_not_ends_with: String
  purchaseOrderItems_every: PurchaseOrderItemWhereInput
  purchaseOrderItems_some: PurchaseOrderItemWhereInput
  purchaseOrderItems_none: PurchaseOrderItemWhereInput
  deliveryTime: DateTime
  deliveryTime_not: DateTime
  deliveryTime_in: [DateTime!]
  deliveryTime_not_in: [DateTime!]
  deliveryTime_lt: DateTime
  deliveryTime_lte: DateTime
  deliveryTime_gt: DateTime
  deliveryTime_gte: DateTime
  airportId: String
  airportId_not: String
  airportId_in: [String!]
  airportId_not_in: [String!]
  airportId_lt: String
  airportId_lte: String
  airportId_gt: String
  airportId_gte: String
  airportId_contains: String
  airportId_not_contains: String
  airportId_starts_with: String
  airportId_not_starts_with: String
  airportId_ends_with: String
  airportId_not_ends_with: String
  aircraftId: String
  aircraftId_not: String
  aircraftId_in: [String!]
  aircraftId_not_in: [String!]
  aircraftId_lt: String
  aircraftId_lte: String
  aircraftId_gt: String
  aircraftId_gte: String
  aircraftId_contains: String
  aircraftId_not_contains: String
  aircraftId_starts_with: String
  aircraftId_not_starts_with: String
  aircraftId_ends_with: String
  aircraftId_not_ends_with: String
  cabinHostess: String
  cabinHostess_not: String
  cabinHostess_in: [String!]
  cabinHostess_not_in: [String!]
  cabinHostess_lt: String
  cabinHostess_lte: String
  cabinHostess_gt: String
  cabinHostess_gte: String
  cabinHostess_contains: String
  cabinHostess_not_contains: String
  cabinHostess_starts_with: String
  cabinHostess_not_starts_with: String
  cabinHostess_ends_with: String
  cabinHostess_not_ends_with: String
  createdBy: CPersonWhereInput
  _createdAt: DateTime
  _createdAt_not: DateTime
  _createdAt_in: [DateTime!]
  _createdAt_not_in: [DateTime!]
  _createdAt_lt: DateTime
  _createdAt_lte: DateTime
  _createdAt_gt: DateTime
  _createdAt_gte: DateTime
  AND: [PurchaseOrderDocumentWhereInput!]
  OR: [PurchaseOrderDocumentWhereInput!]
  NOT: [PurchaseOrderDocumentWhereInput!]
}

input PurchaseOrderDocumentWhereUniqueInput {
  id: ID
  coreId: String
}

type PurchaseOrderItem {
  id: ID!
  coreId: String!
  originalPriceItem: CPriceItem
  originalProposalItem: ProposalItem
  price: Float
  name: String
  quantity: Int
  cateringCategory: CateringCategory
  description: String
  note: String
}

type PurchaseOrderItemConnection {
  pageInfo: PageInfo!
  edges: [PurchaseOrderItemEdge]!
  aggregate: AggregatePurchaseOrderItem!
}

input PurchaseOrderItemCreateInput {
  coreId: String!
  originalPriceItem: CPriceItemCreateOneInput
  originalProposalItem: ProposalItemCreateOneInput
  price: Float
  name: String
  quantity: Int
  cateringCategory: CateringCategoryCreateOneInput
  description: String
  note: String
}

input PurchaseOrderItemCreateManyInput {
  create: [PurchaseOrderItemCreateInput!]
  connect: [PurchaseOrderItemWhereUniqueInput!]
}

type PurchaseOrderItemEdge {
  node: PurchaseOrderItem!
  cursor: String!
}

enum PurchaseOrderItemOrderByInput {
  id_ASC
  id_DESC
  coreId_ASC
  coreId_DESC
  price_ASC
  price_DESC
  name_ASC
  name_DESC
  quantity_ASC
  quantity_DESC
  description_ASC
  description_DESC
  note_ASC
  note_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type PurchaseOrderItemPreviousValues {
  id: ID!
  coreId: String!
  price: Float
  name: String
  quantity: Int
  description: String
  note: String
}

input PurchaseOrderItemScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  coreId: String
  coreId_not: String
  coreId_in: [String!]
  coreId_not_in: [String!]
  coreId_lt: String
  coreId_lte: String
  coreId_gt: String
  coreId_gte: String
  coreId_contains: String
  coreId_not_contains: String
  coreId_starts_with: String
  coreId_not_starts_with: String
  coreId_ends_with: String
  coreId_not_ends_with: String
  price: Float
  price_not: Float
  price_in: [Float!]
  price_not_in: [Float!]
  price_lt: Float
  price_lte: Float
  price_gt: Float
  price_gte: Float
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  quantity: Int
  quantity_not: Int
  quantity_in: [Int!]
  quantity_not_in: [Int!]
  quantity_lt: Int
  quantity_lte: Int
  quantity_gt: Int
  quantity_gte: Int
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  note: String
  note_not: String
  note_in: [String!]
  note_not_in: [String!]
  note_lt: String
  note_lte: String
  note_gt: String
  note_gte: String
  note_contains: String
  note_not_contains: String
  note_starts_with: String
  note_not_starts_with: String
  note_ends_with: String
  note_not_ends_with: String
  AND: [PurchaseOrderItemScalarWhereInput!]
  OR: [PurchaseOrderItemScalarWhereInput!]
  NOT: [PurchaseOrderItemScalarWhereInput!]
}

type PurchaseOrderItemSubscriptionPayload {
  mutation: MutationType!
  node: PurchaseOrderItem
  updatedFields: [String!]
  previousValues: PurchaseOrderItemPreviousValues
}

input PurchaseOrderItemSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PurchaseOrderItemWhereInput
  AND: [PurchaseOrderItemSubscriptionWhereInput!]
  OR: [PurchaseOrderItemSubscriptionWhereInput!]
  NOT: [PurchaseOrderItemSubscriptionWhereInput!]
}

input PurchaseOrderItemUpdateDataInput {
  coreId: String
  originalPriceItem: CPriceItemUpdateOneInput
  originalProposalItem: ProposalItemUpdateOneInput
  price: Float
  name: String
  quantity: Int
  cateringCategory: CateringCategoryUpdateOneInput
  description: String
  note: String
}

input PurchaseOrderItemUpdateInput {
  coreId: String
  originalPriceItem: CPriceItemUpdateOneInput
  originalProposalItem: ProposalItemUpdateOneInput
  price: Float
  name: String
  quantity: Int
  cateringCategory: CateringCategoryUpdateOneInput
  description: String
  note: String
}

input PurchaseOrderItemUpdateManyDataInput {
  coreId: String
  price: Float
  name: String
  quantity: Int
  description: String
  note: String
}

input PurchaseOrderItemUpdateManyInput {
  create: [PurchaseOrderItemCreateInput!]
  update: [PurchaseOrderItemUpdateWithWhereUniqueNestedInput!]
  upsert: [PurchaseOrderItemUpsertWithWhereUniqueNestedInput!]
  delete: [PurchaseOrderItemWhereUniqueInput!]
  connect: [PurchaseOrderItemWhereUniqueInput!]
  set: [PurchaseOrderItemWhereUniqueInput!]
  disconnect: [PurchaseOrderItemWhereUniqueInput!]
  deleteMany: [PurchaseOrderItemScalarWhereInput!]
  updateMany: [PurchaseOrderItemUpdateManyWithWhereNestedInput!]
}

input PurchaseOrderItemUpdateManyMutationInput {
  coreId: String
  price: Float
  name: String
  quantity: Int
  description: String
  note: String
}

input PurchaseOrderItemUpdateManyWithWhereNestedInput {
  where: PurchaseOrderItemScalarWhereInput!
  data: PurchaseOrderItemUpdateManyDataInput!
}

input PurchaseOrderItemUpdateWithWhereUniqueNestedInput {
  where: PurchaseOrderItemWhereUniqueInput!
  data: PurchaseOrderItemUpdateDataInput!
}

input PurchaseOrderItemUpsertWithWhereUniqueNestedInput {
  where: PurchaseOrderItemWhereUniqueInput!
  update: PurchaseOrderItemUpdateDataInput!
  create: PurchaseOrderItemCreateInput!
}

input PurchaseOrderItemWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  coreId: String
  coreId_not: String
  coreId_in: [String!]
  coreId_not_in: [String!]
  coreId_lt: String
  coreId_lte: String
  coreId_gt: String
  coreId_gte: String
  coreId_contains: String
  coreId_not_contains: String
  coreId_starts_with: String
  coreId_not_starts_with: String
  coreId_ends_with: String
  coreId_not_ends_with: String
  originalPriceItem: CPriceItemWhereInput
  originalProposalItem: ProposalItemWhereInput
  price: Float
  price_not: Float
  price_in: [Float!]
  price_not_in: [Float!]
  price_lt: Float
  price_lte: Float
  price_gt: Float
  price_gte: Float
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  quantity: Int
  quantity_not: Int
  quantity_in: [Int!]
  quantity_not_in: [Int!]
  quantity_lt: Int
  quantity_lte: Int
  quantity_gt: Int
  quantity_gte: Int
  cateringCategory: CateringCategoryWhereInput
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  note: String
  note_not: String
  note_in: [String!]
  note_not_in: [String!]
  note_lt: String
  note_lte: String
  note_gt: String
  note_gte: String
  note_contains: String
  note_not_contains: String
  note_starts_with: String
  note_not_starts_with: String
  note_ends_with: String
  note_not_ends_with: String
  AND: [PurchaseOrderItemWhereInput!]
  OR: [PurchaseOrderItemWhereInput!]
  NOT: [PurchaseOrderItemWhereInput!]
}

input PurchaseOrderItemWhereUniqueInput {
  id: ID
  coreId: String
}

type QualityControl {
  id: ID!
  coreId: String!
  proposal: Proposal
  isReviewed: Boolean
  reviewedBy: CPerson
  notes(where: QualityNoteWhereInput, orderBy: QualityNoteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [QualityNote!]
  modifiedBy: CPerson
  modifiedAt: DateTime
  createdBy: CPerson
  _createdAt: DateTime
  removed: Boolean
}

type QualityControlConnection {
  pageInfo: PageInfo!
  edges: [QualityControlEdge]!
  aggregate: AggregateQualityControl!
}

input QualityControlCreateInput {
  coreId: String!
  proposal: ProposalCreateOneWithoutQualityControlInput
  isReviewed: Boolean
  reviewedBy: CPersonCreateOneInput
  notes: QualityNoteCreateManyWithoutQualityControlInput
  modifiedBy: CPersonCreateOneInput
  modifiedAt: DateTime
  createdBy: CPersonCreateOneInput
  _createdAt: DateTime
  removed: Boolean
}

input QualityControlCreateOneWithoutNotesInput {
  create: QualityControlCreateWithoutNotesInput
  connect: QualityControlWhereUniqueInput
}

input QualityControlCreateOneWithoutProposalInput {
  create: QualityControlCreateWithoutProposalInput
  connect: QualityControlWhereUniqueInput
}

input QualityControlCreateWithoutNotesInput {
  coreId: String!
  proposal: ProposalCreateOneWithoutQualityControlInput
  isReviewed: Boolean
  reviewedBy: CPersonCreateOneInput
  modifiedBy: CPersonCreateOneInput
  modifiedAt: DateTime
  createdBy: CPersonCreateOneInput
  _createdAt: DateTime
  removed: Boolean
}

input QualityControlCreateWithoutProposalInput {
  coreId: String!
  isReviewed: Boolean
  reviewedBy: CPersonCreateOneInput
  notes: QualityNoteCreateManyWithoutQualityControlInput
  modifiedBy: CPersonCreateOneInput
  modifiedAt: DateTime
  createdBy: CPersonCreateOneInput
  _createdAt: DateTime
  removed: Boolean
}

type QualityControlEdge {
  node: QualityControl!
  cursor: String!
}

enum QualityControlOrderByInput {
  id_ASC
  id_DESC
  coreId_ASC
  coreId_DESC
  isReviewed_ASC
  isReviewed_DESC
  modifiedAt_ASC
  modifiedAt_DESC
  _createdAt_ASC
  _createdAt_DESC
  removed_ASC
  removed_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type QualityControlPreviousValues {
  id: ID!
  coreId: String!
  isReviewed: Boolean
  modifiedAt: DateTime
  _createdAt: DateTime
  removed: Boolean
}

type QualityControlSubscriptionPayload {
  mutation: MutationType!
  node: QualityControl
  updatedFields: [String!]
  previousValues: QualityControlPreviousValues
}

input QualityControlSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: QualityControlWhereInput
  AND: [QualityControlSubscriptionWhereInput!]
  OR: [QualityControlSubscriptionWhereInput!]
  NOT: [QualityControlSubscriptionWhereInput!]
}

input QualityControlUpdateInput {
  coreId: String
  proposal: ProposalUpdateOneWithoutQualityControlInput
  isReviewed: Boolean
  reviewedBy: CPersonUpdateOneInput
  notes: QualityNoteUpdateManyWithoutQualityControlInput
  modifiedBy: CPersonUpdateOneInput
  modifiedAt: DateTime
  createdBy: CPersonUpdateOneInput
  _createdAt: DateTime
  removed: Boolean
}

input QualityControlUpdateManyMutationInput {
  coreId: String
  isReviewed: Boolean
  modifiedAt: DateTime
  _createdAt: DateTime
  removed: Boolean
}

input QualityControlUpdateOneWithoutNotesInput {
  create: QualityControlCreateWithoutNotesInput
  update: QualityControlUpdateWithoutNotesDataInput
  upsert: QualityControlUpsertWithoutNotesInput
  delete: Boolean
  disconnect: Boolean
  connect: QualityControlWhereUniqueInput
}

input QualityControlUpdateOneWithoutProposalInput {
  create: QualityControlCreateWithoutProposalInput
  update: QualityControlUpdateWithoutProposalDataInput
  upsert: QualityControlUpsertWithoutProposalInput
  delete: Boolean
  disconnect: Boolean
  connect: QualityControlWhereUniqueInput
}

input QualityControlUpdateWithoutNotesDataInput {
  coreId: String
  proposal: ProposalUpdateOneWithoutQualityControlInput
  isReviewed: Boolean
  reviewedBy: CPersonUpdateOneInput
  modifiedBy: CPersonUpdateOneInput
  modifiedAt: DateTime
  createdBy: CPersonUpdateOneInput
  _createdAt: DateTime
  removed: Boolean
}

input QualityControlUpdateWithoutProposalDataInput {
  coreId: String
  isReviewed: Boolean
  reviewedBy: CPersonUpdateOneInput
  notes: QualityNoteUpdateManyWithoutQualityControlInput
  modifiedBy: CPersonUpdateOneInput
  modifiedAt: DateTime
  createdBy: CPersonUpdateOneInput
  _createdAt: DateTime
  removed: Boolean
}

input QualityControlUpsertWithoutNotesInput {
  update: QualityControlUpdateWithoutNotesDataInput!
  create: QualityControlCreateWithoutNotesInput!
}

input QualityControlUpsertWithoutProposalInput {
  update: QualityControlUpdateWithoutProposalDataInput!
  create: QualityControlCreateWithoutProposalInput!
}

input QualityControlWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  coreId: String
  coreId_not: String
  coreId_in: [String!]
  coreId_not_in: [String!]
  coreId_lt: String
  coreId_lte: String
  coreId_gt: String
  coreId_gte: String
  coreId_contains: String
  coreId_not_contains: String
  coreId_starts_with: String
  coreId_not_starts_with: String
  coreId_ends_with: String
  coreId_not_ends_with: String
  proposal: ProposalWhereInput
  isReviewed: Boolean
  isReviewed_not: Boolean
  reviewedBy: CPersonWhereInput
  notes_every: QualityNoteWhereInput
  notes_some: QualityNoteWhereInput
  notes_none: QualityNoteWhereInput
  modifiedBy: CPersonWhereInput
  modifiedAt: DateTime
  modifiedAt_not: DateTime
  modifiedAt_in: [DateTime!]
  modifiedAt_not_in: [DateTime!]
  modifiedAt_lt: DateTime
  modifiedAt_lte: DateTime
  modifiedAt_gt: DateTime
  modifiedAt_gte: DateTime
  createdBy: CPersonWhereInput
  _createdAt: DateTime
  _createdAt_not: DateTime
  _createdAt_in: [DateTime!]
  _createdAt_not_in: [DateTime!]
  _createdAt_lt: DateTime
  _createdAt_lte: DateTime
  _createdAt_gt: DateTime
  _createdAt_gte: DateTime
  removed: Boolean
  removed_not: Boolean
  AND: [QualityControlWhereInput!]
  OR: [QualityControlWhereInput!]
  NOT: [QualityControlWhereInput!]
}

input QualityControlWhereUniqueInput {
  id: ID
  coreId: String
}

type QualityNote {
  id: ID!
  coreId: String!
  note: String
  qualityControl: QualityControl
  createdBy: CPerson
  _createdAt: DateTime
}

type QualityNoteConnection {
  pageInfo: PageInfo!
  edges: [QualityNoteEdge]!
  aggregate: AggregateQualityNote!
}

input QualityNoteCreateInput {
  coreId: String!
  note: String
  qualityControl: QualityControlCreateOneWithoutNotesInput
  createdBy: CPersonCreateOneInput
  _createdAt: DateTime
}

input QualityNoteCreateManyWithoutQualityControlInput {
  create: [QualityNoteCreateWithoutQualityControlInput!]
  connect: [QualityNoteWhereUniqueInput!]
}

input QualityNoteCreateWithoutQualityControlInput {
  coreId: String!
  note: String
  createdBy: CPersonCreateOneInput
  _createdAt: DateTime
}

type QualityNoteEdge {
  node: QualityNote!
  cursor: String!
}

enum QualityNoteOrderByInput {
  id_ASC
  id_DESC
  coreId_ASC
  coreId_DESC
  note_ASC
  note_DESC
  _createdAt_ASC
  _createdAt_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type QualityNotePreviousValues {
  id: ID!
  coreId: String!
  note: String
  _createdAt: DateTime
}

input QualityNoteScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  coreId: String
  coreId_not: String
  coreId_in: [String!]
  coreId_not_in: [String!]
  coreId_lt: String
  coreId_lte: String
  coreId_gt: String
  coreId_gte: String
  coreId_contains: String
  coreId_not_contains: String
  coreId_starts_with: String
  coreId_not_starts_with: String
  coreId_ends_with: String
  coreId_not_ends_with: String
  note: String
  note_not: String
  note_in: [String!]
  note_not_in: [String!]
  note_lt: String
  note_lte: String
  note_gt: String
  note_gte: String
  note_contains: String
  note_not_contains: String
  note_starts_with: String
  note_not_starts_with: String
  note_ends_with: String
  note_not_ends_with: String
  _createdAt: DateTime
  _createdAt_not: DateTime
  _createdAt_in: [DateTime!]
  _createdAt_not_in: [DateTime!]
  _createdAt_lt: DateTime
  _createdAt_lte: DateTime
  _createdAt_gt: DateTime
  _createdAt_gte: DateTime
  AND: [QualityNoteScalarWhereInput!]
  OR: [QualityNoteScalarWhereInput!]
  NOT: [QualityNoteScalarWhereInput!]
}

type QualityNoteSubscriptionPayload {
  mutation: MutationType!
  node: QualityNote
  updatedFields: [String!]
  previousValues: QualityNotePreviousValues
}

input QualityNoteSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: QualityNoteWhereInput
  AND: [QualityNoteSubscriptionWhereInput!]
  OR: [QualityNoteSubscriptionWhereInput!]
  NOT: [QualityNoteSubscriptionWhereInput!]
}

input QualityNoteUpdateInput {
  coreId: String
  note: String
  qualityControl: QualityControlUpdateOneWithoutNotesInput
  createdBy: CPersonUpdateOneInput
  _createdAt: DateTime
}

input QualityNoteUpdateManyDataInput {
  coreId: String
  note: String
  _createdAt: DateTime
}

input QualityNoteUpdateManyMutationInput {
  coreId: String
  note: String
  _createdAt: DateTime
}

input QualityNoteUpdateManyWithoutQualityControlInput {
  create: [QualityNoteCreateWithoutQualityControlInput!]
  delete: [QualityNoteWhereUniqueInput!]
  connect: [QualityNoteWhereUniqueInput!]
  set: [QualityNoteWhereUniqueInput!]
  disconnect: [QualityNoteWhereUniqueInput!]
  update: [QualityNoteUpdateWithWhereUniqueWithoutQualityControlInput!]
  upsert: [QualityNoteUpsertWithWhereUniqueWithoutQualityControlInput!]
  deleteMany: [QualityNoteScalarWhereInput!]
  updateMany: [QualityNoteUpdateManyWithWhereNestedInput!]
}

input QualityNoteUpdateManyWithWhereNestedInput {
  where: QualityNoteScalarWhereInput!
  data: QualityNoteUpdateManyDataInput!
}

input QualityNoteUpdateWithoutQualityControlDataInput {
  coreId: String
  note: String
  createdBy: CPersonUpdateOneInput
  _createdAt: DateTime
}

input QualityNoteUpdateWithWhereUniqueWithoutQualityControlInput {
  where: QualityNoteWhereUniqueInput!
  data: QualityNoteUpdateWithoutQualityControlDataInput!
}

input QualityNoteUpsertWithWhereUniqueWithoutQualityControlInput {
  where: QualityNoteWhereUniqueInput!
  update: QualityNoteUpdateWithoutQualityControlDataInput!
  create: QualityNoteCreateWithoutQualityControlInput!
}

input QualityNoteWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  coreId: String
  coreId_not: String
  coreId_in: [String!]
  coreId_not_in: [String!]
  coreId_lt: String
  coreId_lte: String
  coreId_gt: String
  coreId_gte: String
  coreId_contains: String
  coreId_not_contains: String
  coreId_starts_with: String
  coreId_not_starts_with: String
  coreId_ends_with: String
  coreId_not_ends_with: String
  note: String
  note_not: String
  note_in: [String!]
  note_not_in: [String!]
  note_lt: String
  note_lte: String
  note_gt: String
  note_gte: String
  note_contains: String
  note_not_contains: String
  note_starts_with: String
  note_not_starts_with: String
  note_ends_with: String
  note_not_ends_with: String
  qualityControl: QualityControlWhereInput
  createdBy: CPersonWhereInput
  _createdAt: DateTime
  _createdAt_not: DateTime
  _createdAt_in: [DateTime!]
  _createdAt_not_in: [DateTime!]
  _createdAt_lt: DateTime
  _createdAt_lte: DateTime
  _createdAt_gt: DateTime
  _createdAt_gte: DateTime
  AND: [QualityNoteWhereInput!]
  OR: [QualityNoteWhereInput!]
  NOT: [QualityNoteWhereInput!]
}

input QualityNoteWhereUniqueInput {
  id: ID
  coreId: String
}

type Query {
  cAccount(where: CAccountWhereUniqueInput!): CAccount
  cAccounts(where: CAccountWhereInput, orderBy: CAccountOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CAccount]!
  cAccountsConnection(where: CAccountWhereInput, orderBy: CAccountOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CAccountConnection!
  cAircraft(where: CAircraftWhereUniqueInput!): CAircraft
  cAircrafts(where: CAircraftWhereInput, orderBy: CAircraftOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CAircraft]!
  cAircraftsConnection(where: CAircraftWhereInput, orderBy: CAircraftOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CAircraftConnection!
  cAircraftType(where: CAircraftTypeWhereUniqueInput!): CAircraftType
  cAircraftTypes(where: CAircraftTypeWhereInput, orderBy: CAircraftTypeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CAircraftType]!
  cAircraftTypesConnection(where: CAircraftTypeWhereInput, orderBy: CAircraftTypeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CAircraftTypeConnection!
  cAirport(where: CAirportWhereUniqueInput!): CAirport
  cAirports(where: CAirportWhereInput, orderBy: CAirportOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CAirport]!
  cAirportsConnection(where: CAirportWhereInput, orderBy: CAirportOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CAirportConnection!
  cAlert(where: CAlertWhereUniqueInput!): CAlert
  cAlerts(where: CAlertWhereInput, orderBy: CAlertOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CAlert]!
  cAlertsConnection(where: CAlertWhereInput, orderBy: CAlertOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CAlertConnection!
  cCompany(where: CCompanyWhereUniqueInput!): CCompany
  cCompanies(where: CCompanyWhereInput, orderBy: CCompanyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CCompany]!
  cCompaniesConnection(where: CCompanyWhereInput, orderBy: CCompanyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CCompanyConnection!
  cContract(where: CContractWhereUniqueInput!): CContract
  cContracts(where: CContractWhereInput, orderBy: CContractOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CContract]!
  cContractsConnection(where: CContractWhereInput, orderBy: CContractOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CContractConnection!
  cCrew(where: CCrewWhereUniqueInput!): CCrew
  cCrews(where: CCrewWhereInput, orderBy: CCrewOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CCrew]!
  cCrewsConnection(where: CCrewWhereInput, orderBy: CCrewOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CCrewConnection!
  cCrewRole(where: CCrewRoleWhereUniqueInput!): CCrewRole
  cCrewRoles(where: CCrewRoleWhereInput, orderBy: CCrewRoleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CCrewRole]!
  cCrewRolesConnection(where: CCrewRoleWhereInput, orderBy: CCrewRoleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CCrewRoleConnection!
  cFboServiceProvider(where: CFboServiceProviderWhereUniqueInput!): CFboServiceProvider
  cFboServiceProviders(where: CFboServiceProviderWhereInput, orderBy: CFboServiceProviderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CFboServiceProvider]!
  cFboServiceProvidersConnection(where: CFboServiceProviderWhereInput, orderBy: CFboServiceProviderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CFboServiceProviderConnection!
  cFlightLeg(where: CFlightLegWhereUniqueInput!): CFlightLeg
  cFlightLegs(where: CFlightLegWhereInput, orderBy: CFlightLegOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CFlightLeg]!
  cFlightLegsConnection(where: CFlightLegWhereInput, orderBy: CFlightLegOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CFlightLegConnection!
  cFxRate(where: CFxRateWhereUniqueInput!): CFxRate
  cFxRates(where: CFxRateWhereInput, orderBy: CFxRateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CFxRate]!
  cFxRatesConnection(where: CFxRateWhereInput, orderBy: CFxRateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CFxRateConnection!
  cPerson(where: CPersonWhereUniqueInput!): CPerson
  cPersons(where: CPersonWhereInput, orderBy: CPersonOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CPerson]!
  cPersonsConnection(where: CPersonWhereInput, orderBy: CPersonOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CPersonConnection!
  cPlace(where: CPlaceWhereUniqueInput!): CPlace
  cPlaces(where: CPlaceWhereInput, orderBy: CPlaceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CPlace]!
  cPlacesConnection(where: CPlaceWhereInput, orderBy: CPlaceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CPlaceConnection!
  cPriceItem(where: CPriceItemWhereUniqueInput!): CPriceItem
  cPriceItems(where: CPriceItemWhereInput, orderBy: CPriceItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CPriceItem]!
  cPriceItemsConnection(where: CPriceItemWhereInput, orderBy: CPriceItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CPriceItemConnection!
  cPriceList(where: CPriceListWhereUniqueInput!): CPriceList
  cPriceLists(where: CPriceListWhereInput, orderBy: CPriceListOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CPriceList]!
  cPriceListsConnection(where: CPriceListWhereInput, orderBy: CPriceListOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CPriceListConnection!
  cServiceProvider(where: CServiceProviderWhereUniqueInput!): CServiceProvider
  cServiceProviders(where: CServiceProviderWhereInput, orderBy: CServiceProviderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CServiceProvider]!
  cServiceProvidersConnection(where: CServiceProviderWhereInput, orderBy: CServiceProviderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CServiceProviderConnection!
  cServiceType(where: CServiceTypeWhereUniqueInput!): CServiceType
  cServiceTypes(where: CServiceTypeWhereInput, orderBy: CServiceTypeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CServiceType]!
  cServiceTypesConnection(where: CServiceTypeWhereInput, orderBy: CServiceTypeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CServiceTypeConnection!
  cTimezone(where: CTimezoneWhereUniqueInput!): CTimezone
  cTimezones(where: CTimezoneWhereInput, orderBy: CTimezoneOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CTimezone]!
  cTimezonesConnection(where: CTimezoneWhereInput, orderBy: CTimezoneOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CTimezoneConnection!
  cateringCategory(where: CateringCategoryWhereUniqueInput!): CateringCategory
  cateringCategories(where: CateringCategoryWhereInput, orderBy: CateringCategoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CateringCategory]!
  cateringCategoriesConnection(where: CateringCategoryWhereInput, orderBy: CateringCategoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CateringCategoryConnection!
  cateringCompanyEmail(where: CateringCompanyEmailWhereUniqueInput!): CateringCompanyEmail
  cateringCompanyEmails(where: CateringCompanyEmailWhereInput, orderBy: CateringCompanyEmailOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CateringCompanyEmail]!
  cateringCompanyEmailsConnection(where: CateringCompanyEmailWhereInput, orderBy: CateringCompanyEmailOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CateringCompanyEmailConnection!
  cateringCompanyEmailType(where: CateringCompanyEmailTypeWhereUniqueInput!): CateringCompanyEmailType
  cateringCompanyEmailTypes(where: CateringCompanyEmailTypeWhereInput, orderBy: CateringCompanyEmailTypeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CateringCompanyEmailType]!
  cateringCompanyEmailTypesConnection(where: CateringCompanyEmailTypeWhereInput, orderBy: CateringCompanyEmailTypeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CateringCompanyEmailTypeConnection!
  cateringCompanyPhoneNumber(where: CateringCompanyPhoneNumberWhereUniqueInput!): CateringCompanyPhoneNumber
  cateringCompanyPhoneNumbers(where: CateringCompanyPhoneNumberWhereInput, orderBy: CateringCompanyPhoneNumberOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CateringCompanyPhoneNumber]!
  cateringCompanyPhoneNumbersConnection(where: CateringCompanyPhoneNumberWhereInput, orderBy: CateringCompanyPhoneNumberOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CateringCompanyPhoneNumberConnection!
  cateringCompanyPhoneNumberType(where: CateringCompanyPhoneNumberTypeWhereUniqueInput!): CateringCompanyPhoneNumberType
  cateringCompanyPhoneNumberTypes(where: CateringCompanyPhoneNumberTypeWhereInput, orderBy: CateringCompanyPhoneNumberTypeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CateringCompanyPhoneNumberType]!
  cateringCompanyPhoneNumberTypesConnection(where: CateringCompanyPhoneNumberTypeWhereInput, orderBy: CateringCompanyPhoneNumberTypeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CateringCompanyPhoneNumberTypeConnection!
  cateringCosts(where: CateringCostsWhereUniqueInput!): CateringCosts
  cateringCostses(where: CateringCostsWhereInput, orderBy: CateringCostsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CateringCosts]!
  cateringCostsesConnection(where: CateringCostsWhereInput, orderBy: CateringCostsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CateringCostsConnection!
  cateringCountry(where: CateringCountryWhereUniqueInput!): CateringCountry
  cateringCountries(where: CateringCountryWhereInput, orderBy: CateringCountryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CateringCountry]!
  cateringCountriesConnection(where: CateringCountryWhereInput, orderBy: CateringCountryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CateringCountryConnection!
  cateringCuisine(where: CateringCuisineWhereUniqueInput!): CateringCuisine
  cateringCuisines(where: CateringCuisineWhereInput, orderBy: CateringCuisineOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CateringCuisine]!
  cateringCuisinesConnection(where: CateringCuisineWhereInput, orderBy: CateringCuisineOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CateringCuisineConnection!
  cateringDietaryPreference(where: CateringDietaryPreferenceWhereUniqueInput!): CateringDietaryPreference
  cateringDietaryPreferences(where: CateringDietaryPreferenceWhereInput, orderBy: CateringDietaryPreferenceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CateringDietaryPreference]!
  cateringDietaryPreferencesConnection(where: CateringDietaryPreferenceWhereInput, orderBy: CateringDietaryPreferenceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CateringDietaryPreferenceConnection!
  cateringIngredient(where: CateringIngredientWhereUniqueInput!): CateringIngredient
  cateringIngredients(where: CateringIngredientWhereInput, orderBy: CateringIngredientOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CateringIngredient]!
  cateringIngredientsConnection(where: CateringIngredientWhereInput, orderBy: CateringIngredientOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CateringIngredientConnection!
  cateringNotification(where: CateringNotificationWhereUniqueInput!): CateringNotification
  cateringNotifications(where: CateringNotificationWhereInput, orderBy: CateringNotificationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CateringNotification]!
  cateringNotificationsConnection(where: CateringNotificationWhereInput, orderBy: CateringNotificationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CateringNotificationConnection!
  cateringPersonEmail(where: CateringPersonEmailWhereUniqueInput!): CateringPersonEmail
  cateringPersonEmails(where: CateringPersonEmailWhereInput, orderBy: CateringPersonEmailOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CateringPersonEmail]!
  cateringPersonEmailsConnection(where: CateringPersonEmailWhereInput, orderBy: CateringPersonEmailOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CateringPersonEmailConnection!
  cateringPersonEmailType(where: CateringPersonEmailTypeWhereUniqueInput!): CateringPersonEmailType
  cateringPersonEmailTypes(where: CateringPersonEmailTypeWhereInput, orderBy: CateringPersonEmailTypeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CateringPersonEmailType]!
  cateringPersonEmailTypesConnection(where: CateringPersonEmailTypeWhereInput, orderBy: CateringPersonEmailTypeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CateringPersonEmailTypeConnection!
  cateringPersonNationality(where: CateringPersonNationalityWhereUniqueInput!): CateringPersonNationality
  cateringPersonNationalities(where: CateringPersonNationalityWhereInput, orderBy: CateringPersonNationalityOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CateringPersonNationality]!
  cateringPersonNationalitiesConnection(where: CateringPersonNationalityWhereInput, orderBy: CateringPersonNationalityOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CateringPersonNationalityConnection!
  cateringPersonPhoneNumber(where: CateringPersonPhoneNumberWhereUniqueInput!): CateringPersonPhoneNumber
  cateringPersonPhoneNumbers(where: CateringPersonPhoneNumberWhereInput, orderBy: CateringPersonPhoneNumberOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CateringPersonPhoneNumber]!
  cateringPersonPhoneNumbersConnection(where: CateringPersonPhoneNumberWhereInput, orderBy: CateringPersonPhoneNumberOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CateringPersonPhoneNumberConnection!
  cateringPersonPhoneNumberType(where: CateringPersonPhoneNumberTypeWhereUniqueInput!): CateringPersonPhoneNumberType
  cateringPersonPhoneNumberTypes(where: CateringPersonPhoneNumberTypeWhereInput, orderBy: CateringPersonPhoneNumberTypeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CateringPersonPhoneNumberType]!
  cateringPersonPhoneNumberTypesConnection(where: CateringPersonPhoneNumberTypeWhereInput, orderBy: CateringPersonPhoneNumberTypeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CateringPersonPhoneNumberTypeConnection!
  cateringPreference(where: CateringPreferenceWhereUniqueInput!): CateringPreference
  cateringPreferences(where: CateringPreferenceWhereInput, orderBy: CateringPreferenceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CateringPreference]!
  cateringPreferencesConnection(where: CateringPreferenceWhereInput, orderBy: CateringPreferenceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CateringPreferenceConnection!
  cateringPreferenceCategory(where: CateringPreferenceCategoryWhereUniqueInput!): CateringPreferenceCategory
  cateringPreferenceCategories(where: CateringPreferenceCategoryWhereInput, orderBy: CateringPreferenceCategoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CateringPreferenceCategory]!
  cateringPreferenceCategoriesConnection(where: CateringPreferenceCategoryWhereInput, orderBy: CateringPreferenceCategoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CateringPreferenceCategoryConnection!
  cateringProposalSubscriber(where: CateringProposalSubscriberWhereUniqueInput!): CateringProposalSubscriber
  cateringProposalSubscribers(where: CateringProposalSubscriberWhereInput, orderBy: CateringProposalSubscriberOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CateringProposalSubscriber]!
  cateringProposalSubscribersConnection(where: CateringProposalSubscriberWhereInput, orderBy: CateringProposalSubscriberOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CateringProposalSubscriberConnection!
  cateringPurchaseOrder(where: CateringPurchaseOrderWhereUniqueInput!): CateringPurchaseOrder
  cateringPurchaseOrders(where: CateringPurchaseOrderWhereInput, orderBy: CateringPurchaseOrderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CateringPurchaseOrder]!
  cateringPurchaseOrdersConnection(where: CateringPurchaseOrderWhereInput, orderBy: CateringPurchaseOrderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CateringPurchaseOrderConnection!
  cateringTask(where: CateringTaskWhereUniqueInput!): CateringTask
  cateringTasks(where: CateringTaskWhereInput, orderBy: CateringTaskOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CateringTask]!
  cateringTasksConnection(where: CateringTaskWhereInput, orderBy: CateringTaskOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CateringTaskConnection!
  cateringTaskNote(where: CateringTaskNoteWhereUniqueInput!): CateringTaskNote
  cateringTaskNotes(where: CateringTaskNoteWhereInput, orderBy: CateringTaskNoteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CateringTaskNote]!
  cateringTaskNotesConnection(where: CateringTaskNoteWhereInput, orderBy: CateringTaskNoteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CateringTaskNoteConnection!
  cateringUnit(where: CateringUnitWhereUniqueInput!): CateringUnit
  cateringUnits(where: CateringUnitWhereInput, orderBy: CateringUnitOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CateringUnit]!
  cateringUnitsConnection(where: CateringUnitWhereInput, orderBy: CateringUnitOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CateringUnitConnection!
  cateringWFTransition(where: CateringWFTransitionWhereUniqueInput!): CateringWFTransition
  cateringWFTransitions(where: CateringWFTransitionWhereInput, orderBy: CateringWFTransitionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CateringWFTransition]!
  cateringWFTransitionsConnection(where: CateringWFTransitionWhereInput, orderBy: CateringWFTransitionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CateringWFTransitionConnection!
  currency(where: CurrencyWhereUniqueInput!): Currency
  currencies(where: CurrencyWhereInput, orderBy: CurrencyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Currency]!
  currenciesConnection(where: CurrencyWhereInput, orderBy: CurrencyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CurrencyConnection!
  dayOfWeekValue(where: DayOfWeekValueWhereUniqueInput!): DayOfWeekValue
  dayOfWeekValues(where: DayOfWeekValueWhereInput, orderBy: DayOfWeekValueOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [DayOfWeekValue]!
  dayOfWeekValuesConnection(where: DayOfWeekValueWhereInput, orderBy: DayOfWeekValueOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): DayOfWeekValueConnection!
  defaultProposal(where: DefaultProposalWhereUniqueInput!): DefaultProposal
  defaultProposals(where: DefaultProposalWhereInput, orderBy: DefaultProposalOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [DefaultProposal]!
  defaultProposalsConnection(where: DefaultProposalWhereInput, orderBy: DefaultProposalOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): DefaultProposalConnection!
  delivery(where: DeliveryWhereUniqueInput!): Delivery
  deliveries(where: DeliveryWhereInput, orderBy: DeliveryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Delivery]!
  deliveriesConnection(where: DeliveryWhereInput, orderBy: DeliveryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): DeliveryConnection!
  emailAddress(where: EmailAddressWhereUniqueInput!): EmailAddress
  emailAddresses(where: EmailAddressWhereInput, orderBy: EmailAddressOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [EmailAddress]!
  emailAddressesConnection(where: EmailAddressWhereInput, orderBy: EmailAddressOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): EmailAddressConnection!
  flightFileProposal(where: FlightFileProposalWhereUniqueInput!): FlightFileProposal
  flightFileProposals(where: FlightFileProposalWhereInput, orderBy: FlightFileProposalOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [FlightFileProposal]!
  flightFileProposalsConnection(where: FlightFileProposalWhereInput, orderBy: FlightFileProposalOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): FlightFileProposalConnection!
  legBusinessType(where: LegBusinessTypeWhereUniqueInput!): LegBusinessType
  legBusinessTypes(where: LegBusinessTypeWhereInput, orderBy: LegBusinessTypeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [LegBusinessType]!
  legBusinessTypesConnection(where: LegBusinessTypeWhereInput, orderBy: LegBusinessTypeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): LegBusinessTypeConnection!
  legOperationalStatus(where: LegOperationalStatusWhereUniqueInput!): LegOperationalStatus
  legOperationalStatuses(where: LegOperationalStatusWhereInput, orderBy: LegOperationalStatusOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [LegOperationalStatus]!
  legOperationalStatusesConnection(where: LegOperationalStatusWhereInput, orderBy: LegOperationalStatusOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): LegOperationalStatusConnection!
  legOperationalType(where: LegOperationalTypeWhereUniqueInput!): LegOperationalType
  legOperationalTypes(where: LegOperationalTypeWhereInput, orderBy: LegOperationalTypeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [LegOperationalType]!
  legOperationalTypesConnection(where: LegOperationalTypeWhereInput, orderBy: LegOperationalTypeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): LegOperationalTypeConnection!
  msTask(where: MsTaskWhereUniqueInput!): MsTask
  msTasks(where: MsTaskWhereInput, orderBy: MsTaskOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [MsTask]!
  msTasksConnection(where: MsTaskWhereInput, orderBy: MsTaskOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): MsTaskConnection!
  openingHour(where: OpeningHourWhereUniqueInput!): OpeningHour
  openingHours(where: OpeningHourWhereInput, orderBy: OpeningHourOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [OpeningHour]!
  openingHoursConnection(where: OpeningHourWhereInput, orderBy: OpeningHourOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): OpeningHourConnection!
  orderBusinessType(where: OrderBusinessTypeWhereUniqueInput!): OrderBusinessType
  orderBusinessTypes(where: OrderBusinessTypeWhereInput, orderBy: OrderBusinessTypeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [OrderBusinessType]!
  orderBusinessTypesConnection(where: OrderBusinessTypeWhereInput, orderBy: OrderBusinessTypeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): OrderBusinessTypeConnection!
  overBudget(where: OverBudgetWhereUniqueInput!): OverBudget
  overBudgets(where: OverBudgetWhereInput, orderBy: OverBudgetOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [OverBudget]!
  overBudgetsConnection(where: OverBudgetWhereInput, orderBy: OverBudgetOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): OverBudgetConnection!
  overBudgetNote(where: OverBudgetNoteWhereUniqueInput!): OverBudgetNote
  overBudgetNotes(where: OverBudgetNoteWhereInput, orderBy: OverBudgetNoteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [OverBudgetNote]!
  overBudgetNotesConnection(where: OverBudgetNoteWhereInput, orderBy: OverBudgetNoteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): OverBudgetNoteConnection!
  passenger(where: PassengerWhereUniqueInput!): Passenger
  passengers(where: PassengerWhereInput, orderBy: PassengerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Passenger]!
  passengersConnection(where: PassengerWhereInput, orderBy: PassengerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PassengerConnection!
  proposal(where: ProposalWhereUniqueInput!): Proposal
  proposals(where: ProposalWhereInput, orderBy: ProposalOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Proposal]!
  proposalsConnection(where: ProposalWhereInput, orderBy: ProposalOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProposalConnection!
  proposalDocument(where: ProposalDocumentWhereUniqueInput!): ProposalDocument
  proposalDocuments(where: ProposalDocumentWhereInput, orderBy: ProposalDocumentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ProposalDocument]!
  proposalDocumentsConnection(where: ProposalDocumentWhereInput, orderBy: ProposalDocumentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProposalDocumentConnection!
  proposalItem(where: ProposalItemWhereUniqueInput!): ProposalItem
  proposalItems(where: ProposalItemWhereInput, orderBy: ProposalItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ProposalItem]!
  proposalItemsConnection(where: ProposalItemWhereInput, orderBy: ProposalItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProposalItemConnection!
  purchaseOrderDocument(where: PurchaseOrderDocumentWhereUniqueInput!): PurchaseOrderDocument
  purchaseOrderDocuments(where: PurchaseOrderDocumentWhereInput, orderBy: PurchaseOrderDocumentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PurchaseOrderDocument]!
  purchaseOrderDocumentsConnection(where: PurchaseOrderDocumentWhereInput, orderBy: PurchaseOrderDocumentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PurchaseOrderDocumentConnection!
  purchaseOrderItem(where: PurchaseOrderItemWhereUniqueInput!): PurchaseOrderItem
  purchaseOrderItems(where: PurchaseOrderItemWhereInput, orderBy: PurchaseOrderItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PurchaseOrderItem]!
  purchaseOrderItemsConnection(where: PurchaseOrderItemWhereInput, orderBy: PurchaseOrderItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PurchaseOrderItemConnection!
  qualityControl(where: QualityControlWhereUniqueInput!): QualityControl
  qualityControls(where: QualityControlWhereInput, orderBy: QualityControlOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [QualityControl]!
  qualityControlsConnection(where: QualityControlWhereInput, orderBy: QualityControlOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): QualityControlConnection!
  qualityNote(where: QualityNoteWhereUniqueInput!): QualityNote
  qualityNotes(where: QualityNoteWhereInput, orderBy: QualityNoteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [QualityNote]!
  qualityNotesConnection(where: QualityNoteWhereInput, orderBy: QualityNoteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): QualityNoteConnection!
  serviceProviderEmail(where: ServiceProviderEmailWhereUniqueInput!): ServiceProviderEmail
  serviceProviderEmails(where: ServiceProviderEmailWhereInput, orderBy: ServiceProviderEmailOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ServiceProviderEmail]!
  serviceProviderEmailsConnection(where: ServiceProviderEmailWhereInput, orderBy: ServiceProviderEmailOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ServiceProviderEmailConnection!
  serviceProviderPhoneNumber(where: ServiceProviderPhoneNumberWhereUniqueInput!): ServiceProviderPhoneNumber
  serviceProviderPhoneNumbers(where: ServiceProviderPhoneNumberWhereInput, orderBy: ServiceProviderPhoneNumberOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ServiceProviderPhoneNumber]!
  serviceProviderPhoneNumbersConnection(where: ServiceProviderPhoneNumberWhereInput, orderBy: ServiceProviderPhoneNumberOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ServiceProviderPhoneNumberConnection!
  userPreferences(where: UserPreferencesWhereUniqueInput!): UserPreferences
  userPreferenceses(where: UserPreferencesWhereInput, orderBy: UserPreferencesOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [UserPreferences]!
  userPreferencesesConnection(where: UserPreferencesWhereInput, orderBy: UserPreferencesOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserPreferencesConnection!
  node(id: ID!): Node
}

type ServiceProviderEmail {
  id: ID!
  coreId: String!
  serviceProvider: CServiceProvider
  value: String
}

type ServiceProviderEmailConnection {
  pageInfo: PageInfo!
  edges: [ServiceProviderEmailEdge]!
  aggregate: AggregateServiceProviderEmail!
}

input ServiceProviderEmailCreateInput {
  coreId: String!
  serviceProvider: CServiceProviderCreateOneWithoutServiceProviderEmailsInput
  value: String
}

input ServiceProviderEmailCreateManyWithoutServiceProviderInput {
  create: [ServiceProviderEmailCreateWithoutServiceProviderInput!]
  connect: [ServiceProviderEmailWhereUniqueInput!]
}

input ServiceProviderEmailCreateWithoutServiceProviderInput {
  coreId: String!
  value: String
}

type ServiceProviderEmailEdge {
  node: ServiceProviderEmail!
  cursor: String!
}

enum ServiceProviderEmailOrderByInput {
  id_ASC
  id_DESC
  coreId_ASC
  coreId_DESC
  value_ASC
  value_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ServiceProviderEmailPreviousValues {
  id: ID!
  coreId: String!
  value: String
}

input ServiceProviderEmailScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  coreId: String
  coreId_not: String
  coreId_in: [String!]
  coreId_not_in: [String!]
  coreId_lt: String
  coreId_lte: String
  coreId_gt: String
  coreId_gte: String
  coreId_contains: String
  coreId_not_contains: String
  coreId_starts_with: String
  coreId_not_starts_with: String
  coreId_ends_with: String
  coreId_not_ends_with: String
  value: String
  value_not: String
  value_in: [String!]
  value_not_in: [String!]
  value_lt: String
  value_lte: String
  value_gt: String
  value_gte: String
  value_contains: String
  value_not_contains: String
  value_starts_with: String
  value_not_starts_with: String
  value_ends_with: String
  value_not_ends_with: String
  AND: [ServiceProviderEmailScalarWhereInput!]
  OR: [ServiceProviderEmailScalarWhereInput!]
  NOT: [ServiceProviderEmailScalarWhereInput!]
}

type ServiceProviderEmailSubscriptionPayload {
  mutation: MutationType!
  node: ServiceProviderEmail
  updatedFields: [String!]
  previousValues: ServiceProviderEmailPreviousValues
}

input ServiceProviderEmailSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ServiceProviderEmailWhereInput
  AND: [ServiceProviderEmailSubscriptionWhereInput!]
  OR: [ServiceProviderEmailSubscriptionWhereInput!]
  NOT: [ServiceProviderEmailSubscriptionWhereInput!]
}

input ServiceProviderEmailUpdateInput {
  coreId: String
  serviceProvider: CServiceProviderUpdateOneWithoutServiceProviderEmailsInput
  value: String
}

input ServiceProviderEmailUpdateManyDataInput {
  coreId: String
  value: String
}

input ServiceProviderEmailUpdateManyMutationInput {
  coreId: String
  value: String
}

input ServiceProviderEmailUpdateManyWithoutServiceProviderInput {
  create: [ServiceProviderEmailCreateWithoutServiceProviderInput!]
  delete: [ServiceProviderEmailWhereUniqueInput!]
  connect: [ServiceProviderEmailWhereUniqueInput!]
  set: [ServiceProviderEmailWhereUniqueInput!]
  disconnect: [ServiceProviderEmailWhereUniqueInput!]
  update: [ServiceProviderEmailUpdateWithWhereUniqueWithoutServiceProviderInput!]
  upsert: [ServiceProviderEmailUpsertWithWhereUniqueWithoutServiceProviderInput!]
  deleteMany: [ServiceProviderEmailScalarWhereInput!]
  updateMany: [ServiceProviderEmailUpdateManyWithWhereNestedInput!]
}

input ServiceProviderEmailUpdateManyWithWhereNestedInput {
  where: ServiceProviderEmailScalarWhereInput!
  data: ServiceProviderEmailUpdateManyDataInput!
}

input ServiceProviderEmailUpdateWithoutServiceProviderDataInput {
  coreId: String
  value: String
}

input ServiceProviderEmailUpdateWithWhereUniqueWithoutServiceProviderInput {
  where: ServiceProviderEmailWhereUniqueInput!
  data: ServiceProviderEmailUpdateWithoutServiceProviderDataInput!
}

input ServiceProviderEmailUpsertWithWhereUniqueWithoutServiceProviderInput {
  where: ServiceProviderEmailWhereUniqueInput!
  update: ServiceProviderEmailUpdateWithoutServiceProviderDataInput!
  create: ServiceProviderEmailCreateWithoutServiceProviderInput!
}

input ServiceProviderEmailWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  coreId: String
  coreId_not: String
  coreId_in: [String!]
  coreId_not_in: [String!]
  coreId_lt: String
  coreId_lte: String
  coreId_gt: String
  coreId_gte: String
  coreId_contains: String
  coreId_not_contains: String
  coreId_starts_with: String
  coreId_not_starts_with: String
  coreId_ends_with: String
  coreId_not_ends_with: String
  serviceProvider: CServiceProviderWhereInput
  value: String
  value_not: String
  value_in: [String!]
  value_not_in: [String!]
  value_lt: String
  value_lte: String
  value_gt: String
  value_gte: String
  value_contains: String
  value_not_contains: String
  value_starts_with: String
  value_not_starts_with: String
  value_ends_with: String
  value_not_ends_with: String
  AND: [ServiceProviderEmailWhereInput!]
  OR: [ServiceProviderEmailWhereInput!]
  NOT: [ServiceProviderEmailWhereInput!]
}

input ServiceProviderEmailWhereUniqueInput {
  id: ID
  coreId: String
}

type ServiceProviderPhoneNumber {
  id: ID!
  coreId: String!
  serviceProvider: CServiceProvider
  value: String
}

type ServiceProviderPhoneNumberConnection {
  pageInfo: PageInfo!
  edges: [ServiceProviderPhoneNumberEdge]!
  aggregate: AggregateServiceProviderPhoneNumber!
}

input ServiceProviderPhoneNumberCreateInput {
  coreId: String!
  serviceProvider: CServiceProviderCreateOneWithoutServiceProviderPhoneNumbersInput
  value: String
}

input ServiceProviderPhoneNumberCreateManyWithoutServiceProviderInput {
  create: [ServiceProviderPhoneNumberCreateWithoutServiceProviderInput!]
  connect: [ServiceProviderPhoneNumberWhereUniqueInput!]
}

input ServiceProviderPhoneNumberCreateWithoutServiceProviderInput {
  coreId: String!
  value: String
}

type ServiceProviderPhoneNumberEdge {
  node: ServiceProviderPhoneNumber!
  cursor: String!
}

enum ServiceProviderPhoneNumberOrderByInput {
  id_ASC
  id_DESC
  coreId_ASC
  coreId_DESC
  value_ASC
  value_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ServiceProviderPhoneNumberPreviousValues {
  id: ID!
  coreId: String!
  value: String
}

input ServiceProviderPhoneNumberScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  coreId: String
  coreId_not: String
  coreId_in: [String!]
  coreId_not_in: [String!]
  coreId_lt: String
  coreId_lte: String
  coreId_gt: String
  coreId_gte: String
  coreId_contains: String
  coreId_not_contains: String
  coreId_starts_with: String
  coreId_not_starts_with: String
  coreId_ends_with: String
  coreId_not_ends_with: String
  value: String
  value_not: String
  value_in: [String!]
  value_not_in: [String!]
  value_lt: String
  value_lte: String
  value_gt: String
  value_gte: String
  value_contains: String
  value_not_contains: String
  value_starts_with: String
  value_not_starts_with: String
  value_ends_with: String
  value_not_ends_with: String
  AND: [ServiceProviderPhoneNumberScalarWhereInput!]
  OR: [ServiceProviderPhoneNumberScalarWhereInput!]
  NOT: [ServiceProviderPhoneNumberScalarWhereInput!]
}

type ServiceProviderPhoneNumberSubscriptionPayload {
  mutation: MutationType!
  node: ServiceProviderPhoneNumber
  updatedFields: [String!]
  previousValues: ServiceProviderPhoneNumberPreviousValues
}

input ServiceProviderPhoneNumberSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ServiceProviderPhoneNumberWhereInput
  AND: [ServiceProviderPhoneNumberSubscriptionWhereInput!]
  OR: [ServiceProviderPhoneNumberSubscriptionWhereInput!]
  NOT: [ServiceProviderPhoneNumberSubscriptionWhereInput!]
}

input ServiceProviderPhoneNumberUpdateInput {
  coreId: String
  serviceProvider: CServiceProviderUpdateOneWithoutServiceProviderPhoneNumbersInput
  value: String
}

input ServiceProviderPhoneNumberUpdateManyDataInput {
  coreId: String
  value: String
}

input ServiceProviderPhoneNumberUpdateManyMutationInput {
  coreId: String
  value: String
}

input ServiceProviderPhoneNumberUpdateManyWithoutServiceProviderInput {
  create: [ServiceProviderPhoneNumberCreateWithoutServiceProviderInput!]
  delete: [ServiceProviderPhoneNumberWhereUniqueInput!]
  connect: [ServiceProviderPhoneNumberWhereUniqueInput!]
  set: [ServiceProviderPhoneNumberWhereUniqueInput!]
  disconnect: [ServiceProviderPhoneNumberWhereUniqueInput!]
  update: [ServiceProviderPhoneNumberUpdateWithWhereUniqueWithoutServiceProviderInput!]
  upsert: [ServiceProviderPhoneNumberUpsertWithWhereUniqueWithoutServiceProviderInput!]
  deleteMany: [ServiceProviderPhoneNumberScalarWhereInput!]
  updateMany: [ServiceProviderPhoneNumberUpdateManyWithWhereNestedInput!]
}

input ServiceProviderPhoneNumberUpdateManyWithWhereNestedInput {
  where: ServiceProviderPhoneNumberScalarWhereInput!
  data: ServiceProviderPhoneNumberUpdateManyDataInput!
}

input ServiceProviderPhoneNumberUpdateWithoutServiceProviderDataInput {
  coreId: String
  value: String
}

input ServiceProviderPhoneNumberUpdateWithWhereUniqueWithoutServiceProviderInput {
  where: ServiceProviderPhoneNumberWhereUniqueInput!
  data: ServiceProviderPhoneNumberUpdateWithoutServiceProviderDataInput!
}

input ServiceProviderPhoneNumberUpsertWithWhereUniqueWithoutServiceProviderInput {
  where: ServiceProviderPhoneNumberWhereUniqueInput!
  update: ServiceProviderPhoneNumberUpdateWithoutServiceProviderDataInput!
  create: ServiceProviderPhoneNumberCreateWithoutServiceProviderInput!
}

input ServiceProviderPhoneNumberWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  coreId: String
  coreId_not: String
  coreId_in: [String!]
  coreId_not_in: [String!]
  coreId_lt: String
  coreId_lte: String
  coreId_gt: String
  coreId_gte: String
  coreId_contains: String
  coreId_not_contains: String
  coreId_starts_with: String
  coreId_not_starts_with: String
  coreId_ends_with: String
  coreId_not_ends_with: String
  serviceProvider: CServiceProviderWhereInput
  value: String
  value_not: String
  value_in: [String!]
  value_not_in: [String!]
  value_lt: String
  value_lte: String
  value_gt: String
  value_gte: String
  value_contains: String
  value_not_contains: String
  value_starts_with: String
  value_not_starts_with: String
  value_ends_with: String
  value_not_ends_with: String
  AND: [ServiceProviderPhoneNumberWhereInput!]
  OR: [ServiceProviderPhoneNumberWhereInput!]
  NOT: [ServiceProviderPhoneNumberWhereInput!]
}

input ServiceProviderPhoneNumberWhereUniqueInput {
  id: ID
  coreId: String
}

type Subscription {
  cAccount(where: CAccountSubscriptionWhereInput): CAccountSubscriptionPayload
  cAircraft(where: CAircraftSubscriptionWhereInput): CAircraftSubscriptionPayload
  cAircraftType(where: CAircraftTypeSubscriptionWhereInput): CAircraftTypeSubscriptionPayload
  cAirport(where: CAirportSubscriptionWhereInput): CAirportSubscriptionPayload
  cAlert(where: CAlertSubscriptionWhereInput): CAlertSubscriptionPayload
  cCompany(where: CCompanySubscriptionWhereInput): CCompanySubscriptionPayload
  cContract(where: CContractSubscriptionWhereInput): CContractSubscriptionPayload
  cCrew(where: CCrewSubscriptionWhereInput): CCrewSubscriptionPayload
  cCrewRole(where: CCrewRoleSubscriptionWhereInput): CCrewRoleSubscriptionPayload
  cFboServiceProvider(where: CFboServiceProviderSubscriptionWhereInput): CFboServiceProviderSubscriptionPayload
  cFlightLeg(where: CFlightLegSubscriptionWhereInput): CFlightLegSubscriptionPayload
  cFxRate(where: CFxRateSubscriptionWhereInput): CFxRateSubscriptionPayload
  cPerson(where: CPersonSubscriptionWhereInput): CPersonSubscriptionPayload
  cPlace(where: CPlaceSubscriptionWhereInput): CPlaceSubscriptionPayload
  cPriceItem(where: CPriceItemSubscriptionWhereInput): CPriceItemSubscriptionPayload
  cPriceList(where: CPriceListSubscriptionWhereInput): CPriceListSubscriptionPayload
  cServiceProvider(where: CServiceProviderSubscriptionWhereInput): CServiceProviderSubscriptionPayload
  cServiceType(where: CServiceTypeSubscriptionWhereInput): CServiceTypeSubscriptionPayload
  cTimezone(where: CTimezoneSubscriptionWhereInput): CTimezoneSubscriptionPayload
  cateringCategory(where: CateringCategorySubscriptionWhereInput): CateringCategorySubscriptionPayload
  cateringCompanyEmail(where: CateringCompanyEmailSubscriptionWhereInput): CateringCompanyEmailSubscriptionPayload
  cateringCompanyEmailType(where: CateringCompanyEmailTypeSubscriptionWhereInput): CateringCompanyEmailTypeSubscriptionPayload
  cateringCompanyPhoneNumber(where: CateringCompanyPhoneNumberSubscriptionWhereInput): CateringCompanyPhoneNumberSubscriptionPayload
  cateringCompanyPhoneNumberType(where: CateringCompanyPhoneNumberTypeSubscriptionWhereInput): CateringCompanyPhoneNumberTypeSubscriptionPayload
  cateringCosts(where: CateringCostsSubscriptionWhereInput): CateringCostsSubscriptionPayload
  cateringCountry(where: CateringCountrySubscriptionWhereInput): CateringCountrySubscriptionPayload
  cateringCuisine(where: CateringCuisineSubscriptionWhereInput): CateringCuisineSubscriptionPayload
  cateringDietaryPreference(where: CateringDietaryPreferenceSubscriptionWhereInput): CateringDietaryPreferenceSubscriptionPayload
  cateringIngredient(where: CateringIngredientSubscriptionWhereInput): CateringIngredientSubscriptionPayload
  cateringNotification(where: CateringNotificationSubscriptionWhereInput): CateringNotificationSubscriptionPayload
  cateringPersonEmail(where: CateringPersonEmailSubscriptionWhereInput): CateringPersonEmailSubscriptionPayload
  cateringPersonEmailType(where: CateringPersonEmailTypeSubscriptionWhereInput): CateringPersonEmailTypeSubscriptionPayload
  cateringPersonNationality(where: CateringPersonNationalitySubscriptionWhereInput): CateringPersonNationalitySubscriptionPayload
  cateringPersonPhoneNumber(where: CateringPersonPhoneNumberSubscriptionWhereInput): CateringPersonPhoneNumberSubscriptionPayload
  cateringPersonPhoneNumberType(where: CateringPersonPhoneNumberTypeSubscriptionWhereInput): CateringPersonPhoneNumberTypeSubscriptionPayload
  cateringPreference(where: CateringPreferenceSubscriptionWhereInput): CateringPreferenceSubscriptionPayload
  cateringPreferenceCategory(where: CateringPreferenceCategorySubscriptionWhereInput): CateringPreferenceCategorySubscriptionPayload
  cateringProposalSubscriber(where: CateringProposalSubscriberSubscriptionWhereInput): CateringProposalSubscriberSubscriptionPayload
  cateringPurchaseOrder(where: CateringPurchaseOrderSubscriptionWhereInput): CateringPurchaseOrderSubscriptionPayload
  cateringTask(where: CateringTaskSubscriptionWhereInput): CateringTaskSubscriptionPayload
  cateringTaskNote(where: CateringTaskNoteSubscriptionWhereInput): CateringTaskNoteSubscriptionPayload
  cateringUnit(where: CateringUnitSubscriptionWhereInput): CateringUnitSubscriptionPayload
  cateringWFTransition(where: CateringWFTransitionSubscriptionWhereInput): CateringWFTransitionSubscriptionPayload
  currency(where: CurrencySubscriptionWhereInput): CurrencySubscriptionPayload
  dayOfWeekValue(where: DayOfWeekValueSubscriptionWhereInput): DayOfWeekValueSubscriptionPayload
  defaultProposal(where: DefaultProposalSubscriptionWhereInput): DefaultProposalSubscriptionPayload
  delivery(where: DeliverySubscriptionWhereInput): DeliverySubscriptionPayload
  emailAddress(where: EmailAddressSubscriptionWhereInput): EmailAddressSubscriptionPayload
  flightFileProposal(where: FlightFileProposalSubscriptionWhereInput): FlightFileProposalSubscriptionPayload
  legBusinessType(where: LegBusinessTypeSubscriptionWhereInput): LegBusinessTypeSubscriptionPayload
  legOperationalStatus(where: LegOperationalStatusSubscriptionWhereInput): LegOperationalStatusSubscriptionPayload
  legOperationalType(where: LegOperationalTypeSubscriptionWhereInput): LegOperationalTypeSubscriptionPayload
  msTask(where: MsTaskSubscriptionWhereInput): MsTaskSubscriptionPayload
  openingHour(where: OpeningHourSubscriptionWhereInput): OpeningHourSubscriptionPayload
  orderBusinessType(where: OrderBusinessTypeSubscriptionWhereInput): OrderBusinessTypeSubscriptionPayload
  overBudget(where: OverBudgetSubscriptionWhereInput): OverBudgetSubscriptionPayload
  overBudgetNote(where: OverBudgetNoteSubscriptionWhereInput): OverBudgetNoteSubscriptionPayload
  passenger(where: PassengerSubscriptionWhereInput): PassengerSubscriptionPayload
  proposal(where: ProposalSubscriptionWhereInput): ProposalSubscriptionPayload
  proposalDocument(where: ProposalDocumentSubscriptionWhereInput): ProposalDocumentSubscriptionPayload
  proposalItem(where: ProposalItemSubscriptionWhereInput): ProposalItemSubscriptionPayload
  purchaseOrderDocument(where: PurchaseOrderDocumentSubscriptionWhereInput): PurchaseOrderDocumentSubscriptionPayload
  purchaseOrderItem(where: PurchaseOrderItemSubscriptionWhereInput): PurchaseOrderItemSubscriptionPayload
  qualityControl(where: QualityControlSubscriptionWhereInput): QualityControlSubscriptionPayload
  qualityNote(where: QualityNoteSubscriptionWhereInput): QualityNoteSubscriptionPayload
  serviceProviderEmail(where: ServiceProviderEmailSubscriptionWhereInput): ServiceProviderEmailSubscriptionPayload
  serviceProviderPhoneNumber(where: ServiceProviderPhoneNumberSubscriptionWhereInput): ServiceProviderPhoneNumberSubscriptionPayload
  userPreferences(where: UserPreferencesSubscriptionWhereInput): UserPreferencesSubscriptionPayload
}

type UserPreferences {
  id: ID!
  coreId: String!
  person: CPerson
  preferences: String
  modifiedBy: CPerson
  modifiedAt: DateTime
  removed: Boolean
}

type UserPreferencesConnection {
  pageInfo: PageInfo!
  edges: [UserPreferencesEdge]!
  aggregate: AggregateUserPreferences!
}

input UserPreferencesCreateInput {
  coreId: String!
  person: CPersonCreateOneInput
  preferences: String
  modifiedBy: CPersonCreateOneInput
  modifiedAt: DateTime
  removed: Boolean
}

type UserPreferencesEdge {
  node: UserPreferences!
  cursor: String!
}

enum UserPreferencesOrderByInput {
  id_ASC
  id_DESC
  coreId_ASC
  coreId_DESC
  preferences_ASC
  preferences_DESC
  modifiedAt_ASC
  modifiedAt_DESC
  removed_ASC
  removed_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type UserPreferencesPreviousValues {
  id: ID!
  coreId: String!
  preferences: String
  modifiedAt: DateTime
  removed: Boolean
}

type UserPreferencesSubscriptionPayload {
  mutation: MutationType!
  node: UserPreferences
  updatedFields: [String!]
  previousValues: UserPreferencesPreviousValues
}

input UserPreferencesSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserPreferencesWhereInput
  AND: [UserPreferencesSubscriptionWhereInput!]
  OR: [UserPreferencesSubscriptionWhereInput!]
  NOT: [UserPreferencesSubscriptionWhereInput!]
}

input UserPreferencesUpdateInput {
  coreId: String
  person: CPersonUpdateOneInput
  preferences: String
  modifiedBy: CPersonUpdateOneInput
  modifiedAt: DateTime
  removed: Boolean
}

input UserPreferencesUpdateManyMutationInput {
  coreId: String
  preferences: String
  modifiedAt: DateTime
  removed: Boolean
}

input UserPreferencesWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  coreId: String
  coreId_not: String
  coreId_in: [String!]
  coreId_not_in: [String!]
  coreId_lt: String
  coreId_lte: String
  coreId_gt: String
  coreId_gte: String
  coreId_contains: String
  coreId_not_contains: String
  coreId_starts_with: String
  coreId_not_starts_with: String
  coreId_ends_with: String
  coreId_not_ends_with: String
  person: CPersonWhereInput
  preferences: String
  preferences_not: String
  preferences_in: [String!]
  preferences_not_in: [String!]
  preferences_lt: String
  preferences_lte: String
  preferences_gt: String
  preferences_gte: String
  preferences_contains: String
  preferences_not_contains: String
  preferences_starts_with: String
  preferences_not_starts_with: String
  preferences_ends_with: String
  preferences_not_ends_with: String
  modifiedBy: CPersonWhereInput
  modifiedAt: DateTime
  modifiedAt_not: DateTime
  modifiedAt_in: [DateTime!]
  modifiedAt_not_in: [DateTime!]
  modifiedAt_lt: DateTime
  modifiedAt_lte: DateTime
  modifiedAt_gt: DateTime
  modifiedAt_gte: DateTime
  removed: Boolean
  removed_not: Boolean
  AND: [UserPreferencesWhereInput!]
  OR: [UserPreferencesWhereInput!]
  NOT: [UserPreferencesWhereInput!]
}

input UserPreferencesWhereUniqueInput {
  id: ID
  coreId: String
}
